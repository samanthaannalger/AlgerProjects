PlantVL <- PlantVL[ which(PlantVL$virusBINY==1), ]
# split by experiment
PlantVLsplit <- split(PlantVL, PlantVL$Exp)
summary(PlantVLsplit$PlantTrans$genomeCopy)
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   6959   20790   47830  107200  125100  554300
# Range = 10^3 - 10^5
# Mean = 10^5
sd(PlantVLsplit$PlantTrans$genomeCopy)
summary(PlantVLsplit$Survey$genomeCopy)
sd(PlantVLsplit$Survey$genomeCopy)
# Determine starting VL for honey bees
#read in data:
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
VirusNorm <- function(number_bees = 50, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
GITCperbee <- 200
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=MigVirus){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$run, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("sample_name", "run", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("sample_name", "run"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
# USE FUNCTIONS:
HBNorm<- VirusNorm(data=HB, 50)
HBVL<-actinNormal(data=HBNorm)
table(HBVL$target_name, HBVL$NormGenomeCopy)
View(HBVL)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
#setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
setwd("~/Documents/GitHub/AlgerProjects/PlantTransExp/CSV_Files")
# packages required:
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
library(multcomp)
library(lsmeans)
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantVL <- read.csv ("CleanPlantVirus.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# make data frame of duration data
expID <- c("RC_acute", "BFT_acute", "WC_acute", "WC_chronic-1", "WC_chronic-2", "WC_chronic-3", "BFT_diversity", "RC_diversity", "WC_diversity")
duration <- c(173.50, 210.73, 228.08, 213.02, 181.17, 177.87, 210.08, 210.08, 210.08)
durDat <- data.frame(expID, duration)
# Create table for forage time data
VidDat <- ddply(VideoData, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
# merge duraction data and normalize per hr:
VidDat <- merge(VidDat, durDat)
VidDat$visits <- 60*(VidDat$visits/VidDat$duration)
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat, plantTrans,by=c("expID"), all.y=TRUE)
# select columns from virus load DF and Merge with plantTrans DF:
virusLoad <- dplyr::select(virusLoad, labID, target_name, genomeCopy)
plantTrans <-merge(plantTrans, virusLoad, by=c("labID","target_name"), all.x=TRUE)
# Make all genome copyies 0 if Binyprefilter is 0, This is because the virus load data clean up did not take into account the duplicate/triplicate discrepancies...
plantTrans$genomeCopy <- ifelse(plantTrans$BINYprefilter == 0,0, plantTrans$genomeCopy)
# Add new column for 'experiment' type so that all 'comingle (1-3)' experiments are coded as 'comingle'
plantTrans$experiment <- ifelse(plantTrans$exp == "chronic-1"|plantTrans$exp =="chronic-2"| plantTrans$exp == "chronic-3", "chronic", plantTrans$exp)
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#Full Model:
ModDat <- plantTreat
ModDat$spp <- as.factor(ModDat$spp)
ModDat$target_name <- as.factor(ModDat$target_name)
# subset to remove diversity and comingle
ModDatAcute <- ModDat[!ModDat$experiment==c("diversity"), ]
ModDatAcute <- ModDatAcute[!ModDatAcute$experiment==c("comingle"), ]
##### Revision, attempt to seperate out experiments and run analysis seperately
null <- glmer(data=ModDatAcute, BINYprefilter ~ (1|ID), family = binomial(link="logit"))
full <- glmer(data=ModDatAcute, BINYprefilter ~ spp + target_name + (spp * target_name) + (1|ID), family = binomial(link="logit"))
main <- glmer(data=ModDatAcute, BINYprefilter ~ target_name + spp + (1|ID), family = binomial(link="logit"))
virus <- glmer(data=ModDatAcute, BINYprefilter ~ spp + (1|ID), family = binomial(link="logit"))
flower <- glmer(data=ModDatAcute, BINYprefilter ~ target_name + (1|ID), family = binomial(link="logit"))
# full model test
anova(null, full)
# interaction test
anova(full, main)
# flower
anova(main, flower)
# virus
anova(main, virus)
# remove comingle
ModDatNoCoM <- ModDat[!ModDat$experiment==c("comingle"), ]
ModDatNoCoM$expSimple <- ifelse(ModDatNoCoM$experiment=="diversity", "diversity", "acute")
ModDatNoCoM$expSimple <- as.factor(ModDatNoCoM$expSimple)
#Checking out by plant species
plantSpp <- ddply(ModDatNoCoM, c("target_name", "spp", "expSimple"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSppMon <- plantSpp[plantSpp$expSimple=="acute",]
plantSppDiv <- plantSpp[plantSpp$expSimple=="diversity",]
##### MODEL WORKS!!!! and is legal!!!!
full1 <- glmer(data=ModDatNoCoM, BINYprefilter ~ expSimple * spp + (1|ID), family = binomial(link="logit"))
null1 <- glmer(data=ModDatNoCoM, BINYprefilter ~ (1|ID), family = binomial(link="logit"))
main1 <- glmer(data=ModDatNoCoM, BINYprefilter ~ expSimple + spp + (1|ID), family = binomial(link="logit"))
exp1 <- glmer(data=ModDatNoCoM, BINYprefilter ~ spp + (1|ID), family = binomial(link="logit"))
plant1 <- glmer(data=ModDatNoCoM, BINYprefilter ~ expSimple + (1|ID), family = binomial(link="logit"))
anova(full1, null1) # null vs full model
anova(full1, main1) # interaction test
anova(main1, exp1)
anova(main1, plant1)
# Testing vistis and forage times across plant species:
# remove duplicates:
visitation <- ModDat[c("spp", "visits", "foragetime", "experiment")]
visitation <- visitation[!duplicated(visitation),]
# Remove zeros
Loadno0 <- ModDat[!ModDat$BINYprefilter==0,]
#Checking distribution:
hist(Loadno0$genomeCopy, breaks = 12)
Loadno0$loggenomeCopy <- log10(Loadno0$genomeCopy+1)
hist(Loadno0$loggenomeCopy,breaks=12)
noBFT<- Loadno0 [! (Loadno0$spp =="BFT"), ]
# We used an ANOVAs:
#Loadno0$visits <- as.factor(Loadno0$visits)
#Loadno0$foragetime <- as.factor(Loadno0$foragetime)
Loadno0$spp <- as.factor(Loadno0$spp)
# removove comingle and create binary exp var
Loadno0 <- Loadno0[!Loadno0$experiment=="comingle",]
Loadno0$expMerge <- ifelse(Loadno0$experiment=="diversity", "diversity", "acute")
Loadno0$expMerge <- as.factor(Loadno0$expMerge)
x <- split(Loadno0, Loadno0$expMerge)
# viral load models
null2 <- lmer(data=Loadno0, loggenomeCopy~(1|labID), REML=FALSE)
full2 <- lmer(data=Loadno0, loggenomeCopy~spp*target_name + (1|labID), REML=FALSE)
main2 <- lmer(data=Loadno0, loggenomeCopy~spp+target_name + (1|labID), REML=FALSE)
spp2 <- lmer(data=Loadno0, loggenomeCopy~target_name + (1|labID), REML=FALSE)
virus2 <- lmer(data=Loadno0, loggenomeCopy~spp + (1|labID), REML=FALSE)
# significance
anova(full2, main2)
anova(full2, null2)
anova(main2, spp2)
anova(main2, virus2)
# post hoc
ht = glht(full2, mcp(spp="Tukey"))
summary(ht)
null3 <- lmer(data=Loadno0, loggenomeCopy~(1|labID), REML=FALSE)
full3 <- lmer(data=Loadno0, loggenomeCopy~spp*expMerge + (1|labID), REML=FALSE)
main3 <- lmer(data=Loadno0, loggenomeCopy~spp+expMerge + (1|labID), REML=FALSE)
spp3 <- lmer(data=Loadno0, loggenomeCopy~expMerge + (1|labID), REML=FALSE)
exp3 <- lmer(data=Loadno0, loggenomeCopy~spp + (1|labID), REML=FALSE)
anova(full3, main3)
anova(full3, null3)
anova(main3, spp3)
anova(main3, exp3)
summary(full3)
# post hoc
ht3 = glht(full3, mcp(spp="Tukey"))
summary(ht3)
Anova(main3)
boxplot(Loadno0$loggenomeCopy~Loadno0$expMerge, ylab = "log load")
# visitation rates and duration of visits on viruses loads and prevalence
full4 <- glmer(data=ModDat,BINYprefilter~visits*foragetime + (1|labID), family = binomial(link = "logit"))
main4 <- glmer(data=ModDat,BINYprefilter~visits+foragetime + (1|labID), family = binomial(link = "logit"))
vis4 <- glmer(data=ModDat,BINYprefilter~foragetime + (1|labID), family = binomial(link = "logit"))
time4 <- glmer(data=ModDat,BINYprefilter~visits + (1|labID), family = binomial(link = "logit"))
anova(full4, main4)
anova(main4, vis4)
anova(main4, time4)
summary(full4)
fit = glm(BINYprefilter~visits, data=ModDat, family = binomial(link = "logit"))
newdat <- data.frame(visits=seq(min(ModDat$visits, na.rm=T), max(ModDat$visits,  na.rm=T), len=100))
newdat$BINYprefilter = predict(fit, newdata=newdat, type="response")
plot(BINYprefilter~visits, data=ModDat, col="red4")
lines(BINYprefilter~visits, newdat, col="green4", lwd=2)
fit1 = glm(BINYprefilter~foragetime, data=ModDat, family = binomial(link = "logit"))
newdat <- data.frame(foragetime=seq(min(ModDat$foragetime, na.rm=T), max(ModDat$foragetime,  na.rm=T), len=100))
newdat$BINYprefilter = predict(fit1, newdata=newdat, type="response")
plot(BINYprefilter~foragetime, data=ModDat, col="red4")
lines(BINYprefilter~foragetime, newdat, col="green4", lwd=2)
full5 <- lmer(data=Loadno0, loggenomeCopy~ visits * foragetime + (1|labID), REML = FALSE)
main5 <- lmer(data=Loadno0, loggenomeCopy~ visits+ foragetime+ (1|labID), REML = FALSE)
vis5 <- lmer(data=Loadno0, loggenomeCopy~ foragetime + (1|labID), REML = FALSE)
time5 <- lmer(data=Loadno0, loggenomeCopy~ visits + (1|labID), REML = FALSE)
anova(full5, main5)
anova(main5, vis5)
anova(main5, time5)
Anova(full5)
# post hoc
ht5 = glht(full5, mcp(visits="Tukey"))
summary(ht5)
table(ModDat$visits, ModDat$expID)
plot(y=Loadno0$loggenomeCopy, x=Loadno0$visits)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat,BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
Anova(full6)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
Anova(full6)
anova(full6)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*expMerge + (1|labID), family = binomial(link = "logit"))
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*experiment + (1|labID), family = binomial(link = "logit"))
summary(full6)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits+experiment + (1|labID), family = binomial(link = "logit"))
summary(full6)
anova(full6, vis6)
vis6 <- glmer(data=ModDat, BINYprefilter~experiment + (1|labID), family = binomial(link = "logit"))
anova(full6, vis6)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits+experiment + (1|labID), family = binomial(link = "logit"))
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits+experiment + (1|labID), family = binomial(link = "logit"))
vis6 <- glmer(data=ModDat, BINYprefilter~experiment + (1|labID), family = binomial(link = "logit"))
anova(full6, vis6)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
spp6 <- glmer(data=ModDat, BINYprefilter~visits + (1|labID), family = binomial(link = "logit"))
anova(full6, spp6)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
main6 <- glmer(data=ModDat, BINYprefilter~visits+spp (1|labID), family = binomial(link = "logit"))
Loadno0$genomeCopyasdfas
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
main6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
anova(full6, main6)
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"))
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"))
main7 <- glmer(data=ModDat, BINYprefilter~duration+spp + (1|labID), family = binomial(link = "logit"))
anova(full7, main7)
full7 <- glmer(data=ModDat, BINYprefilter~visits*experiment + (1|labID), family = binomial(link = "logit"))
main7 <- glmer(data=ModDat, BINYprefilter~visits+experiment + (1|labID), family = binomial(link = "logit"))
anova(full7, main7)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
main6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
anova(full6, main6)
full7 <- glmer(data=ModDat, BINYprefilter~visits*experiment + (1|labID), family = binomial(link = "logit"))
main7 <- glmer(data=ModDat, BINYprefilter~visits+experiment + (1|labID), family = binomial(link = "logit"))
anova(full7, main7)
full7 <- lmer(data=Loadno0, loggenomeCopy~visits*experiment + (1|labID))
main7 <- lmer(data=Loadno0, loggenomeCopy~visits+experiment + (1|labID))
anova(full7, main7)
summary(full6)
summary(full7)
Anova(full6)
Anova(full6)
Anova(full7)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*(spp + experiment) + (1|labID), family = binomial(link = "logit"))
summary(full6)
lsmeans(full6, c(visits*spp))
lsmeans(full6, visits*spp)
lsm <- lsmeans(full6, ~ visits*spp, adjust="tukey")
contrast(lsm, alpha=0.05, method="pairwise", adjust=NULL)
ModDat$visits
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
main6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
anova(full6, main6)
full7 <- lmer(data=Loadno0, loggenomeCopy~visits*experiment + (1|labID))
main7 <- lmer(data=Loadno0, loggenomeCopy~visits+experiment + (1|labID))
anova(full7, main7)
Anova(full7)
summary(full7)
x <- split(ModDat, ModDat$spp)
bft <- x$BFT
plot(bft$BINYprefilter, bft$visits)
plot(y=bft$BINYprefilter, x=bft$visits)
plot(y=bft$BINYprefilter, x=bft$visits)
rc <- x$RC
plot(y=rc$BINYprefilter, x=rc$visits)
wc <- x$WC
plot(y=wc$BINYprefilter, x=wc$visits)
# ++++++++++++++++++++++++++++ prev +++++++++++++++++++++++++++++
# visitation rates and duration of visits on viruses loads and prevalence
full6 <- glmer(data=ModDat, BINYprefilter~visits*spp + (1|labID), family = binomial(link = "logit"))
main6 <- glmer(data=ModDat, BINYprefilter~visits+spp + (1|labID), family = binomial(link = "logit"))
anova(full6, main6)
summary(full6)
full7 <- lmer(data=Loadno0, loggenomeCopy~visits*experiment + (1|labID))
main7 <- lmer(data=Loadno0, loggenomeCopy~visits+experiment + (1|labID))
anova(full7, main7)
summary(full7)
Loadno0$experiment
boxplot(Loadno0$loggenomeCopy~Loadno0$expMerge, ylab = "log load")
full7 <- lmer(data=Loadno0, loggenomeCopy~visits*expMerge + (1|labID))
main7 <- lmer(data=Loadno0, loggenomeCopy~visits+expMerge + (1|labID))
anova(full7, main7)
full7 <- lmer(data=Loadno0, loggenomeCopy~visits*expMerge + (1|labID))
main7 <- lmer(data=Loadno0, loggenomeCopy~visits+expMerge + (1|labID))
anova(full7, main7)
summary(full7)
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"))
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"))
ModDat$duration
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"), nACQ = 0)
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"), nAGQ = 1L)
full7 <- glmer(data=ModDat, BINYprefilter~duration*spp + (1|labID), family = binomial(link = "logit"), nAGQ = 0)
main7 <- glmer(data=ModDat, BINYprefilter~duration+spp + (1|labID), family = binomial(link = "logit"))
anova(full7, main7)
summary(full7)
table(ModDatAcute$BINYprefilter, ModDatAcute$target_name)
chisq.test(table(ModDatAcute$BINYprefilter, ModDatAcute$target_name))
null3 <- lmer(data=Loadno0, loggenomeCopy~(1|labID), REML=FALSE)
full3 <- lmer(data=Loadno0, loggenomeCopy~spp*expMerge + (1|labID), REML=FALSE)
main3 <- lmer(data=Loadno0, loggenomeCopy~spp+expMerge + (1|labID), REML=FALSE)
spp3 <- lmer(data=Loadno0, loggenomeCopy~expMerge + (1|labID), REML=FALSE)
exp3 <- lmer(data=Loadno0, loggenomeCopy~spp + (1|labID), REML=FALSE)
anova(full3, main3)
anova(full3, null3)
anova(main3, spp3)
anova(main3, exp3)
summary(full3)
Anova(full3)
Anova(main3)
anova(main3, spp3)
anova(main3, exp3)
###### SET UP DATA SET AND VARS FOR CALCULATIONS: #######
MWm2 <- 24.25 # density of plants per 1 meter squared
plotArea <- 137088 # area of plot in meters squared
plantsSE <- 300 # number of plants sampled at each time step
eggCounts <- c(0,0,0,1,1,3,0,0,0,0,0,0,0,0) # vector of counts of eggs at each of 14 time steps
# calculate total number of plants at BV:
plantsInPlot <- MWm2 * plotArea
# calculate the number of estimated eggs in plot for each time step:
totalEggsVec <- (eggCounts/plantsSE) * plantsInPlot
# sum them up for total eggs at BV so far:
sumeggs<-sum(totalEggsVec)
# with 10% survivorship to adulthood:
sumeggs*.10
# Clear memory of characters:
ls()
rm(list=ls())
# source my packages
library(plyr)
library(ggplot2)
library(reshape2)
# Set Working Directory:
setwd("~/AlgerProjects/Milkweed/Data")
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
head(Monarch)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs, na.rm = TRUE),
larvae = sum(Total_Larvae, na.rm = TRUE),
adults = sum(TotalAdult, na.rm = TRUE))
MonarchLong <- melt(MonarchStats, id.vars = c("Site", "Date"))
MonarchLong <- MonarchLong[order(MonarchLong$Date),]
MonarchLong$Date <- as.character(MonarchLong$Date)
p <- ggplot(data=MonarchLong, aes(x=Date, y=value, color=variable)) +
geom_line(aes(linetype = Site), size=1.5) +
geom_point(size=3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Number of Observations") +
theme_minimal(base_size = 15)
p + theme(legend.position="top", legend.box = "horizontal")
x <- split(MonarchLong, MonarchLong$Site)
Borderview <- x$Borderview
Dewing <- x$Dewing
b <- ggplot(Borderview, aes(x=Date, y=value, fill=variable)) +
theme_minimal(base_size = 16) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5), legend.position = c(.8, .8), axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Borderview", x ="Date", y = NULL, fill = "Life Stage") +
geom_bar(stat="identity") +
coord_cartesian(ylim = c(0, 15))
b
d <- ggplot(Dewing, aes(x=Date, y=value, fill=variable)) +
theme_minimal(base_size = 16) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5), legend.position =c(3,3)) +
labs(title="Dewing", x ="Date", y = "Number of Observations", fill = "Life Stage") +
geom_bar(stat="identity") +
coord_cartesian(ylim = c(0, 15))
d
library(patchwork)
d+b
setwd("~/Documents/GitHub/AlgerProjects/Milkweed")
# source my packages
library(plyr)
library(ggplot2)
library(reshape2)
# Set Working Directory:
setwd("~/AlgerProjects/Milkweed/Data")
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
setwd("~/Documents/GitHub/AlgerProjects/Milkweed/Data")
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
head(Monarch)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs, na.rm = TRUE),
larvae = sum(Total_Larvae, na.rm = TRUE),
adults = sum(TotalAdult, na.rm = TRUE))
MonarchLong <- melt(MonarchStats, id.vars = c("Site", "Date"))
MonarchLong <- MonarchLong[order(MonarchLong$Date),]
MonarchLong$Date <- as.character(MonarchLong$Date)
p <- ggplot(data=MonarchLong, aes(x=Date, y=value, color=variable)) +
geom_line(aes(linetype = Site), size=1.5) +
geom_point(size=3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Number of Observations") +
theme_minimal(base_size = 15)
p + theme(legend.position="top", legend.box = "horizontal")
x <- split(MonarchLong, MonarchLong$Site)
Borderview <- x$Borderview
Dewing <- x$Dewing
b <- ggplot(Borderview, aes(x=Date, y=value, fill=variable)) +
theme_minimal(base_size = 16) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5), legend.position = c(.8, .8), axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Borderview", x ="Date", y = NULL, fill = "Life Stage") +
geom_bar(stat="identity") +
coord_cartesian(ylim = c(0, 15))
b
d <- ggplot(Dewing, aes(x=Date, y=value, fill=variable)) +
theme_minimal(base_size = 16) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5), legend.position =c(3,3)) +
labs(title="Dewing", x ="Date", y = "Number of Observations", fill = "Life Stage") +
geom_bar(stat="identity") +
coord_cartesian(ylim = c(0, 15))
d
library(patchwork)
d+b
library(multiplot)
install.packages("multiplot")
library(multiplot)
library(cowplot)
plot_grid(b, d)
library(cowplot, ncol=1)
plot_grid(b, d, ncol=1)
plot_grid(b, d, b, ncol=1)
d+b
