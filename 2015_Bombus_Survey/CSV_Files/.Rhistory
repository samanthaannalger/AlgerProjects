summary(glht(mod, mcp(PlantSpp="Tukey")))
mod <- aov(data=VD, log10(Forage+1)~PlantSpp*ExpComp)
summary(mod)
##### Revision, attempt to seperate out experiments and run analysis seperately
Fullmod3 <- glm(data=ModDatAcute, BINYprefilter ~ spp * target_name, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
##### MODEL WORKS!!!! and is legal!!!!
Fullmod4 <- glm(data=ModDatNoCoM, BINYprefilter ~ expSimple + INT, family = binomial(link="logit"))
anova(Fullmod4, test="Chisq")
##### MODEL WORKS!!!! and is legal!!!!
Fullmod4 <- glm(data=ModDatNoCoM, BINYprefilter ~ expSimple * spp, family = binomial(link="logit"))
anova(Fullmod4, test="Chisq")
VD <- rbind(VD_acute, VD_diversity)
VD$PlantSpp <- as.factor(VD$PlantSpp)
mod <- aov(data=VD, log10(Forage+1)~PlantSpp*ExpComp)
summary(mod)
VD_acute$PlantSpp <- as.factor(VD_acute$PlantSpp)
VD_acute$PlantSpp <- as.factor(VD_acute$PlantSpp)
VD_acute$PlantSpp <- as.factor(VD_acute$PlantSpp)
VD_acute$PlantSpp <- as.factor(VD_acute$PlantSpp)
VD_acute$PlantSpp <- as.factor(VD_acute$PlantSpp)
VD_acute$PlantSpp <- as.factor(VD_acute$PlantSpp)
mod <- aov(data=VD_acute, log10(Forage+1)~PlantSpp)
summary(glht(mod, mcp(PlantSpp="Tukey")))
summary(mod)
kruskal.test(data=x$acute, loggenomeCopy ~ target_name)
kruskal.test(data=x$acute, loggenomeCopy ~ spp)
kruskal.test(data=Loadno0, loggenomeCopy ~ expMerge)
##### Revision, attempt to seperate out experiments and run analysis seperately
Fullmod3 <- glm(data=ModDatAcute, BINYprefilter ~ spp * target_name, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
##### MODEL WORKS!!!! and is legal!!!!
Fullmod4 <- glm(data=ModDatNoCoM, BINYprefilter ~ expSimple * spp, family = binomial(link="logit"))
anova(Fullmod4, test="Chisq")
setwd("~/Documents/GitHub/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
data <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
data
split(data, data$target_name)
# read in data:
data <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
splitDat <- split(data, data$target_name)
DWV <- splitDat$DWV
BQCV <- splitDat$BQCV
plot(DWV$BombPrev, DWV$ShannonDIV)
plot(DWV$ShannonDIV, DWV$BombPrev)
lm(DWV$BombPrev~DWV$ShannonDIV)
summary(lm(DWV$BombPrev~DWV$ShannonDIV))
summary(lm(BQCV$BombPrev~BQCV$ShannonDIV))
plot(BQCV$ShannonDIV, BQCV$BombPrev)
summary(lm(BQCV$BombPrev~BQCV$ShannonDIV))
plot(BQCV$ShannonDIV, BQCV$Density)
summary(lm(BQCV$BombPrev~BQCV$Density))
plot(BQCV$ShannonDIV, log(BQCV$Density))
plot(BQCV$ShannonDIV, BQCV$Density)
plot(BQCV$BombPrev, BQCV$Density)
summary(lm(BQCV$BombPrev~BQCV$Density))
plot(DWV$BombPrev, DWV$Density)
summary(lm(DWV$BombPrev~DWV$Density))
plot(DWV$BombPrev, DWV$Density)
plot(log10(DWV$BombMeanNA), DWV$Density)
plot(log10(DWV$BombMeanNA), DWV$Density)
plot(DWV$Density~log10(DWV$BombMeanNA))
plot(DWV$Density~log10(DWV$BombMeanNA))
plot(x=DWV$Density,y=log10(DWV$BombMeanNA))
summary(lm(log10(DWV$BombMeanNA)~DWV$Density))
summary(lm(log10(DWV$BombMeanNA+1)~DWV$Density))
plot(x=DWV$ShannonDIV,y=log10(DWV$BombMeanNA))
summary(lm(log10(DWV$BombMeanNA+1)~DWV$ShannonDIV))
plot(x=BQCV$ShannonDIV,y=log10(BQCV$BombMeanNA))
summary(lm(log10(BQCV$BombMeanNA+1)~BQCV$ShannonDIV))
plot(x=BQCV$Density,y=log10(BQCV$BombMeanNA))
summary(lm(log10(BQCV$BombMeanNA+1)~BQCV$Density))
plot(x=log10(BQCV$HBviralLoad),y=log10(BQCV$BombMeanNA))
plot(x=log10(DWV$HBviralLoad),y=log10(DWVV$BombMeanNA))
plot(x=log10(DWV$HBviralLoad),y=log10(DWV$BombMeanNA))
###################################################################
# Cellualar Automata Model of Spillover HB -> Bombus
# P. Alexander Burnham
# June 22, 2018
###################################################################
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Paramters:
#----------------------------------------------------------------------------
TimeSteps <- 300 # number of time steps
xDim <- 50 # x dimension of matrix
yDim <- 50 # y dimension of matrix
probBirth <- 6 # bee birth rate
probDeath <- 5 # bee death rate
#probDep <- c(30, 30, 30) # probability of depositing virus on flower
probDep <- c(60, 30, 0) # probability of depositing virus on flower
probAquireInfected <- 30
probScen <- 3
probFlow <- 4
colsBees <- c("white", "yellow", "orange", "pink", "red")
#----------------------------------------------------------------------------
# initialize random matrix with starting proportions of HB, BB individs:
beeVec <-sample(0:4, xDim*yDim, replace=T, prob = c(0.74, 0.05, 0.15, 0.1, 0.01))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
# initialize random matrix with starting proportions of HB, BB colonies, and flowers:
colVec <-sample(0:6, xDim*yDim, replace=T, prob = c(0.85, 0.01, 0.01, 0.01, 0.01, 0.1, 0.01))
colMat <- matrix(data = colVec, nrow = yDim, ncol = xDim)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
#rename <- function(x){
#  if (x < 10) {
#    return(name <- paste('000',t,'plot.png',sep=''))
#  }
#  if (x < 100 && i >= 10) {
#    return(name <- paste('00',t,'plot.png', sep=''))
#  }
#  if (x >= 100) {
#    return(name <- paste('0', t,'plot.png', sep=''))
#  }
#}
# initialize a matrix to store number of each state in matrix at each time step
counter <- matrix(nrow=TimeSteps, ncol=5)
counterCols <- matrix(nrow=TimeSteps, ncol=7)
# loop through time steps
for (t in 1:TimeSteps){
# store table of counts in each row of counter matrix
counter[t,] <- as.vector(table(beeMat))
counterCols[t,] <- as.vector(table(colMat))
# loop through each cell in the matrix
for (i in 1:xDim){
for (j in 1:yDim){
# create random unit movement steps for i and j
temp1 <- sample(c(1, -1), 1 ,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1), 1 ,replace=T, prob = c(0.5, 0.5))
# Move the Bees:
if(beeMat[i,j]>=1){
a <- ifelse(sum(i,temp1) %in% 1:xDim, sum(i,temp1), round(runif(1, 1, xDim)))
b <- ifelse(sum(j,temp2) %in% 1:yDim, sum(j,temp2), round(runif(1, 1, yDim)))
if(beeMat[a, b]==0){
beeMat[a, b] <- beeMat[i,j]
beeMat[i,j] <- 0
}
}
# Kill the Bees:
if(beeMat[i,j]>=1){
if(runif(1, 1,100)<=probDeath){
beeMat[i,j] <- 0
}
}
# Make the Bees:
if(colMat[i,j]==1 || colMat[i,j]==2 || colMat[i,j]==3){
if(runif(1, 1,100)<=probBirth){
beeMat[i,j] <- colMat[i,j]
}
}
# Honey Bees Deposite Virus on flowers
if(beeMat[i,j]==3 & colMat[i,j]==5){
if(runif(1, 1,100)<=sample(probDep, 1, replace=T, prob = c(1/3, 1/3, 1/3))){
colMat[i,j] <- 6
}
}
# Bumble Bees Pick up Virus
if(beeMat[i,j]==2 & colMat[i,j]==6){
if(runif(1, 1,100)<=probAquireInfected){
beeMat[i,j] <- 4
}
}
# Kill the Flowers:
if(colMat[i,j]>=5){
if(runif(1, 1,100)<=probScen){
colMat[i,j] <- 0
}
}
# Make the Flowers:
if(colMat[i,j]==0){
if(runif(1, 1,100)<=probFlow){
colMat[i,j] <- 5
}
}
} # end j loop
} # end i loop
# create names for each png:
#name <- rename(t)
#png(name)
# create each image to visulaize as a matrix
#image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=colsBees, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
#dev.off()
} # end of time step for loop
#run ImageMagick: creates a gif of all images
#my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
#system(my_command)
#dev.off()
ResultMat <- cbind(counter[,2:5], counterCols[,6:7])
x <- as.data.frame(ResultMat)
names(x) <- c("SHB", "SBB", "IHB", "IBB", "SF", "IF")
#x$SHBprev <- x$SHB/(x$SHB+x$IHB)
#x$SBBprev <- x$SBB/(x$SBB+x$IBB)
x$IHBprev <- x$IHB/(x$SHB+x$IHB)
x$IBBprev <- x$IBB/(x$SBB+x$IBB)
#x$SFprev <- x$SF/(x$IF+x$SF)
x$IFprev <- x$IF/(x$IF+x$SF)
ResultMat <- as.matrix(x[,c(7,8,9)])
colors <- c("green", "red", "blue")
matplot(y=ResultMat, type = "l", xlab = "Time",
ylab = "Prevalence", lwd=3,
col=colors, ylim = c(0, 1),
lty=1, cex.lab = 1.3)
grid()
legend(230, 1,
legend=c("Infected HB", "Infected BB", "Infected FL"),
col=colors, lty=1, cex=.8)
# FOR ALEX
setwd("~/Documents/GitHub/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# plant virus prevalence data:
Plants <- read.table("plants2015DF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# load site level data and merge pathogen data with GIS HB colony/apiary output:
SpatDat <- read.table("SpatDatBuffs.csv", header=TRUE,sep=",",stringsAsFactors=FALSE)
SpatDat <- dplyr::select(SpatDat, -elevation, -town, -apiary, -siteNotes, -apiaryNotes)
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialDat <- merge(SurvData, SpatDat, by = "site")
# merge data to create final APC data frame:
SpatDat <- dplyr::select(SpatDat, -lat, -long)
BombSurv <- merge(BombSurv, SpatDat, by = "site")
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee, -City, -Name, -virusBINY_PreFilter, -siteNotes, -X)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
# create variable that bins apiaries by how many colonies are there
BombSurv$ColoniesPooled <- ifelse(BombSurv$sumColonies1 <= 0, "0", ifelse(BombSurv$sumColonies1 <= 20, "1-19","20+"))
# formatting bombsurv to test Spatial Autocorralation on
BeeAbund <- read.table("BeeAbund.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
# create log virus data:
BombSurv$logVirus <- log(1+BombSurv$norm_genome_copbee)
BombSurv$logHB <- log(1+BombSurv$norm_genome_copbeeHB)
BombSurv <- merge(BombSurv, BeeAbund, by = "site")
BombSurv$HBdensRatio <-  BombSurv$Density/((BombSurv$apis+0.0000000000000001)/10)
# two data frames for DWV and BQCV for Morans I
BQCV <- subset(BombSurv, target_name=="BQCV")
DWV <- subset(BombSurv, target_name=="DWV")
# create Plants dataframe:
Plants <- merge(Plants, BeeAbund, all.x=TRUE, all.y=FALSE)
Plants <- merge(Plants, SpatialDat, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
# create data frames to test spatial AC
SpatialDatBQCV <- subset(SpatialDat, target_name=="BQCV")
SpatialDatDWV <- subset(SpatialDat, target_name=="DWV")
BQCVprev <- lm(data=SpatialDatBQCV, BombPrev ~ sumColonies1)
BQCVprevResid <- summary(BQCVprev)
BQCVprevResid$residual
DWVprev <- lm(data=SpatialDatDWV, BombPrev ~ sumColonies1)
DWVprevResid <- summary(DWVprev)
DWVprevResid$residual
DWVload <- lm(data=SpatialDatDWV, BombusViralLoad ~ sumColonies1)
DWVloadResid <- summary(DWVload)
DWVloadResid$residual
BQCVload <- lm(data=SpatialDatBQCV, BombusViralLoad ~ sumColonies1)
BQCVloadResid <- summary(BQCVload)
BQCVloadResid$residual
DWVhb <- lm(data=SpatialDatDWV, HBviralLoad ~ sumColonies1)
HBbqcvResid <- summary(DWVhb)
HBbqcvResid$residual
BQCVhb <- lm(data=SpatialDatBQCV, HBviralLoad ~ sumColonies1)
HBdwvResid <- summary(BQCVhb)
HBdwvResid$residual
#For DWV:
DWV.dists <- as.matrix(dist(cbind(SpatialDatDWV$long, SpatialDatDWV$lat)))
DWV.dists.inv <- 1/DWV.dists
diag(DWV.dists.inv) <- 0
#For BQCV:
BQ.dists <- as.matrix(dist(cbind(SpatialDatBQCV$long, SpatialDatBQCV$lat)))
BQ.dists.inv <- 1/BQ.dists
diag(BQ.dists.inv) <- 0
# BQCV PREV:
Moran.I(BQCVprevResid$residuals, BQ.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# DWV PREV:
Moran.I(DWVprevResid$residuals, DWV.dists.inv) # NO SPACIAL-AUTO COR
# BQCV LOAD:
Moran.I(BQCVloadResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV LOAD:
Moran.I(DWVloadResid$residual, DWV.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# BQCV HB LOAD
Moran.I(HBbqcvResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV HB LOAD:
Moran.I(HBdwvResid$residual, DWV.dists.inv) # NO SPACIAL-AUTO COR
AICfinderPrev <- function(X=Xvar, Y="virusBINY", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- glmer(data=data, formula = y~x + (1|site/species),
family = binomial(link = "logit"))
x <- summary(Fullmod)
return(list(x$AICtab[1], paste("P=", x$coefficients[2,4])))
}
# create vector of explainitory variables to test:
Xvar <- c("sumApiaries800", "sumColonies800","sumApiaries1", "sumColonies1","sumApiaries2", "sumColonies2","sumApiaries3", "sumColonies3","sumApiaries4", "sumColonies4","sumApiaries5", "sumColonies5")
# apply funciton to run though every iteration of DWV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=DWV)
# apply funciton to run though every iteration of BQCV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=BQCV)
AICfinderLoad <- function(X=Xvar, Y="logVirus", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- lmer(data=data, formula = y~x + (1|site/species))
z<-Anova(Fullmod)
return(list(AIC(Fullmod), paste("P=", z$`Pr(>Chisq)`)))
}
# apply function to run though every iteration of DWV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=DWV)
# apply function to run though every iteration of BQCV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=BQCV)
# remove unwanted target:
BombSurvNoAIPV<-BombSurv[!BombSurv$target_name==("IAPV"),]
# remove 0s
BombSurvNoAIPVno0<-BombSurvNoAIPV[!BombSurvNoAIPV$logVirus==0,]
#Create plot in ggplot
plot <- ggplot(data = BombSurvNoAIPVno0,
aes(x = ColoniesPooled,
y = logVirus,
fill = target_name)
) + geom_boxplot(color="black") + coord_cartesian(ylim = c(5, 20)) + labs(x = "# apis colonies within 1km radius", y = "log(genome copies/bee)", fill="Virus:")
# add a theme
plot + theme_bw(base_size = 17) + scale_fill_manual(values=c("white", "gray40"))
VirusSum <- ddply(BombSurvNoAIPV, c("target_name", "ColoniesPooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
#Create plot in ggplot
plot1 <- ggplot(data = VirusSum,
aes(x = ColoniesPooled,
y = mean,
shape = target_name)
) + geom_point(size=4) + coord_cartesian(ylim = c(0, 1)) + labs(x = "# apis colonies within 1km radius", y = "% prevalence", shape="Virus:") + scale_y_continuous(labels = scales::percent) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2))
# add a theme
plot1 + theme_bw(base_size = 17) + scale_shape_manual(values=c(19, 1)) + annotate(geom = "text", x = 1, y = .11, label = "n=205",cex = 4) + annotate(geom = "text", x = 2, y = .18, label = "n=71",cex = 4) + annotate(geom = "text", x = 3, y = .3, label = "n=92",cex = 4) + annotate(geom = "text", x = 1, y = .72, label = "n=188",cex = 4) + annotate(geom = "text", x = 2, y = 1, label = "n=62",cex = 4) + annotate(geom = "text", x = 3, y = .98, label = "n=88",cex = 4)
VirusSum1 <- ddply(BombSurvNoAIPV, c("target_name", "apiary_near_far"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
VirusSum1$apiary_near_far <- as.character(VirusSum1$apiary_near_far)
colors <- c("white", "grey25")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85),  panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + annotate(geom = "text", x = 1, y = .98, label = "*",cex = 10) + annotate(geom = "text", x = 2, y = .25, label = "*",cex = 9)
###################################################################################################
######################## CREATING PUBLICATION GRAPHICS FOR PLANT PREV #############################
###################################################################################################
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
#ddply summarize:
fieldPlantsSum <- ddply(Plants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sqrt(((mean(BINYprefilter))*(1-mean(BINYprefilter)))/n))
# remove 0 (make NA) for values so they dont plot error bars
fieldPlantsSum$sd[fieldPlantsSum$sd==0] <- NA
fieldPlantsSum$mean[fieldPlantsSum$mean==0] <- NA
#choosing color pallet
colors <- c("white", "grey30")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
# summary of viral load for by target and site
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
# remove BQCV and IAPV:
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
ggplot(data=CopDist, aes(log(1 + mean))) +
geom_histogram(breaks=seq(5, 25, by = 1),
col="black",
fill="grey30") +
labs(x="Apis DWV log(viral load)", y="Frequency") + theme_bw(base_size=23)
HBSiteSum <- ddply(DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
# remove 0 (make NA) for values so they dont plot error bars
HBSiteSum$sd[HBSiteSum$sd==0] <- NA
HBSiteSum$mean[HBSiteSum$mean==0] <- NA
colors <- c("grey30", "white", "white")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", color = "black") + labs(x="Level of DWV in Apis", y = "% Prevalence in Bombus")
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
BombSurv <- read.csv("MixedModelDF.csv", header=TRUE, stringsAsFactors=FALSE)
dat <- read.csv("MixedModelDF.csv", header=TRUE, stringsAsFactors=FALSE)
dat
dat <- read.csv("BombSurv.csv", header=TRUE, stringsAsFactors=FALSE)
datSplit <- split(dat, dat$target_name)
datSplit$DWV
str(datSplit$DWV)
as.Date(datSplit$DWV$Date_collected)
date(datSplit$DWV$Date_collected)
as.Date(datSplit$DWV$Date_collected, "%m/%d/%y)
as.Date(datSplit$DWV$Date_collected, "%m/%d/%y")
as.Date(datSplit$DWV$Date_collected, "%m/%d/%Y")
datSplit$DWV$Date_collected <- as.Date(datSplit$DWV$Date_collected, "%m/%d/%Y")
datSplit$DWV$Date_collected
library(lubridate)
month(as.POSIXlt(datSplit$DWV$Date_collected, format="%d/%m/%Y"))
datSplit$DWV$Month <- month(as.POSIXlt(datSplit$DWV$Date_collected, format="%d/%m/%Y"))
datSplit$DWV$Month
datSplit$DWV$apiary_near_far
chisq.test(datSplit$DWV$apiary_near_far, datSplit$DWV$Month)
plot(datSplit$DWV$apiary_near_far, datSplit$DWV$Month)
plot(datSplit$DWV$apiary_near_far, datSplit$DWV$Date_collected)
plot(y=datSplit$DWV$apiary_near_far, x=datSplit$DWV$Date_collected)
mylogit <- glm(datSplit$DWV$apiary_near_far ~ datSplit$DWV$Date_collected, family = "binomial")
summary(mylogit)
mylogit <- glmer(datSplit$DWV$apiary_near_far ~ datSplit$DWV$Date_collected + (1|site), family = "binomial")
mylogit <- glmer(data = datSplit$DWV, apiary_near_far ~ Date_collected + (1|site), family = "binomial")
table(datSplit$DWV$apiary_near_far, datSplit$DWV$Month)
chiTab <- table(datSplit$DWV$apiary_near_far, datSplit$DWV$Month)
chisq.test(chiTab)
ddply(datSplit$DWV, c("datSplit$DWV$Date_collected", "site"), summarise,
n = length(vapiary_near_far),
mean = mean(vapiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
ddply(datSplit$DWV, c("datSplit$DWV$Date_collected", "site"), summarise,
n = length(apiary_near_far),
mean = mean(apiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
smallDat <- ddply(datSplit$DWV, c("datSplit$DWV$Date_collected", "site"), summarise,
n = length(apiary_near_far),
mean = mean(apiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
smallDat <- ddply(datSplit$DWV, c("DWV$Date_collected", "site"), summarise,
n = length(apiary_near_far),
mean = mean(apiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
smallDat <- ddply(datSplit$DWV, c("Date_collected", "site"), summarise,
n = length(apiary_near_far),
mean = mean(apiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
datSplit$DWV$asdf
smallDat
smallDat$Month <- month(as.POSIXlt(smallDat$Date_collected, format="%d/%m/%Y"))
smallDat$Month
smallDat
chiTab <- table(smallDat$Month, smallDat$mean)
chiTab
chisq.test(chiTab)
fisher.test(chiTab)
datSplit$DWV$HBSiteBin
smallDat <- ddply(datSplit$DWV, c("Date_collected", "HBSiteBin"), summarise,
n = length(apiary_near_far),
mean = mean(apiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
<- ddply(datSplit$DWV, c("Date_collected", "HBSiteBin"), summarise,
smallDat
smallDat$Month <- month(as.POSIXlt(smallDat$Date_collected, format="%d/%m/%Y"))
chiTab <- table(smallDat$Month, smallDat$Month)
fisher.test(chiTab)
smallDat$Month
plot(log10(datSplit$DWV$norm_genome_copbeeHB+1), datSplit$DWV$Date_collected)
plot(y=log10(datSplit$DWV$norm_genome_copbeeHB+1), x=datSplit$DWV$Date_collected)
lm(log10(datSplit$DWV$norm_genome_copbeeHB+1)~datSplit$DWV$Date_collected)
m0d <- lm(log10(datSplit$DWV$norm_genome_copbeeHB+1)~datSplit$DWV$Date_collected)
mod <- lm(log10(datSplit$DWV$norm_genome_copbeeHB+1)~datSplit$DWV$Date_collected)
summary(mod)
abline(mod)
mod <- lm(datSplit$DWV$norm_genome_copbeeHB~datSplit$DWV$Date_collected)
summary(mod)
abline(mod)
dat <- read.csv("MixedMod.csv", header=TRUE, stringsAsFactors=FALSE)
ModDF <- read.csv("MixedModelDF.csv", header=TRUE, stringsAsFactors=FALSE)
split(ModDF, ModDF$target_name)
x <- split(ModDF, ModDF$target_name)
DWV <- x$DWV
DWV$HBviralLoad
DWV$site
smallDat <- ddply(datSplit$DWV, c("Date_collected", "site"), summarise,
n = length(apiary_near_far),
mean = mean(apiary_near_far),
sd = sqrt(((mean(apiary_near_far))*(1-mean(apiary_near_far)))/n))
smallDat
merge(DWV, smallDat, by=site)
merge(DWV, smallDat, by="site")
df <- merge(DWV, smallDat, by="site")
plot(df$HBviralLoad, df$Date_collected)
plot(log(df$HBviralLoad), df$Date_collected)
plot(log(df$HBviralLoad), x=df$Date_collected)
lm(plot(log(df$HBviralLoad)~df$Date_collected))
lm(log(df$HBviralLoad)~df$Date_collected)
lm(log(df$HBviralLoad+1)~df$Date_collected)
summary(lm(log(df$HBviralLoad+1)~df$Date_collected))
summary(lm(log10(df$HBviralLoad+1)~df$Date_collected))
df$Month <- month(as.POSIXlt(df$Date_collected, format="%d/%m/%Y"))
DWV
smallDat
hist(df$HBviralLoad)
kruskal.test(log10(df$HBviralLoad+1)~df$Month)
kruskal.test(df$HBviralLoad~df$Month)
