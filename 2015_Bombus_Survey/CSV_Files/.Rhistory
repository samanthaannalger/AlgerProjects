library(plyr)
VirusSum2 <- ddply(sp$Bimaculatus, c("target_name", "Date_Pooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusSum2 <- VirusSum2[-(7:9),]
library(ggplot2)
#Create plot in ggplot
plot <- ggplot(data = VirusSum2,
aes(x = Date_Pooled,
y = mean,
group = target_name,
colour = target_name)
) + geom_line(size=1.5) + geom_point(size=4) + scale_colour_manual(values = c("dodgerblue4", "black")) + coord_cartesian(ylim = c(0, 1)) + labs(x = "Month", y = "% Prevalence", color="Virus:") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) + scale_y_continuous(labels = scales::percent)
# add a theme and add asterix for significance
plot + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 1))
mod <- glm(tempsplit$BQCV$virusBINY~tempsplit$BQCV$Date_collected)
summary(mod)
```
Setting up data for regression between mean(bomble bee viral load) and HB viral load by site:
```{r}
# summary of bumbus viral load by site and target
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
# selcting the columns I want:
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
```
##Prevelence of viruses in bumble bees
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
```
##Prevelence of viruses in bumble bees
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("steelblue", "tan3")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(BombSurv, BombSurv$target_name)
# chi.sq test for BQCV prev. vs species (p < 0.00001)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
# chi.sq test for DWV prev. vs species (p = 0.9469)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
# make apiary binary a character so we can use it as a factor in the model
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
# using ddply to get summary of virusBINY by species and target name:
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
```
**Figure 2:** Percent prevalence of infected bumble bee individuals for black queen cell virus (BQCV), deformed wing virus (DWV) and Israeli acute paralysis virus (IAPV). Bumble bees were either caught in sites with honey bee apiaries present or no apiary nearby. BQCV (p<.0001) and DWV (p=.00225) were more prevalent in bumble bees caught in sites with a honey bee apiary present than in sites without an apiary nearby. IAPV was detected only in very low levels among a few individuals. This figure only includes bees with quantifiable viral infections above the threshold of detection for quantification.
**STATS**
```{r}
#stats for % prevalence, apiary_near_far differences
#remove NAs before doing test
PresAbst_stat <- BombSurv[which(BombSurv$apiary_near_far!="NA"),]
PresAbst_stat <- split(PresAbst_stat, PresAbst_stat$target_name)
# chi.sq test for BQCV prev. vs apiary_near_far (p < 0.00001)
chisq.test(PresAbst_stat$BQCV$virusBINY, PresAbst_stat$BQCV$apiary_near_far)
# chi.sq test for DWV prev. vs apiary_near_far (p =  0.001814)
chisq.test(PresAbst_stat$DWV$virusBINY, PresAbst_stat$DWV$apiary_near_far)
# summary of viral load for by target and site
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
# histogram of log mean viral for DWV  at each site showing bimodality for site:
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
# recode NAs for HBsiteBin as None to indicate no HB caught at site:
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "None"
# chi.sq test for High and Low DWV load sites
chisq.test(BombSurvSplit$DWV$HBSiteBin, BombSurvSplit$DWV$virusBINY)
fisher.test(BombSurvSplit$DWV$HBSiteBin, BombSurvSplit$DWV$virusBINY)
# Figure to see differences in virus prevalence over time
BombSurv$Date_collected <- as.Date(BombSurv$Date_collected, "%m/%d/%y")
tempsplit <- split(BombSurv, BombSurv$target_name)
BombSurv$Date_Pooled <- ifelse(BombSurv$Date_collected >= "2015-08-03", "August", ifelse(BombSurv$Date_collected >= "2015-07-28", "July", ifelse(BombSurv$Date_collected >= "2015-07-16", "July", "June")))
BombSurv$Date_Pooled <- factor(BombSurv$Date_Pooled, levels = c("June", "July", "August"))
library(dplyr)
sp <- split(BombSurv, BombSurv$species)
# create summary and sd and se using plyr
library(plyr)
VirusSum2 <- ddply(sp$Bimaculatus, c("target_name", "Date_Pooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusSum2 <- VirusSum2[-(7:9),]
library(ggplot2)
#Create plot in ggplot
plot <- ggplot(data = VirusSum2,
aes(x = Date_Pooled,
y = mean,
group = target_name,
colour = target_name)
) + geom_line(size=1.5) + geom_point(size=4) + scale_colour_manual(values = c("dodgerblue4", "black")) + coord_cartesian(ylim = c(0, 1)) + labs(x = "Month", y = "% Prevalence", color="Virus:") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) + scale_y_continuous(labels = scales::percent)
# add a theme and add asterix for significance
plot + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 1))
mod <- glm(tempsplit$BQCV$virusBINY~tempsplit$BQCV$Date_collected)
summary(mod)
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
# selcting the columns I want:
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
print(viralLoadDF)
# summary of bumbus viral load by site and target
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
# selcting the columns I want:
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
# summary of HB viral load by site and target
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
# selcting the columns I want:
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
# get apiary near far data:
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
# selcting the columns I want:
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
# merge HB and Bombus DFs and rename columns:
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
# merge in eco data
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
# merge in prev for bombus
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
# merge for bombus
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
# remove IAPV data (all 0 anyway)
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
# recoding NA as 0 for sites where no HB were found (prev of Virus is 0 so Viral load is also 0 or NULL)
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
# split DF by target name:
x <- split(viralLoadDF, viralLoadDF$target_name)
# linear regression of HB load and Bombus load for DWV
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
# linear regression of HB load and Bombus load for BQCV
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
# looking at mean bombus viral load by site viral prev for DWV (p=0.02)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
# looking at sans sites and values for each of them
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
viralLoadDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
viralLoadDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
head(MixedModelDF)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
head(MixedModelDF)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# mixed model of prevalence on viral load
mod2 <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~BombPrev, random = ~ 1 | site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
head(MixedModelDF)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
head(MixedModelDF)
# make apiary near far a factor variable:
MixedModelDF$apiary_near_far <- as.factor(MixedModelDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# mixed model of prevalence on viral load
mod2 <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~BombPrev, random = ~ 1 | site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plants2015Survey <- read.csv("plants2015DF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SiteData <- read.csv("2015SurveySpatial.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# merge datasets
fieldPlants <- merge(plants2015Survey,SiteData, by="site")
library(plyr)
library(dplyr)
library(ggplot2)
#change apiary column to say "apiary, no apiary"
fieldPlants$apiary[fieldPlants$apiary == "Y"] <- "apiary"
fieldPlants$apiary[fieldPlants$apiary == "N"] <- "no apiary"
# Are the plants with viruses at sites with or without apiaries?
#ddply summarize:
fieldPlantsSum <- ddply(fieldPlants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsSum
fieldPlants
fieldPlants$apiary
summary(fieldPlants)
table(fieldPlants$apiary)
fieldPlants$labID
View(fieldPlants)
FieldSum <- fieldPlants[which(unique(fieldPlants$labID)), ]
FieldSum <- select(unique(fieldPlants$labID)), ]
FieldSum <- select(unique(fieldPlants$labID), ])
FieldSum <- unique(fieldPlants$ID)
view(FieldSum)
View(FieldSum)
table(fieldPlants$apiary)
26/2
40/2
20+13
PosSites <- fieldPlants[which(fieldPlants$site=="MART", "WHAL","JOSH"), ]
fieldPlantsTotal <- ddply(fieldPlants, c("target_name",), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(fieldPlantsSum, aes(x=target_name, y=mean )) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
fieldPlantsTotal
table(fieldPlantsTotal)
fieldPlantsTotal$target_name
fieldPlantsTotal <- ddply(fieldPlants, c("target_name",), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal <- ddply(fieldPlants, c("target_name"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(fieldPlantsTotal, aes(x=target_name, y=mean )) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
fieldPlantsTotal
fieldPlantsTotal <- ddply(fieldPlants, c("BINYprefilter"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
fieldPlantsSum <- ddply(fieldPlants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
fieldPlantsSum
3/13
3/33
4/33
View(fieldPlantsSum)
View(fieldPlants)
fieldPlantsTotal <- ddply(fieldPlants, c("labID", "target_name"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
fieldPlantsTotal <- ddply(fieldPlants, c("labID"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
fieldPlantsTotal <- ddply(fieldPlants, c("labID"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
7/13
13/7
fieldPlantsTotal <- ddply(fieldPlants, c("labID","target_name"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
4/13
3/23
7/33
fieldPlantsTotal <- ddply(fieldPlants, c("species"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal <- ddply(fieldPlants, c("spp"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
6/33
