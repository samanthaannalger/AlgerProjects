head(sammyscounts)
sammy_is_so_smart <- sammyscounts[which(sammyscounts$Freq!=4),]
# rename column names! Never forget this one!
colnames(sammy_is_so_smart)<- c("ID","Freq")
#------------------------------------------------------------------------
# 2015 Bombus Survey PCR results:
# Data Cleaning Functions:
# P. Alexander Burnham
# 10, October 2016
#------------------------------------------------------------------------
# this function puts NAs in vectors where values parameters are not met then remvoes those columns, cleaning the data frame:
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
# END OF FUNCTION
# calling Burnhams_Fabulous_Data_Cleanser created above and using it on BombSurv data frame:
keptstuff <- Burnhams_Fabulous_Data_Cleanser(BombSurv)
# make NAs 0 in virusBINY
keptstuff$virusBINY [is.na(keptstuff$virusBINY)] <- 0
#----------------------------------------------------------------------
#making genome copies 0 if CT value is below the limit of detection (Bombus)
# splitting dataframe by target name
splitkeptstuff <- split(keptstuff, keptstuff$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbee[which(splitkeptstuff$DWV$Ct_mean > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbee[which(splitkeptstuff$BQCV$Ct_mean > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbee[which(splitkeptstuff$IAPV$Ct_mean > 30.796)] <- 0
# merge split dataframe back into "BombSurv" dataframe:
BombSurv <- rbind(splitkeptstuff$DWV, splitkeptstuff$BQCV, splitkeptstuff$IAPV)
#------------------------------------------------------------------------
#making genome copies 0 if CT value is below the limit of detection (apis)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbeeHB[which(splitkeptstuff$DWV$Ct_mean_hb > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbeeHB[which(splitkeptstuff$BQCV$Ct_mean_hb > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbeeHB[which(splitkeptstuff$IAPV$Ct_mean_hb > 30.796)] <- 0
# merge split dataframe back into "BombSurv" dataframe:
BombSurv <- rbind(splitkeptstuff$DWV, splitkeptstuff$BQCV, splitkeptstuff$IAPV)
#-----------------------------------------------------------------------
#Change genome copy HB from 0 to NA for sites with no HB virus data (no hbs collected) using column HBCollected
BombSurv$norm_genome_copbeeHB <- ifelse(BombSurv$HBCollected == "NA", "NA", BombSurv$norm_genome_copbeeHB)
#View(BombSurv)
#-----------------------------------------------------------------------
# adding bee abundance data to BombSurv
#looking at proportion of bees that are honey bees from bee abundance data
BeeAbun <- read.csv("BeeAbun.csv", header = TRUE)
#Making new column for apis=1
BeeAbun$HB <- ifelse(BeeAbun$Morpho_species == "apis", 1, 0)
#using ddply to find proportion (mean)
BeeAbunSum<- ddply(BeeAbun, c("site"), summarise,
HB_Abun = mean(HB, na.rm=TRUE))
#merge HB proportion data to bombus data
BombSurv <- merge(BombSurv, BeeAbunSum, by=c("site"), all.x=TRUE, all.y=FALSE)
#---------------------------------------------------------------------------
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$IAPV$HBSiteBin <- rep(NA, length(BombSurvSplit$IAPV$virusBINY))
BombSurvSplit$BQCV$HBSiteBin <- rep(NA, length(BombSurvSplit$BQCV$virusBINY))
BombSurvSplit$DWV$HBSiteBin <- ifelse(log(BombSurvSplit$DWV$norm_genome_copbeeHB) > 15, "High", "Low")
BombSurv <- rbind(BombSurvSplit$DWV, BombSurvSplit$BQCV, BombSurvSplit$IAPV)
#---------------------------------------------------------------------------
# END OF DATA CLEANING
#Export csv
write.csv(BombSurv, file = "BombSurv.csv")
#---------------------------------------------------------------------
#Working with NHBS data
#Adding NHBS data to BombSurv
Bomb_NHBS <- merge(BombSurv, NHBS, by=c("site"), all.x=TRUE, all.y=FALSE)
#remove NA rows from dataframe
Bomb_NHBS <- Bomb_NHBS[which(Bomb_NHBS$Apiary_name!="NA"),]
#split dataframe by bombus target
Bomb_NHBS_Split <- split(Bomb_NHBS, Bomb_NHBS$target_name)
Bomb_NHBS_Sum <- ddply(Bomb_NHBS_Split$DWV, c("site", "target_name", "Varroa100", "DWV_CPB"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#relationship between Varroa and bumble bee DWV loads
plot(Bomb_NHBS_Split$DWV$Varroa100,log(Bomb_NHBS_Split$DWV$norm_genome_copbee))
#relationship between NHBS DWV loads and My HB DWV loads
plot(log(Bomb_NHBS_Split$DWV$DWV_CPB),log(Bomb_NHBS_Split$DWV$norm_genome_copbeeHB))
#relationship between Varroa and bumble bee DWV prev.
plot(Bomb_NHBS_Sum$Varroa100,Bomb_NHBS_Sum$mean)
#relationship between Varroa and bumble bee DWV prev.
plot(log(Bomb_NHBS_Sum$DWV_CPB),Bomb_NHBS_Sum$mean)
plot(Bomb_NHBS_Split$DWV$Varroa100,log(Bomb_NHBS_Split$DWV$norm_genome_copbee))
#relationship between NHBS DWV loads and My HB DWV loads
plot(log(Bomb_NHBS_Split$DWV$DWV_CPB),log(Bomb_NHBS_Split$DWV$norm_genome_copbeeHB))
#relationship between Varroa and bumble bee DWV prev.
# uaing ddply to get summary of virusBINY by species and target name
VirusSum <- ddply(keptstuff, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#remove data for species other than vagans and bimaculatus
VirusSum <-VirusSum[-c(4:9),]
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species
#aes= aesthetics
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("Bimaculatus", "Vagans"))
statsplit <- split(keptstuff, keptstuff$target_name)
# chi.sq test for BQCV prev. vs species (p < 0.00001)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
# chi.sq test for DWV prev. vs species (p = 0.947)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
# uaing ddply to get summary of virusBINY by site
SitePrev <- ddply(BombSurv, c("site", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#remove Actin from HB data
HbDF<-HbDF[!(HbDF$target_name=="ACTIN"),]
#merge HB VL data to SitePrev
SitePrev <- merge(HbDF, SitePrev, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
# make NAs 0
SitePrev$norm_genome_copbeeHB[is.na(SitePrev$norm_genome_copbeeHB)] <- 0
#split site prev data by targets so that you can plot later
SplitSitePrev <- split(SitePrev,SitePrev$target_name)
#plotting data
plot(log(SplitSitePrev$BQCV$norm_genome_copbeeHB),SplitSitePrev$BQCV$mean)
plot(log(SplitSitePrev$DWV$norm_genome_copbeeHB),SplitSitePrev$DWV$mean)
plot(log(SplitSitePrev$IAPV$norm_genome_copbeeHB),SplitSitePrev$IAPV$mean)
## Assigning High or Low to HB VL data
SplitSitePrev$DWV$HBSiteBin <- ifelse(log(SplitSitePrev$DWV$norm_genome_copbeeHB) > 15, "High", "Low")
SplitSitePrevDWV <- select(SplitSitePrev$DWV, site, HBSiteBin)
#merge HB high low data to bombus data
DWV_Hb_Bomb_Bin <- merge(statsplit$DWV, SplitSitePrevDWV, by=c("site"), all.x=TRUE, all.y=FALSE)
DWV_for_merging <- select(DWV_Hb_Bomb_Bin, HBSiteBin, site, sample_name)
HBSiteSum <- ddply(DWV_Hb_Bomb_Bin, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
barplot(height=HBSiteSum$mean,
names.arg = c("HighHBLoad",
"LowHBLoad",
"NoHBCaught"),
xlab="Site Type",
ylab ="% Prevalence",
ylim = c(0,0.2),
main = "Bombus % Prevelence by HB Site Type",
col = colors
)
DWV_Hb_Bomb_Bin$HBSiteBin
chisq.test(DWV_Hb_Bomb_Bin$virusBINY, DWV_Hb_Bomb_Bin$HBSiteBin)
splitKept <- split(keptstuff, keptstuff$target_name)
x <- table(splitKept$DWV$site)
barplot(height = x, names.arg = NULL, las=2)
HBSiteSum <- ddply(DWV_Hb_Bomb_Bin, c("HBSiteBin", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
t.test(HBSiteSum$mean~HBSiteSum$HBSiteBin)
#-----------------------------------------------------------
#Analysis of Bee Abundance Data
#split data by target
splitBomb_HB_Abund <- split(BombSurv, BombSurv$target_name)
#plot bee abundance by apiary present or not
plot(BombSurv$apiary_near_far,BombSurv$HB_Abun)
#chisq.test to see if there are differences in HB abundance between the two treatment groups, apiary present or not.
chisq.test(BombSurv$apiary_near_far, BombSurv$HB_Abun)
#Working on a bar graph that shows honey bee abundance on y axis and apiary near/far on x axis. Are there differences between the two treatment groups? This will help support "apiary present" "apiary absent" treatments.
barplot(height=cbind(BombSurv$HB_Abun,
(BombSurv$apiary_near_far),
names.arg = c("High DWV Load",
"Low DWV Load",
"No Apis Caught")))
#plotting bee abundance at each site by the bombus DWV viral load
plot(splitBomb_HB_Abund$DWV$HB_Abun,log(splitBomb_HB_Abund$DWV$norm_genome_copbee))
plot(splitBomb_HB_Abund$BQCV$HB_Abun,log(splitBomb_HB_Abund$BQCV$norm_genome_copbee))
#check out the bee abundance data
barplot(height = BeeAbunSum$HB_Abun, names.arg = BeeAbunSum$site, las=2)
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans"))
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
```{r, echo=FALSE, message=FALSE}
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/Desktop/RScripts/2015_Bombus_Survey")
# read in data
BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
```
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
# remove data for species other than vagans and :
VirusSum <-VirusSum[-c(4:9),]
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1))
```
**Figure 1:** Percent prevalence (% of infected individuals) for two bumble bee species, *Bombus bimaculatus* and *Bombus vagans* for black queen cell virus (BQCV), deformed wing virus (DWV) and Israeli acute paralysis virus (IAPV). BQCV was significantly more prevalent among *B. bimaculatus* than *B. vagans* (p<0.00001). No significant differences in DWV prevalence between species (p = 0.9469). IAPV was detected only in low levels among a few individuals. This figure only includes bees with quantifiable viral infections above the threshold of detection.
```{r,  echo=FALSE, warning=FALSE,}
#stats for % prevalence, species differences
statsplit <- split(BombSurv, BombSurv$target_name)
# chi.sq test for BQCV prev. vs species (p < 0.00001)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
# chi.sq test for DWV prev. vs species (p = 0.9469)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
```
```{r,  echo=FALSE}
# make apiary binary a character so we can use it as a factor in the model
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
# using ddply to get summary of virusBINY by species and target name:
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
VirusSum1 <-VirusSum1[-c(7:9),]
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1))
```
**Figure 2:** Percent prevalence of infected bumble bee individuals for black queen cell virus (BQCV), deformed wing virus (DWV) and Israeli acute paralysis virus (IAPV). Bumble bees were either caught in sites with honey bee apiaries present or no apiary nearby. BQCV (p<.0001) and DWV (p=.00225) were more prevalent in bumble bees caught in sites with a honey bee apiary present than in sites without an apiary nearby. IAPV was detected only in very low levels among a few individuals. This figure only includes bees with quantifiable viral infections above the threshold of detection for quantification.
```{r,  echo=FALSE, results=FALSE}
#stats for % prevalence, apiary_near_far differences
#remove NAs before doing test
PresAbst_stat <- BombSurv[which(BombSurv$apiary_near_far!="NA"),]
PresAbst_stat <- split(PresAbst_stat, PresAbst_stat$target_name)
# chi.sq test for BQCV prev. vs apiary_near_far (p < 0.00001)
chisq.test(PresAbst_stat$BQCV$virusBINY, PresAbst_stat$BQCV$apiary_near_far)
# chi.sq test for DWV prev. vs apiary_near_far (p = 0.00225)
chisq.test(PresAbst_stat$DWV$virusBINY, PresAbst_stat$DWV$apiary_near_far)
```
```{r,  echo=FALSE}
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
barplot(height=HBSiteSum$mean,
names.arg = c("High DWV Load",
"Low DWV Load",
"No Apis Caught"),
xlab="Site Type",
ylab ="% Prevalence (Bombus with DWV)",
ylim = c(0,0.2),
main = "Bombus DWV Prevalence by Honey Bee DWV Load",
col = colors
)
```
**Figure 3:** Percent prevalance for Bumble bees infected with deformed wing virus at sites where honey bees had high and low viral loads, and sites where no honey bees were present and therefore could not be collected. DWV was more prevalent in bumble bees caught at sites with honey bees with high average viral loads, than sites with honey bees with low average viral loads (p = 0.046, X2 = 3.9767).
```{r,  echo=FALSE, results=FALSE}
#remove NA rows from dataframe
BombSurvSplit <- BombSurvSplit$DWV[which(BombSurvSplit$DWV$HBSiteBin!="NA"),]
# chi.sq test for High and Low DWV load sites
chisq.test(BombSurvSplit$HBSiteBin, BombSurvSplit$virusBINY)
```
```{r,  echo=FALSE}
```
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# FOR SAM:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# plant virus prevalence data:
Plants <- read.table("plants2015DF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# load site level data and merge pathogen data with GIS HB colony/apiary output:
SpatDat <- read.table("SpatDatBuffs.csv", header=TRUE,sep=",",stringsAsFactors=FALSE)
SpatDat <- dplyr::select(SpatDat, -elevation, -town, -apiary, -siteNotes, -apiaryNotes)
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialDat <- merge(SurvData, SpatDat, by = "site")
# merge data to create final APC data frame:
SpatDat <- dplyr::select(SpatDat, -lat, -long)
BombSurv <- merge(BombSurv, SpatDat, by = "site")
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee, -City, -Name, -virusBINY_PreFilter, -siteNotes, -X)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
# create variable that bins apiaries by how many colonies are there
BombSurv$ColoniesPooled <- ifelse(BombSurv$sumColonies1 <= 0, "0", ifelse(BombSurv$sumColonies1 <= 20, "1-19","20+"))
# formatting bombsurv to test Spatial Autocorralation on
BeeAbund <- read.table("BeeAbund.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
# create log virus data:
BombSurv$logVirus <- log(1+BombSurv$norm_genome_copbee)
BombSurv$logHB <- log(1+BombSurv$norm_genome_copbeeHB)
BombSurv <- merge(BombSurv, BeeAbund, by = "site")
BombSurv$HBdensRatio <-  BombSurv$Density/((BombSurv$apis+0.0000000000000001)/10)
# two data frames for DWV and BQCV for Morans I
BQCV <- subset(BombSurv, target_name=="BQCV")
DWV <- subset(BombSurv, target_name=="DWV")
# create Plants dataframe:
Plants <- merge(Plants, BeeAbund, all.x=TRUE, all.y=FALSE)
Plants <- merge(Plants, SpatialDat, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
# create data frames to test spatial AC
SpatialDatBQCV <- subset(SpatialDat, target_name=="BQCV")
SpatialDatDWV <- subset(SpatialDat, target_name=="DWV")
BQCVprev <- lm(data=SpatialDatBQCV, BombPrev ~ sumColonies1)
BQCVprevResid <- summary(BQCVprev)
BQCVprevResid$residual
DWVprev <- lm(data=SpatialDatDWV, BombPrev ~ sumColonies1)
DWVprevResid <- summary(DWVprev)
DWVprevResid$residual
DWVload <- lm(data=SpatialDatDWV, BombusViralLoad ~ sumColonies1)
DWVloadResid <- summary(DWVload)
DWVloadResid$residual
BQCVload <- lm(data=SpatialDatBQCV, BombusViralLoad ~ sumColonies1)
BQCVloadResid <- summary(BQCVload)
BQCVloadResid$residual
DWVhb <- lm(data=SpatialDatDWV, HBviralLoad ~ sumColonies1)
HBbqcvResid <- summary(DWVhb)
HBbqcvResid$residual
BQCVhb <- lm(data=SpatialDatBQCV, HBviralLoad ~ sumColonies1)
HBdwvResid <- summary(BQCVhb)
HBdwvResid$residual
#For DWV:
DWV.dists <- as.matrix(dist(cbind(SpatialDatDWV$long, SpatialDatDWV$lat)))
DWV.dists.inv <- 1/DWV.dists
diag(DWV.dists.inv) <- 0
#For BQCV:
BQ.dists <- as.matrix(dist(cbind(SpatialDatBQCV$long, SpatialDatBQCV$lat)))
BQ.dists.inv <- 1/BQ.dists
diag(BQ.dists.inv) <- 0
# BQCV PREV:
Moran.I(BQCVprevResid$residuals, BQ.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# DWV PREV:
Moran.I(DWVprevResid$residuals, DWV.dists.inv) # NO SPACIAL-AUTO COR
# BQCV LOAD:
Moran.I(BQCVloadResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV LOAD:
Moran.I(DWVloadResid$residual, DWV.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# BQCV HB LOAD
Moran.I(HBbqcvResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV HB LOAD:
Moran.I(HBdwvResid$residual, DWV.dists.inv) # NO SPACIAL-AUTO COR
AICfinderPrev <- function(X=Xvar, Y="virusBINY", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- glmer(data=data, formula = y~x + (1|site/species),
family = binomial(link = "logit"))
x <- summary(Fullmod)
return(list(x$AICtab[1], paste("P=", x$coefficients[2,4])))
}
# create vector of explainitory variables to test:
Xvar <- c("sumApiaries800", "sumColonies800","sumApiaries1", "sumColonies1","sumApiaries2", "sumColonies2","sumApiaries3", "sumColonies3","sumApiaries4", "sumColonies4","sumApiaries5", "sumColonies5")
# apply funciton to run though every iteration of DWV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=DWV)
# apply funciton to run though every iteration of BQCV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=BQCV)
AICfinderLoad <- function(X=Xvar, Y="logVirus", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- lmer(data=data, formula = y~x + (1|site/species))
z<-Anova(Fullmod)
return(list(AIC(Fullmod), paste("P=", z$`Pr(>Chisq)`)))
}
# apply function to run though every iteration of DWV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=DWV)
# apply function to run though every iteration of BQCV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=BQCV)
# remove unwanted target:
BombSurvNoAIPV<-BombSurv[!BombSurv$target_name==("IAPV"),]
# remove 0s
BombSurvNoAIPVno0<-BombSurvNoAIPV[!BombSurvNoAIPV$logVirus==0,]
#Create plot in ggplot
plot <- ggplot(data = BombSurvNoAIPVno0,
aes(x = ColoniesPooled,
y = logVirus,
fill = target_name)
) + geom_boxplot(color="black") + coord_cartesian(ylim = c(5, 20)) + labs(x = "# apis colonies within 1km radius", y = "log(genome copies/bee)", fill="Virus:")
# add a theme
plot + theme_bw(base_size = 17) + scale_fill_manual(values=c("white", "gray40"))
VirusSum <- ddply(BombSurvNoAIPV, c("target_name", "ColoniesPooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
#Create plot in ggplot
plot1 <- ggplot(data = VirusSum,
aes(x = ColoniesPooled,
y = mean,
shape = target_name)
) + geom_point(size=4) + coord_cartesian(ylim = c(0, 1)) + labs(x = "# apis colonies within 1km radius", y = "% prevalence", shape="Virus:") + scale_y_continuous(labels = scales::percent) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2))
# add a theme
plot1 + theme_bw(base_size = 17) + scale_shape_manual(values=c(19, 1)) + annotate(geom = "text", x = 1, y = .11, label = "n=205",cex = 4) + annotate(geom = "text", x = 2, y = .18, label = "n=71",cex = 4) + annotate(geom = "text", x = 3, y = .3, label = "n=92",cex = 4) + annotate(geom = "text", x = 1, y = .72, label = "n=188",cex = 4) + annotate(geom = "text", x = 2, y = 1, label = "n=62",cex = 4) + annotate(geom = "text", x = 3, y = .98, label = "n=88",cex = 4)
VirusSum1 <- ddply(BombSurvNoAIPV, c("target_name", "apiary_near_far"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
VirusSum1$apiary_near_far <- as.character(VirusSum1$apiary_near_far)
colors <- c("white", "grey25")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + annotate(geom = "text", x = 1, y = .98, label = "*",cex = 12) + annotate(geom = "text", x = 2, y = .25, label = "*",cex = 12) + annotate(geom = "text", x = 0.75, y = .75, label = "N = 219",cex = 7) + annotate(geom = "text", x = 1.75, y = .13, label = "N = 219",cex = 7) + annotate(geom = "text", x = 1.2, y = .97, label = "N = 116",cex = 7) + annotate(geom = "text", x = 2.22, y = .23, label = "N = 116",cex = 7)
VirusSum1
VirusSum
Summary(BombSurvNoAIPV)
BombSurvNoAIPV
table(BombSurvNoAIPV$virusBINY)
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + annotate(geom = "text", x = 1, y = .98, label = "*",cex = 12) + annotate(geom = "text", x = 2, y = .25, label = "*",cex = 12) + annotate(geom = "text", x = 0.75, y = .75, label = "N = 219",cex = 7) + annotate(geom = "text", x = 1.75, y = .13, label = "N = 219",cex = 7) + annotate(geom = "text", x = 1.2, y = .97, label = "N = 116",cex = 7) + annotate(geom = "text", x = 2.22, y = .23, label = "N = 116",cex = 7)
#Create plot in ggplot
plot1 <- ggplot(data = VirusSum,
aes(x = ColoniesPooled,
y = mean,
shape = target_name)
) + geom_point(size=4) + coord_cartesian(ylim = c(0, 1)) + labs(x = "# apis colonies within 1km radius", y = "% prevalence", shape="Virus:") + scale_y_continuous(labels = scales::percent) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2))
# add a theme
plot1 + theme_bw(base_size = 17) + scale_shape_manual(values=c(19, 1)) + annotate(geom = "text", x = 1, y = .11, label = "n=205",cex = 4) + annotate(geom = "text", x = 2, y = .18, label = "n=71",cex = 4) + annotate(geom = "text", x = 3, y = .3, label = "n=92",cex = 4) + annotate(geom = "text", x = 1, y = .72, label = "n=188",cex = 4) + annotate(geom = "text", x = 2, y = 1, label = "n=62",cex = 4) + annotate(geom = "text", x = 3, y = .98, label = "n=88",cex = 4)
VirusSum1 <- ddply(BombSurvNoAIPV, c("target_name", "apiary_near_far"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
VirusSum1$apiary_near_far <- as.character(VirusSum1$apiary_near_far)
colors <- c("white", "grey25")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + annotate(geom = "text", x = 1, y = .98, label = "*",cex = 12) + annotate(geom = "text", x = 2, y = .25, label = "*",cex = 12) + annotate(geom = "text", x = 0.75, y = .75, label = "N = 219",cex = 7) + annotate(geom = "text", x = 1.75, y = .13, label = "N = 219",cex = 7) + annotate(geom = "text", x = 1.2, y = .97, label = "N = 116",cex = 7) + annotate(geom = "text", x = 2.22, y = .23, label = "N = 116",cex = 7)
###################################################################################################
######################## CREATING PUBLICATION GRAPHICS FOR PLANT PREV #############################
###################################################################################################
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
#ddply summarize:
fieldPlantsSum <- ddply(Plants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sqrt(((mean(BINYprefilter))*(1-mean(BINYprefilter)))/n))
# remove 0 (make NA) for values so they dont plot error bars
fieldPlantsSum$sd[fieldPlantsSum$sd==0] <- NA
fieldPlantsSum$mean[fieldPlantsSum$mean==0] <- NA
#choosing color pallet
colors <- c("white", "grey30")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + scale_y_continuous(labels = function(x) paste0(x*100, "%"), limits= c(0,.5)) + annotate(geom = "text", x = 1, y = .39, label = "N = 17",cex = 8) + annotate(geom = "text", x = 2, y = .25, label = "N = 18",cex = 8)
head(BombSurvNoAIPV)
BombSurvDWV<- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='DWV'), ]
table(BombSurvDWV$virusBINY)
BombSurvBQCV <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BWCV'), ]
table(BombSurvDWV$virusBINY)
BombSurvBQCV <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BWCV'), ]
table(BombSurvBQCV$virusBINY)
BombSurvBQCV <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BQCV'), ]
table(BombSurvBQCV$virusBINY)
BombSurvBQCV2 <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BQCV') & BombSurvNoAIPV$apiary == N, ]
BombSurvBQCV2 <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BQCV') & BombSurvNoAIPV$apiary == "N", ]
table(BombSurvBQCV2$virusBINY)
BombSurvBQCV2 <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BQCV' & BombSurvNoAIPV$apiary == "N", ]
BombSurvBQCV <- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='BQCV'), ]
table(BombSurvBQCV$virusBINY)
BombSurvBQCV2 <- BombSurvBQCV[ which(BombSurvBQCV$apiary == 'N'), ]
table(BombSurvBQCV2$virusBINY)
BombSurvDWV<- BombSurvNoAIPV[ which(BombSurvNoAIPV$target_name=='DWV'), ]
table(BombSurvDWV$virusBINY)
table(BombSurvDWV$virusBINY, BombSurvDWV$species)
