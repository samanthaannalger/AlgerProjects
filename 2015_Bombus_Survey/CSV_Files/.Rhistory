get.ver
PosList
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
x
# which are postive for DWV
posDWV <- PosList[PosList$target_name=="DWV",]
posDWV
posBQCV <- PosList[PosList$target_name=="BQCV",]
posBQCV
complete <- posDWV[(psoDWV$ID %in% posBQCV$ID),]
complete <- posDWV[(posDWV$ID %in% posBQCV$ID),]
complete
complete <- posDWV[!(posDWV$ID %in% posBQCV$ID),]
complete
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun
# samples that need to be run BQCV:
needtoRun <- posDWV[!(BQCVrun$ID %in% posBQCV$ID),]
needtoRun
# samples that need to be run BQCV:
needtoRun <- BQCVrun[!(BQCVrun$ID %in% posBQCV$ID),]
needtoRun
length(posBQCV$ID)
length(BQCVrun$ID)
posBQCV
# samples that need to be run BQCV:
needtoRun <- posBQCV[!(posBQCV$ID %in% BQCVrun$ID),]
needtoRun
length(needtoRun$ID)
length(posBQCV$ID)-length(BQCVrun$ID)
(BQCVrun$ID %in% needtoRun$ID)
write.csv(needtoRun, "BQCVneedtoRun.csv")
write.csv(posDWV, "DWVneedtoRun.csv")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun
cq
Cq
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
# merge data:
Dat <- merge(Melt, Cq)
data
dat
Dat
str(Dat)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
library("dplyr")
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv
str(BombSurv)
# subset BombSurv:
select(BombSurv, site, sample_name, species, apiary_near_far, Density)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x=TRUE)
Bomb
Dat
# Merge Dat and Bomb
merge(Dat, Bomb)
names(Bomb)
names(Bomb)[3]
names(Bomb)[3] <- "ID"
Bomb
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
merge(Dat, Bomb)
names(Bomb)[3] <- "Sample"
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
merge(Dat, Bomb)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x=TRUE)
# Merge Dat and Bomb
merge(Dat, Bomb, all.y=TRUE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
Dat
Bomb
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x=TRUE)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
View(Dat)
Dat[which(dat$Cq > 32.525)] <- NA
Dat[which(Dat$Cq > 32.525)] <- NA
Dat[which(Dat$Cq > 33)] <- NA
Dat[which(Dat$Cq > 33)] <- 0
Dat[which(Dat$Cq > 33),] <- 0
Dat
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!(Dat$Cq > 33),]
DatClean
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("dplyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
Dat
DatClean <- Dat[!(Dat$Cq == NA),]
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("dplyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!is.na(Dat$Cq),]
DatClean
DatClean <- Dat[!is.na(Dat$Melt),]
DatClean
DatClean <- DatClean[!(DatClean$Melt>33),]
DatClean
DatClean <- Dat[!is.na(Dat$Melt),]
DatClean
DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean
plot(DatClean$Density, DatClean$Cq)
plot(DatClean$norm_genome_copbeeHB, DatClean$Cq)
plot(DatClean$Cq_mean, DatClean$Cq)
plot(DatClean$Ct_mean, DatClean$Cq)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, norm_genome_copbee)
# change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# which are postive for DWV
posDWV <- PosList[PosList$target_name=="DWV",]
posBQCV <- PosList[PosList$target_name=="BQCV",]
(BQCVrun$ID %in% needtoRun$ID)
# samples that need to be run BQCV:
needtoRun <- posBQCV[!(posBQCV$ID %in% BQCVrun$ID),]
(BQCVrun$ID %in% needtoRun$ID)
needtoRun
BQCVrun
length(BQCVrun$ID)
length(posBQCV$ID)
needtoRun
write.csv(needtoRun, "DWVneedtoRun.csv")
library("ggplot2")
library("plyr")
DatClean
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!is.na(Dat$Melt),]
DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
str(DatClean)
#ddply summarize:
fieldPlantsSum <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus") + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
plot1 + theme_bw(base_size = 23) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid"))
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23)
ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat
ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
View(DatClean)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
plotdat
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!is.na(Dat$Melt),]
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean
DatClean <- Dat
is.na(DatClean$Melt) <- 0
DatClean$Melt
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean$Binary
DatClean$Binary[is.na(DatClean$Binary),] <- 0
DatClean[is.na(DatClean$Binary),] <- 0
DatClean$Binary
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Binary),
mean = mean(Binary, na.rm=TRUE),
sd = sd(Binary, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plotdat
DatClean$Binary
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean[is.na(DatClean$Binary),] <- 0
DatClean
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean$Binary
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
Dat
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean
DatClean <- Dat
DatClean
#DatClean <- DatClean[!(DatClean$Cq>33),]
#DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Melt > 0, 1, 0)
DatClean$Binary
DatClean[is.na(DatClean$Binary),] <- 0
DatClean
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
#DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Melt > 0, 1, 0)
DatClean$Binary[is.na(DatClean$Binary)] <- 0
DatClean$Binary
DatClean
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Binary),
mean = mean(Binary, na.rm=TRUE),
sd = sd(Binary, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Binary),
mean = mean(Binary, na.rm=TRUE),
sd = sqrt(((mean(Binary))*(1-mean(Binary)))/n))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plotdat
plotdat[-1,]
plotdat
plotdat <- plotdat[-1,]
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="Prevalence", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
DatCleanNeg <- DatClean[DatClean$Target=="BQCV-F",]
DatCleanNeg
DatCleanNeg <- DatClean[DatClean$Target=="BQCV-F",]
chisq.test(DatCleanNeg$Binary, DatCleanNeg$apiary_near_far)
DatCleanNeg
fisher.test(DatCleanNeg$Binary, DatCleanNeg$apiary_near_far)
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plotdat1 <- plotdat1[-1]
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
plotdat1 <- plotdat1[-1]
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plotdat1
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
plotdat1 <- plotdat1[-1,]
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plot(DatClean$Ct_mean, DatClean$Binary)
model <- glm(Binary ~Ct_mean,family=binomial(link='logit'),data=DatClean)
summary(model)
model <- glm(Binary ~Ct_mean,family=binomial(link='logit'),data=DatCleanNeg)
summary(model)
