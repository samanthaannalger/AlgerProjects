#removing all WC and RC
plantTreat <- plantTreat[ which(plantTreat$spp=="BFT"), ]
fisher.test(plantTreat$BINYprefilter, plantTreat$target_name)
plantTreat$spp <- as.factor(plantTreat$spp)
plantTreat$target_name <- as.factor(plantTreat$target_name)
library(lme4)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name*spp + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
#Subsetting the diversity experiment:
plantDiv <- plantTrans[ which(plantTreat$exp=="diversity"), ]
plantAcute <- plantTrans[ which(plantTrans$exp=="acute"), ]
plantComingle <- plantTrans[ which(plantTrans$exp=="comingle"), ]
plantChronic <- plantTrans[ which(plantTrans$exp=="chronic"), ]
#Checking out by plant species
plantTransDiv <- ddply(plantDiv, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$spp[plantTransDiv$spp == "RC"] <- "Red Clover"
plantTransDiv$spp[plantTransDiv$spp == "BFT"] <- "BirdsFoot Trefoil"
plantTransDiv$spp[plantTransDiv$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses for diversity
plot1 <- ggplot(plantTransDiv, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
plantTransDiv <- ddply(plantAcute, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$mean
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# Create table for forage time data
VidDat <- ddply(VideoDataMerge, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
# select columns from virus load DF and Merge with plantTrans DF:
virusLoad <- dplyr::select(virusLoad, labID, target_name, genomeCopy)
plantTrans <-merge(plantTrans, virusLoad, by=c("labID","target_name"), all.x=TRUE)
# Make all genome copyies 0 if Binyprefilter is 0, This is because the virus load data clean up did not take into account the duplicate/triplicate discrepancies...
plantTrans$genomeCopy <- ifelse(plantTrans$BINYprefilter == 0,0, plantTrans$genomeCopy)
plantTrans$experiment <- ifelse(plantTrans$exp == "chronic-1"|plantTrans$exp =="chronic-2"| plantTrans$exp == "chronic-3", "chronic", plantTrans$exp)
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .9)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c(expression(italic("L. corniculatus"),italic("T. pretense"), italic("T. repens")))) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# Plant Transmission Experiment
# Samantha Alger
# April 24, 2018
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Create table for forage time data
VidDat <- ddply(VideoDataMerge, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
# select columns from virus load DF and Merge with plantTrans DF:
virusLoad <- dplyr::select(virusLoad, labID, target_name, genomeCopy)
plantTrans <-merge(plantTrans, virusLoad, by=c("labID","target_name"), all.x=TRUE)
# Make all genome copyies 0 if Binyprefilter is 0, This is because the virus load data clean up did not take into account the duplicate/triplicate discrepancies...
plantTrans$genomeCopy <- ifelse(plantTrans$BINYprefilter == 0,0, plantTrans$genomeCopy)
# Add new column for 'experiment' type so that all 'comingle (1-3)' experiments are coded as 'comingle'
plantTrans$experiment <- ifelse(plantTrans$exp == "chronic-1"|plantTrans$exp =="chronic-2"| plantTrans$exp == "chronic-3", "chronic", plantTrans$exp)
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
#name....labels...= for legend (if there is a fill)
#theme(legend.position)= puts legend on plot
#coord_cartesian= set axis limits in this case, 0-1 because prevalence
#scale y continuous..= labels as percent
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .9)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#Creating figure for presentation Eagle Hill
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% flowers with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .9)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# FOR ALEX
setwd("~/Documents/GitHub/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# FOR SAM:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# plant virus prevalence data:
Plants <- read.table("plants2015DF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
colnames(BombSurv)
head(BomvSurv$HBSiteBin)
head(BombSurv$HBSiteBin)
BombSurv$HBSiteBin
Table(BombSurv$HBSiteBin,BombSurv$norm_genome_copbeeHB)
table(BombSurv$HBSiteBin,BombSurv$norm_genome_copbeeHB)
log(75762)
log(174047825)
log(1740478)
log(17404789)
log(10000000)
log(1000000)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantVL <- read.csv ("CleanPlantVirus.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
table(PlantVL$genomeCopy, PlantVL$Exp)
PlantVL$virusBINY
# only include virus positive plant samples
PlantVL <- PlantVL[ which(PlantVL$virusBINY==1), ]
# split by experiment
PlantVLsplit <- split(PlantVL, PlantVL$Exp)
PlantVLsplit$PlantTrans
summary(PlantVLsplit$PlantTrans$genomeCopy)
summary(PlantVLsplit$Survey$genomeCopy)
stdev(PlantVLsplit$Survey$genomeCopy)
sd(PlantVLsplit$Survey$genomeCopy)
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#   6959   20790   47830  107200  125100  554300
# Range = 10^3 - 10^5
# Mean = 10^5
sd(PlantVLsplit$PlantTrans$genomeCopy)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantVL <- read.csv ("CleanPlantVirus.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
HB <- read.csv ("HBPrePlantTrans.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
VirusNorm <- function(number_bees = 50, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
GITCperbee <- 200
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=MigVirus){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$run, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("sample_name", "run", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("sample_name", "run"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
# Determine starting VL for honey bees
VirusNorm(data=HB, 50)
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
# Determine starting VL for honey bees
VirusNorm(data=HB, 50)
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
VirusNorm(data=HB, 50)
HBNorm<- VirusNorm(data=HB, 50)
actinNormal(HBNorm)
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
HBNorm<- VirusNorm(data=HB, 50)
actinNormal(HBNorm)
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
HBNorm<- VirusNorm(data=HB, 50)
actinNormal(data=HBNorm)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
HBNorm<- VirusNorm(data=HB, 50)
VirusNorm <- function(number_bees = 50, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
GITCperbee <- 200
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
HBNorm<- VirusNorm(data=HB, 50)
actinNormal <- function(data=MigVirus){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$run, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("sample_name", "run", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("sample_name", "run"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
actinNormal(data=HBNorm)
HB <- read.csv ("CorgiTest.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
HBNorm<- VirusNorm(data=HB, 50)
actinNormal(data=HBNorm)
HBVL<-actinNormal(data=HBNorm)
table(HBVL$NormGenomeCopy)
table(HBVL$target_name$NormGenomeCopy
table(HBVL$target_name, HBVL$NormGenomeCopy)
table(HBVL$target_name, HBVL$NormGenomeCopy)
HBVL
View(HBVL)
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files/")
###########################################################
# Read in Data
SurvMap <- read.csv("spatialMerge.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
SurvMapDWV<- SurvMap(split(SurvMap, SurvMap$target_name))
###########################################################
# Read in Data
SurvMap <- read.csv("spatialMerge.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
SurvMapDWV<- SurvMap(split(SurvMap, SurvMap$target_name))
SurvMapDWV<- split(SurvMap, SurvMap$target_name))
SurvMapDWV<- split(SurvMap, SurvMap$target_name)
SurvMap<- split(SurvMap, SurvMap$target_name)
# source my packages
library(ggplot2)
library(gstat)
library(sp)
library(maptools)
###########################################################
# Read in Data
SurvMap <- read.csv("spatialMerge.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MapSplit<- split(SurvMap, SurvMap$target_name)
SurvMap$x <- SurvMap$long
SurvMap$y <- SurvMap$lat
MapSplit<- split(SurvMap, SurvMap$target_name)
coordinates(MapSplit$BQCV) = ~x+ y
plot(MapSplit$BQCV)
plot(MapSplit$BQCV)
summary(MapSplit$BQCV$lat)
summary(MapSplit$BQCV$long)
x.range <- as.numeric(c(-73.34, -71.83))
y.range <- as.numeric(c(44.16, 44.95))
plot(MapSplit$BQCV)
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
points(MapSplit$BQCV, pch = 1, col = "red", cex =1)
x.range <- as.numeric(c(-73.00, -72))
y.range <- as.numeric(c(44., 45))
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
points(MapSplit$BQCV, pch = 1, col = "red", cex =1)
x.range <- as.numeric(c(-74, -72))
y.range <- as.numeric(c(44, 45))
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
points(MapSplit$BQCV, pch = 1, col = "red", cex =1)
x.range <- as.numeric(c(-74.5, -71))
y.range <- as.numeric(c(44, 45))
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
points(MapSplit$BQCV, pch = 1, col = "red", cex =1)
x.range <- as.numeric(c(-74.7, -70.5))
y.range <- as.numeric(c(44, 45))
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
points(MapSplit$BQCV, pch = 1, col = "red", cex =1)
idw <- idw(formula = may12 ~ 1, locations = MapSplit$BQCV,
newdata = grd)
idw <- idw(formula = MapSplit$BQCV$BombusViralLoad, locations = MapSplit$BQCV,
newdata = grd)
idw <- idw(formula = MapSplit$BQCV$BombusViralLoad~1, locations = MapSplit$BQCV,
newdata = grd)
idw
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
geom_point(data = MapSplit$BQCV, aes(x = lon, y = lat), shape = 21,
colour = "red")
idw <- idw(formula = MapSplit$BQCV$BombusViralLoad~1, locations = MapSplit$BQCV,
newdata = grd)
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
geom_point(data = MapSplit$BQCV, aes(x = lon, y = lat), shape = 21,
colour = "red")
idw.output
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +   geom_point(data = MapSplit$BQCV, aes(x = lon, y = lat), shape = 21,  colour = "red")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +   geom_point(data = MapSplit, aes(x = lon, y = lat), shape = 21,  colour = "red")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +   geom_point(data = SurvMap, aes(x = lon, y = lat), shape = 21,  colour = "red")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red")
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.05), y = seq(from = y.range[1],
to = y.range[2], by = 0.05))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd,cex=1.5, col="grey")
points(MapSplit$BQCV, pch = 1, col = "red", cex =1)
summary(MapSplit$BQCV$lat)
summary(MapSplit$BQCV$long)
idw <- idw(formula = MapSplit$BQCV$BombusViralLoad~1, locations = MapSplit$BQCV,
newdata = grd)
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red")
VT_contour <- readShapePoly("~/AlgerProjects/2015_Bombus_Survey/CSV_Files/VT.shp")
library(rgdal)
VT_contour <- rgdal::readOGR("~/AlgerProjects/2015_Bombus_Survey/CSV_Files/VT.shp")
VT_contour <- rgdal::readOGR(dsn="~/AlgerProjects/2015_Bombus_Survey/CSV_Files/VTshape/")
VT_contour <- rgdal::readOGR(dsn="~/AlgerProjects/2015_Bombus_Survey/CSV_Files/VT.shp")
idw <- idw(formula = MapSplit$BQCV$BombusViralLoad~1, locations = MapSplit$BQCV, newdata = grd, method = "Shepard", p = 2, R = 2, N = 15)
?idw
idw <- krige(formula = MapSplit$BQCV$BombusViralLoad~1, locations = MapSplit$BQCV, newdata = grd)
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red")
idw <- krige(formula = MapSplit$DWV$BombusViralLoad~1, locations = MapSplit$BQCV, newdata = grd)
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + + scale_fill_gradient(low = "cyan", high = "orange")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + scale_fill_gradient(low = "cyan", high = "orange")
idw <- krige(formula = MapSplit$DWV$BombusViralLoad~1, locations = MapSplit$BQCV, newdata = grd)
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + scale_fill_gradient(low = "cyan", high = "orange")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + scale_fill_gradient(low = "cyan", high = "orange")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred)) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + scale_fill_gradient(low = "cyan", high = "orange")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + scale_fill_gradient(low = "cyan", high = "orange")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = log(var1.pred))) +   geom_point(data = SurvMap, aes(x = long, y = lat), shape = 21,  colour = "red") + scale_fill_gradient(low = "cyan", high = "orange")
