<<<<<<< HEAD
=======
fullMod <- lmer(data=DF, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location), REML = FALSE)
anova(nullMod, fullMod)
splitDF <- split(DF, DF$Gene)
splitDF$Gene1
nullMod <- lmer(data=splitDF$Gene1, formula = FoldChange ~ 1 + (1|ID) + (1|Location), REML = FALSE)
nullMod <- lmer(data=splitDF$Gene1, formula = FoldChange ~ 1 + (1|ID) + (1|Location), REML = FALSE)
fullMod <- lmer(data=splitDF$Gene1, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location), REML = FALSE)
splitDF
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
library(ggplot2)
library(plyr)
ID <- c(1:200)
Origin <- c(rep("local", 100),
rep("California", 100))
FlowerType <- rep(c(rep("clover",25),
rep("goldenrod",25),
rep("treefoil",25),
rep("mixed",25)),2)
Mass <- c(rnorm(n = 100,
mean=32,
sd = 8), rnorm(n = 100,
mean=21,
sd=4))
NosemaLoad <-c(rnorm(n = 100,
mean=100000,
sd = 80000), rnorm(n = 100,
mean=500000,
sd=40000))
VarroaLoad <- c(rnorm(n = 100,
mean=5,
sd = 2), rnorm(n = 100,
mean=9,
sd=3))
Time <- rep(c(rep("Time1", 50), rep("Time2", 50)),2)
DF <- data.frame(ID, Origin, FlowerType, Mass, NosemaLoad, VarroaLoad, Time)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
plot6 + geom_histogram(alpha=0.2) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin, alpha=0.2))
plot6 + geom_histogram() + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass))
plot6 + geom_histogram(fill=Origin, alpha=0.2) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass))
plot6 + geom_histogram(data=subset(DF, Origin == "Local"), fill = "slategray3", alpha = 0.4) + geom_histogram(data=subset(DF, Origin == "California"), fill = "dodgerblue4", alpha = 0.4) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass)) + geom_histogram(data=subset(DF, Origin == "Local"), fill = "slategray3", alpha = 0.4) + geom_histogram(data=subset(DF, Origin == "California"), fill = "dodgerblue4", alpha = 0.4)
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
subset(DF, Origin == "California")
plot6 <- ggplot(DF, aes(Mass, fill=Origin, alpha=0.2))
plot6 + geom_histogram() + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
plot6 + geom_histogram(alpha=0.2, position="identity") + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
+ geom_histogram(alpha=0.2, position="identity")
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.8, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity") +
stat_bin(bins = 30)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity") +
stat_bin(bins = 30)
plot6
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2)
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, aes(y = ..density..), position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
Concentration <- c(rep("20%", 10), rep("10%", 10))
Concentration
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
Refractometer
data <- data.frame(Refractometer, Concentration, RefReading)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
data
str(data)
mod <- aov(data, RefReading~Concentration + Refractometer)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$20%$Concentration~splitDat$20%$Refractometer)
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10", 10), rep("20", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$20$Concentration~splitDat$20$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
Concentration <- c(rep("Ten", 10), rep("Twenty", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$Twenty$Concentration~splitDat$Twenty$Refractometer)
summary(mod)
summary(mod)
mod <- aov(splitDat$Twenty$RefReading~splitDat$Twenty$Refractometer)
summary(mod)
mod10 <- aov(splitDat$Ten$RefReading~splitDat$Ten$Refractometer)
summary(mod10)
splitDatConc <- split(data, data$Refractometer)
splitDatConc$New - splitDatConc$Old
splitDatConc$New$RefReading - splitDatConc$Old$RefReading
splitDatConc$New$RefReading
reading <- splitDatConc$New$RefReading - splitDatConc$Old$RefReading
conc <- c(rep("Ten",5), rep("Twenty",5))
df <- data.frame(conc, reading)
df
m <- aov(data=df, reading~conc)
summary(m)
mean(reading)
# required packages:
library(plyr)
library(dplyr)
install.packages(plyr)
install.packages("plyr")
# required packages:
library(plyr)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("lme4")
install.packages("car")
install.packages("MASS")
install.packages("vegan")
install.packages("factoextra")
install.packages("knitr")
install.packages("knitr")
library(knitr)
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(vegan)
library(factoextra)
x <- c(2,5,2,6,4,3,2)
y <- c("A","B", NA, NA,"A","B")
dat <- data.frame(x,y)
x <- c(2,2,6,4,3,2)
y <- c("A","B", NA, NA,"A","B")
dat <- data.frame(x,y)
dat
dat <- dat[is.na(dat$y),]
dat
dat <- data.frame(x,y)
dat <- dat[-is.na(dat$y),]
dat
dat <- data.frame(x,y)
dat <- dat[! is.na(dat$y),]
dat
install.packages("wesanderson")
wesanderson::wes_palette()
wes_palette
library(wesanderson)
wes_palettes
wes_palettes$Moonrise2
# Preliminaries:
ls()
rm(list=ls())
library(deSolve)
par(mfrow=c(1,1))
# initial state of system
state<-c(S=1, I1=0.05, I2=0.00, P=0.0)
# set parameters
parameters <- c(
beta=0.202,
alpha1=0.07,
alpha2=0.010,
gamma=0.05,
muA=0.011,
muB=0.025,
theta=0.01
)
#====================================================================================================
# create a function for this disease system using desolve
NosemaModel4 <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
dSdt <- -(S * P * beta) - (S * muA)
dI1dt <- (S * P * beta) - (I1 * muA) - (I1 * gamma)
dI2dt <- (I1 * P * gamma) - (I2 * muB)
dPdt <- (I1 * alpha1) + (I2 * alpha2) - (P * theta)
return(list(c(dSdt,dI1dt,dI2dt,dPdt)))
})
}
# set up time steps
times <- seq(0,150,by=1)
# use ode() to to create an output
out <- ode(y=state,times=times, func=NosemaModel4, parms=parameters)
out<-as.data.frame(out)
out
# remove unwanted columns for this model
#out$time <- NULL
#out$S <- NULL
out$P <- NULL
out
matplot(x=times,y=out,
type="l",
xlab="Time (days)",
ylab="Rate of Nosema Infection",
main="Infection Rate through Time",
lwd=3,
ylim=c(0,1),
lty=1,
font.lab=2,
bty="l",
col=c("blue","red", "green"))
grid(col="gray")
legend(x=100,y=0.6,
legend=c("Infected",
"Critically Infected",
"Susceptable"),
pch=19,
col=c("blue","red", "green"),
bty="n",
bg="white")
out
plot(out$time, out$S)
plot(out$time, out$I1)
plot(out$time, out$I2)
#------------------------------------------------------------------------
# Preliminaries:
ls()
rm(list=ls())
library(deSolve)
par(mfrow=c(1,1))
# initial state of system
state<-c(S=1, I1=0.05, I2=0.00, P=0.0)
# set parameters
parameters <- c(
beta=0.202,
alpha1=0.07,
alpha2=0.010,
gamma=0.05,
muA=0.011,
muB=0.025,
theta=0.01
)
#====================================================================================================
# create a function for this disease system using desolve
NosemaModel4 <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
dSdt <- -(S * P * beta) - (S * muA)
dI1dt <- (S * P * beta) - (I1 * muA) - (I1 * gamma)
dI2dt <- (I1 * P * gamma) - (I2 * muB)
dPdt <- (I1 * alpha1) + (I2 * alpha2) - (P * theta)
return(list(c(dSdt,dI1dt,dI2dt,dPdt)))
})
}
#====================================================================================================
# set up time steps
times <- seq(0,150,by=1)
# use ode() to to create an output
out <- ode(y=state,times=times, func=NosemaModel4, parms=parameters)
out<-as.data.frame(out)
# remove unwanted columns for this model
#out$time <- NULL
#out$S <- NULL
out$P <- NULL
# set survival equal to  1 - pooled infected (I1+I2)
#Surv <- 1 - (out[,1]+out[,2])
#out <- cbind(out,Surv)
#head(out,10)
#------------------------------------------------------------------------------------------
matplot(x=times,y=out,
type="l",
xlab="Time (days)",
ylab="Rate of Nosema Infection",
main="Infection Rate through Time",
lwd=3,
ylim=c(0,1),
lty=1,
font.lab=2,
bty="l",
col=c("blue","red", "green"))
grid(col="gray")
legend(x=100,y=0.6,
legend=c("Infected",
"Critically Infected",
"Susceptable"),
pch=19,
col=c("blue","red", "green"),
bty="n",
bg="white")
#####################################################################################################
# END MODEL MKIV
plot(out$time, out$S)
######################################################################################################
# Nosema Model MKV (5 May 2016) includes growth rates but no equation for colony as a reser
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, norm_genome_copbee)
# change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# which are postive for DWV
posDWV <- PosList[PosList$target_name=="DWV",]
posBQCV <- PosList[PosList$target_name=="BQCV",]
# samples that need to be run BQCV:
needtoRun <- posBQCV[!(posBQCV$ID %in% BQCVrun$ID),]
(BQCVrun$ID %in% needtoRun$ID)
write.csv(needtoRun, "DWVneedtoRun.csv")
##########################################################################################
# plant virus prevalence data:
Plants <- read.table("plants2015DF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# load site level data and merge pathogen data with GIS HB colony/apiary output:
SpatDat <- read.table("SpatDatBuffs.csv", header=TRUE,sep=",",stringsAsFactors=FALSE)
SpatDat <- select(SpatDat, -elevation, -town, -apiary, -siteNotes, -apiaryNotes)
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialDat <- merge(SurvData, SpatDat, by = "site")
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# merge data to create final APC data frame:
SpatDat <- select(SpatDat, -lat, -long)
BombSurv <- merge(BombSurv, SpatDat, by = "site")
# remove unneeded columns from the DF
BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee, -City, -Name, -virusBINY_PreFilter, -siteNotes, -X)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
# create variable that bins apiaries by how many colonies are there
BombSurv$ColoniesPooled <- ifelse(BombSurv$sumColonies1 <= 0, "0", ifelse(BombSurv$sumColonies1 <= 20, "1-19","20+"))
<<<<<<< HEAD
###############################################################################################
################################### PROGRAM BODY ##############################################
###############################################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# formatting bombsurv to test Spatial Autocorralation on
BeeAbund <- read.table("BeeAbund.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
# create log virus data:
BombSurv$logVirus <- log(1+BombSurv$norm_genome_copbee)
BombSurv$logHB <- log(1+BombSurv$norm_genome_copbeeHB)
BombSurv <- merge(BombSurv, BeeAbund, by = "site")
BombSurv$HBdensRatio <-  BombSurv$Density/((BombSurv$apis+0.0000000000000001)/10)
# two data frames for DWV and BQCV for Morans I
BQCV <- subset(BombSurv, target_name=="BQCV")
DWV <- subset(BombSurv, target_name=="DWV")
# create Plants dataframe:
Plants <- merge(Plants, BeeAbund, all.x=TRUE, all.y=FALSE)
Plants <- merge(Plants, SpatialDat, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
<<<<<<< HEAD
###############################################################################################
# function to pull out AIC and pval for DWV (prev) and BQCV (prev)
###########################################################################
# function name: AICfinderPrev
# description:finds p val and AIC for glmer model
# parameters:
# data = data frame, yvar and xvar
# returns a list (requires library(lme4))
###########################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
AICfinderPrev <- function(X=Xvar, Y="virusBINY", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- glmer(data=data, formula = y~x + (1|site/species),
family = binomial(link = "logit"))
x <- summary(Fullmod)
return(list(x$AICtab[1], paste("P=", x$coefficients[2,4])))
}
<<<<<<< HEAD
###########################################################################
# END OF FUNCITON
###########################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# create vector of explainitory variables to test:
Xvar <- c("sumApiaries800", "sumColonies800","sumApiaries1", "sumColonies1","sumApiaries2", "sumColonies2","sumApiaries3", "sumColonies3","sumApiaries4", "sumColonies4","sumApiaries5", "sumColonies5")
# apply funciton to run though every iteration of DWV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=DWV)
# apply funciton to run though every iteration of BQCV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=BQCV)
<<<<<<< HEAD
###############################################################################################
# function to pull out AIC and pval for DWV (load) and BQCV (load)
###########################################################################
# function name: AICfinderLoad
# description:finds p val and AIC for glmer model
# parameters:
# data = data frame, yvar and xvar
# returns a list (requires library(lme4))
###########################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
AICfinderLoad <- function(X=Xvar, Y="logVirus", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- lmer(data=data, formula = y~x + (1|site/species))
z<-Anova(Fullmod)
return(list(AIC(Fullmod), paste("P=", z$`Pr(>Chisq)`)))
}
<<<<<<< HEAD
###########################################################################
# END OF FUNCITON
###########################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# apply funciton to run though every iteration of DWV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=DWV)
# apply funciton to run though every iteration of BQCV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=BQCV)
<<<<<<< HEAD
# DECIDED TO USE "sumColony1" as predictor varable based on these data (AIC and P val)
###################################################################################################
# CREATING MODELS TO TEST FOR SPATIAL AUTOCORRELATION
###################################################################################################
# create data frames to test spatial AC
SpatialDatBQCV <- subset(SpatialDat, target_name=="BQCV")
SpatialDatDWV <- subset(SpatialDat, target_name=="DWV")
#----------------------------------------------------------------------------------------------------
# BQCV PREV:
BQCVprev <- lm(data=SpatialDatBQCV, BombPrev ~ sumColonies1)
BQCVprevResid <- summary(BQCVprev)
BQCVprevResid$residual
#----------------------------------------------------------------------------------------------------
# DWV PREV
DWVprev <- lm(data=SpatialDatDWV, BombPrev ~ sumColonies1)
DWVprevResid <- summary(DWVprev)
DWVprevResid$residual
#----------------------------------------------------------------------------------------------------
# DWV LOAD
DWVload <- lm(data=SpatialDatDWV, BombusViralLoad ~ sumColonies1)
DWVloadResid <- summary(DWVload)
DWVloadResid$residual
#----------------------------------------------------------------------------------------------------
# BQCV LOAD
BQCVload <- lm(data=SpatialDatBQCV, BombusViralLoad ~ sumColonies1)
BQCVloadResid <- summary(BQCVload)
BQCVloadResid$residual
#----------------------------------------------------------------------------------------------------
# DWV HB LOAD
DWVhb <- lm(data=SpatialDatDWV, HBviralLoad ~ sumColonies1)
HBbqcvResid <- summary(DWVhb)
HBbqcvResid$residual
#----------------------------------------------------------------------------------------------------
# BQCV HB LOAD
BQCVhb <- lm(data=SpatialDatBQCV, HBviralLoad ~ sumColonies1)
HBdwvResid <- summary(BQCVhb)
HBdwvResid$residual
#----------------------------------------------------------------------------------------------------
# CREATING DISTANCE MATRICES FOR MORANS.I TEST:
=======
# create data frames to test spatial AC
SpatialDatBQCV <- subset(SpatialDat, target_name=="BQCV")
SpatialDatDWV <- subset(SpatialDat, target_name=="DWV")
BQCVprev <- lm(data=SpatialDatBQCV, BombPrev ~ sumColonies1)
BQCVprevResid <- summary(BQCVprev)
BQCVprevResid$residual
DWVprev <- lm(data=SpatialDatDWV, BombPrev ~ sumColonies1)
DWVprevResid <- summary(DWVprev)
DWVprevResid$residual
DWVload <- lm(data=SpatialDatDWV, BombusViralLoad ~ sumColonies1)
DWVloadResid <- summary(DWVload)
DWVloadResid$residual
BQCVload <- lm(data=SpatialDatBQCV, BombusViralLoad ~ sumColonies1)
BQCVloadResid <- summary(BQCVload)
BQCVloadResid$residual
DWVhb <- lm(data=SpatialDatDWV, HBviralLoad ~ sumColonies1)
HBbqcvResid <- summary(DWVhb)
HBbqcvResid$residual
BQCVhb <- lm(data=SpatialDatBQCV, HBviralLoad ~ sumColonies1)
HBdwvResid <- summary(BQCVhb)
HBdwvResid$residual
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
#For DWV:
DWV.dists <- as.matrix(dist(cbind(SpatialDatDWV$long, SpatialDatDWV$lat)))
DWV.dists.inv <- 1/DWV.dists
diag(DWV.dists.inv) <- 0
#For BQCV:
BQ.dists <- as.matrix(dist(cbind(SpatialDatBQCV$long, SpatialDatBQCV$lat)))
BQ.dists.inv <- 1/BQ.dists
diag(BQ.dists.inv) <- 0
<<<<<<< HEAD
###################################################################################################
# TESTING FOR SPATIAL AUTOCORRELATION
###################################################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# BQCV PREV:
Moran.I(BQCVprevResid$residuals, BQ.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# DWV PREV:
Moran.I(DWVprevResid$residuals, DWV.dists.inv) # NO SPACIAL-AUTO COR
# BQCV LOAD:
Moran.I(BQCVloadResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV LOAD:
Moran.I(DWVloadResid$residual, DWV.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# BQCV HB LOAD
Moran.I(HBbqcvResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV HB LOAD:
Moran.I(HBdwvResid$residual, DWV.dists.inv) # NO SPACIAL-AUTO COR
<<<<<<< HEAD
# END MODELS
###################################################################################################
# FULL BOMBUS VIRUS MODELS TAKE 2 (2-20-18): P. Alexander Burnham
###################################################################################################
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# DWV prev model:
DWVprevModFull <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
Anova(DWVprevModFull)
# DWV load model:
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
Anova(DWVloadModFull)
# BQCV prev model:
BQCVprevModFull <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
Anova(BQCVprevModFull)
# BQCV load model:
BQCVloadModFull <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long))
Anova(BQCVloadModFull)
<<<<<<< HEAD
###################################################################################################
# CREATING FINAL PUBLICATION GRAPHICS FOR BOMBUS VIRUSES:
###################################################################################################
# remove unwanted target:
BombSurvNoAIPV<-BombSurv[!BombSurv$target_name==("IAPV"),]
###################################################################################################
# Load:
=======
# remove unwanted target:
BombSurvNoAIPV<-BombSurv[!BombSurv$target_name==("IAPV"),]
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
# remove 0s
BombSurvNoAIPVno0<-BombSurvNoAIPV[!BombSurvNoAIPV$logVirus==0,]
#Create plot in ggplot
plot <- ggplot(data = BombSurvNoAIPVno0,
aes(x = ColoniesPooled,
y = logVirus,
fill = target_name)
) + geom_boxplot(color="black") + coord_cartesian(ylim = c(5, 20)) + labs(x = "# apis colonies within 1km radius", y = "log(genome copies/bee)", fill="Virus:")
# add a theme
plot + theme_bw(base_size = 17) + scale_fill_manual(values=c("white", "gray40"))
<<<<<<< HEAD
###################################################################################################
# Prevalence
=======
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
VirusSum <- ddply(BombSurvNoAIPV, c("target_name", "ColoniesPooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
#Create plot in ggplot
plot1 <- ggplot(data = VirusSum,
aes(x = ColoniesPooled,
y = mean,
shape = target_name)
) + geom_point(size=4) + coord_cartesian(ylim = c(0, 1)) + labs(x = "# apis colonies within 1km radius", y = "% prevalence", shape="Virus:") + scale_y_continuous(labels = scales::percent) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2))
# add a theme
plot1 + theme_bw(base_size = 17) + scale_shape_manual(values=c(19, 1)) + annotate(geom = "text", x = 1, y = .11, label = "n=205",cex = 4) + annotate(geom = "text", x = 2, y = .18, label = "n=71",cex = 4) + annotate(geom = "text", x = 3, y = .3, label = "n=92",cex = 4) + annotate(geom = "text", x = 1, y = .72, label = "n=188",cex = 4) + annotate(geom = "text", x = 2, y = 1, label = "n=62",cex = 4) + annotate(geom = "text", x = 3, y = .98, label = "n=88",cex = 4)
VirusSum1 <- ddply(BombSurvNoAIPV, c("target_name", "apiary_near_far"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
VirusSum1$apiary_near_far <- as.character(VirusSum1$apiary_near_far)
colors <- c("white", "grey25")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85),  panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + annotate(geom = "text", x = 1, y = .98, label = "*",cex = 10) + annotate(geom = "text", x = 2, y = .25, label = "*",cex = 9)
<<<<<<< HEAD
###################################################################################################
# CREATING FULL MODELS FOR PLANT PREV:
###################################################################################################
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + Density + (1|apiary_near_far/site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ bombus + target_name + Density + (1|apiary_near_far/site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + Density + (1|apiary_near_far/site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density + (1|apiary_near_far/site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|apiary_near_far/site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|apiary_near_far/site), family = binomial(link = "logit"))
summary(PlantsFull)
anova(PlantsFull, PlantsNull, test="LRT")
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
# To view effects and std. errors of each variable:
summary(PlantsFull)
###################################################################################################
# CREATING PUBLICATION GRAPHICS FOR PLANT PREV:
###################################################################################################
#ddply summarize:
fieldPlantsSum <- ddply(Plants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sqrt(((mean(BINYprefilter))*(1-mean(BINYprefilter)))/n))
# remove 0 (make NA) for values so they dont plot error bars
fieldPlantsSum$sd[fieldPlantsSum$sd==0] <- NA
fieldPlantsSum$mean[fieldPlantsSum$mean==0] <- NA
#creating the figure
#choosing color pallet
colors <- c("white", "grey30")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
###################################################################################################
# CREATING FULL MODELS FOR HB:
###################################################################################################
# rename NAs "no apis caught"
DWV$HBSiteBin[is.na(DWV$HBSiteBin)] <- "No Apis Caught"
ApisFull <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + apis + (1|site), family = binomial(link = "logit"))
ApisNull <- glmer(data=DWV, formula = virusBINY ~ 1 + (1|site), family = binomial(link = "logit"))
ApisNoHB <- glmer(data=DWV, formula = virusBINY ~ Density + apis + (1|site), family = binomial(link = "logit"))
ApisNoApis <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + (1|site), family = binomial(link = "logit"))
ApisNoDens <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + apis + (1|site), family = binomial(link = "logit"))
summary(ApisFull)
anova(ApisFull, ApisNull, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
###################################################################################################
# CREATING PUBLICATION GRAPHICS FOR HB:
###################################################################################################
# histogram showing apis DWV load (bimodal)
# summary of viral load for by target and site
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
# remove BQCV and IAPV:
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
ggplot(data=CopDist, aes(log(1 + mean))) +
geom_histogram(breaks=seq(5, 25, by = 1),
col="black",
fill="grey30") +
labs(x="Apis DWV log(viral load)", y="Frequency") + theme_bw(base_size=23)
################################################################################################
# bar plot showing DWV level in apis by DWV prev in bombus
HBSiteSum <- ddply(DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
# remove 0 (make NA) for values so they dont plot error bars
HBSiteSum$sd[HBSiteSum$sd==0] <- NA
HBSiteSum$mean[HBSiteSum$mean==0] <- NA
colors <- c("grey30", "white", "white")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", color = "black") + labs(x="Level of DWV in Apis", y = "% Prevalence in Bombus")
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
###################################################################################################
# CREATING FULL MODELS FOR BOMBUS VIRUSES:
###################################################################################################
###########################################################################
# function name: TheExtractor
# description:extracts log liklihood test stats and p vals for null vs full
# and the reduced models
# parameters:
# Full = full model (glmer or lmer)
# Null = null model
# Density = density removed
# Colonies = colonies removed
# Species = species removed
###########################################################################
TheExtractor <- function(Full, Null, Colonies, Density, Species){
sumFull <- summary(Full)
modelFit <- anova(Full, Null, test="LRT")
Cols <- anova(Full, Colonies, test="LRT")
Dens <- anova(Full, Density, test="LRT")
Spec <- anova(Full, Species, test="LRT")
ModFit <- list("Model Fit P"=modelFit$`Pr(>Chisq)`[2], "Model Fit Df"=modelFit$`Chi Df`[2], "Model Fit Chi2"=modelFit$Chisq[2])
ColFit <- list("Colony Fit P"=Cols$`Pr(>Chisq)`[2],"Colony Fit Df"=Cols$`Chi Df`[2],"Colony Fit Chi2"=Cols$Chisq[2])
DensFit <- list("Density Fit P"=Dens$`Pr(>Chisq)`[2],"Density Fit Df"=Dens$`Chi Df`[2],"Density Fit Chi2"=Dens$Chisq[2])
SpecFit <- list("Species Fit P"=Spec$`Pr(>Chisq)`[2],"Species Fit Df"=Spec$`Chi Df`[2],"Species Fit Chi2"=Spec$Chisq[2])
return(list(sumFull$coefficients[1:4,1:2],ModFit, ColFit, DensFit, SpecFit))
}
###########################################################################
# END OF FUNCITON
###########################################################################
DWVprevModFull <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNull <- glmer(data=DWV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoCols <- glmer(data=DWV, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoDens <- glmer(data=DWV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoSpec <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=DWVprevModFull,
Null=DWVprevModNull,
Colonies=DWVprevModnoCols,
Density=DWVprevModnoDens,
Species = DWVprevModnoSpec)
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoSpec <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|species) + (1|lat) + (1|long))
TheExtractor(Full=DWVloadModFull,
Null=DWVloadModNull,
Colonies=DWVloadModnoCols,
Density=DWVloadModnoDens,
Species = DWVloadModnoSpec )
BQCVprevModFull <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNull <- glmer(data=BQCV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoCols <- glmer(data=BQCV, formula = virusBINY~Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoDens <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoSpec <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=BQCVprevModFull,
Null=BQCVprevModNull,
Colonies=BQCVprevModnoCols,
Density=BQCVprevModnoDens,
Species = BQCVprevModnoSpec)
# remove 0s to look at viral load of infected
BQCVno0 <- BQCV[!BQCV$virusBINY==0,]
BQCVloadModFull <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadModNull <- lmer(data=BQCVno0, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
BQCVloadModnoCols <- lmer(data=BQCVno0, formula = logVirus ~ Density + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoDens <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoSpec <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|lat) + (1|long))
TheExtractor(Full=BQCVloadModFull,
Null=BQCVloadModNull,
Colonies=BQCVloadModnoCols,
Density=BQCVloadModnoDens,
Species = BQCVloadModnoSpec)
# DWV load by number of colonies
DWVno0just_HB <- DWVno0[!DWVno0$sumColonies1==0,]
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long))
DWVloadSumColonies <- lmer(data=DWVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|lat) + (1|long))
DWVloadDensity <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
DWVloadSpecies <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + (1|site) + (1|lat) + (1|long))
DWVloadModNullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
anova(DWVloadModFullHB, DWVloadSumColonies, test="LRT")
anova(DWVloadModFullHB, DWVloadDensity, test="LRT")
anova(DWVloadModFullHB, DWVloadSpecies, test="LRT")
summary(DWVloadModFullHB)
# BQCV load by number of colonies
BQCVno0just_HB <- BQCVno0[!BQCVno0$sumColonies1==0,]
BQCVloadModFullHB <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadSumColonies <- lmer(data=BQCVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadDensity <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
BQCVloadSpecies <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + Density + (1|site) + (1|lat) + (1|long))
BQCVloadModNullHB <- lmer(data=BQCVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(BQCVloadModFullHB, BQCVloadModNullHB, test="LRT")
anova(BQCVloadModFullHB, BQCVloadSumColonies, test="LRT")
anova(BQCVloadModFullHB, BQCVloadDensity, test="LRT")
anova(BQCVloadModFullHB, BQCVloadSpecies, test="LRT")
summary(BQCVloadModFullHB)
# DWV prev by number of colonies
DWVjust_HB <- DWV[!DWV$sumColonies1==0,]
DWVprevModFullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevSumColonies <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevDensity <- glmer(data=DWVjust_HB, formula = virusBINY~ species + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevSpecies <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ 1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(DWVprevModFullHB, DWVprevModNullHB, test="LRT")
anova(DWVprevModFullHB, DWVprevSumColonies, test="LRT")
anova(DWVprevModFullHB, DWVprevDensity, test="LRT")
anova(DWVprevModFullHB, DWVprevSpecies, test="LRT")
summary(DWVprevModFullHB)
# BQCV prev by number of colonies
BQCVjust_HB <- BQCV[!BQCV$sumColonies1==0,]
BQCVprevModFullHB <- glmer(data=BQCVjust_HB, formula = virusBINY~sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNullHB <- glmer(data=BQCVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(BQCVprevModFullHB, BQCVprevModNullHB, test="LRT")
anova(BQCVprevModFullHB, BQCVprevModNullHB, test="LRT")
anova(BQCVprevModFullHB, BQCVprevSumColonies, test="LRT")
DWV
# DWV load by number of colonies
DWVno0just_HB <- DWVno0[!DWVno0$sumColonies1==0,]
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long))
DWVloadSumColonies <- lmer(data=DWVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|lat) + (1|long))
DWVloadDensity <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
DWVloadSpecies <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + (1|site) + (1|lat) + (1|long))
DWVloadModNullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
anova(DWVloadModFullHB, DWVloadSumColonies, test="LRT")
anova(DWVloadModFullHB, DWVloadDensity, test="LRT")
anova(DWVloadModFullHB, DWVloadSpecies, test="LRT")
# BQCV load by number of colonies
BQCVno0just_HB <- BQCVno0[!BQCVno0$sumColonies1==0,]
BQCVloadModFullHB <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadSumColonies <- lmer(data=BQCVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadDensity <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
BQCVloadSpecies <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + Density + (1|site) + (1|lat) + (1|long))
BQCVloadModNullHB <- lmer(data=BQCVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(BQCVloadModFullHB, BQCVloadModNullHB, test="LRT")
anova(BQCVloadModFullHB, BQCVloadSumColonies, test="LRT")
anova(BQCVloadModFullHB, BQCVloadDensity, test="LRT")
anova(BQCVloadModFullHB, BQCVloadSpecies, test="LRT")
anova(BQCVloadModFullHB, BQCVloadModNullHB, test="LRT")
anova(BQCVloadModFullHB, BQCVloadSumColonies, test="LRT")
anova(BQCVloadModFullHB, BQCVloadDensity, test="LRT")
anova(BQCVloadModFullHB, BQCVloadSpecies, test="LRT")
summary(BQCVloadModFullHB)
anova(BQCVloadModFullHB, BQCVloadSumColonies, test="LRT")
summary(BQCVloadModFullHB)
# DWV prev by number of colonies
DWVjust_HB <- DWV[!DWV$sumColonies1==0,]
DWVprevModFullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevSumColonies <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevDensity <- glmer(data=DWVjust_HB, formula = virusBINY~ species + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevSpecies <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ 1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(DWVprevModFullHB, DWVprevModNullHB, test="LRT")
anova(DWVprevModFullHB, DWVprevSumColonies, test="LRT")
anova(DWVprevModFullHB, DWVprevDensity, test="LRT")
anova(DWVprevModFullHB, DWVprevSpecies, test="LRT")
summary(DWVprevModFullHB)
BQCVprevModFull <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNull <- glmer(data=BQCV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoCols <- glmer(data=BQCV, formula = virusBINY~Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoDens <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoSpec <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=BQCVprevModFull,
Null=BQCVprevModNull,
Colonies=BQCVprevModnoCols,
Density=BQCVprevModnoDens,
Species = BQCVprevModnoSpec)
# rename NAs "no apis caught"
DWV$HBSiteBin[is.na(DWV$HBSiteBin)] <- "No Apis Caught"
ApisFull <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + apis + (1|site), family = binomial(link = "logit"))
ApisNull <- glmer(data=DWV, formula = virusBINY ~ 1 + (1|site), family = binomial(link = "logit"))
ApisNoHB <- glmer(data=DWV, formula = virusBINY ~ Density + apis + (1|site), family = binomial(link = "logit"))
ApisNoApis <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + (1|site), family = binomial(link = "logit"))
ApisNoDens <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + apis + (1|site), family = binomial(link = "logit"))
summary(ApisFull)
anova(ApisFull, ApisNull, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
summary(ApisFull)
anova(ApisFull, ApisNull, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
summary(ApisFull)
# DWV load by number of colonies
DWVno0just_HB <- DWVno0[!DWVno0$sumColonies1==0,]
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long))
DWVloadSumColonies <- lmer(data=DWVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|lat) + (1|long))
DWVloadDensity <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
DWVloadSpecies <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + (1|site) + (1|lat) + (1|long))
DWVloadModNullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
anova(DWVloadModFullHB, DWVloadSumColonies, test="LRT")
anova(DWVloadModFullHB, DWVloadDensity, test="LRT")
anova(DWVloadModFullHB, DWVloadSpecies, test="LRT")
summary(DWVloadModFullHB)
anova(DWVloadModFullHB, DWVloadSumColonies, test="LRT")
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + (1|site) + (1|lat) + (1|long))
DWVloadModNullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
# DWV load by number of colonies
DWVno0just_HB <- DWVno0[!DWVno0$sumColonies1==0,]
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long))
DWVloadSumColonies <- lmer(data=DWVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|lat) + (1|long))
DWVloadDensity <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + species + (1|site) + (1|lat) + (1|long))
DWVloadSpecies <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + (1|site) + (1|lat) + (1|long))
DWVloadModNullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
anova(DWVloadModFullHB, DWVloadSumColonies, test="LRT")
anova(DWVloadModFullHB, DWVloadDensity, test="LRT")
anova(DWVloadModFullHB, DWVloadSpecies, test="LRT")
summary(DWVloadModFullHB)
# DWV prev by number of colonies
DWVjust_HB <- DWV[!DWV$sumColonies1==0,]
DWVprevModFullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevSumColonies <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevDensity <- glmer(data=DWVjust_HB, formula = virusBINY~ species + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevSpecies <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ 1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(DWVprevModFullHB, DWVprevModNullHB, test="LRT")
# DWV prev by number of colonies
DWVjust_HB <- DWV[!DWV$sumColonies1==0,]
DWVprevModFullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ + sumColonies1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(DWVprevModFullHB, DWVprevModNullHB, test="LRT")
# BQCV prev by number of colonies
BQCVjust_HB <- BQCV[!BQCV$sumColonies1==0,]
BQCVprevModFullHB <- glmer(data=BQCVjust_HB, formula = virusBINY~sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNullHB <- glmer(data=BQCVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(BQCVprevModFullHB, BQCVprevModNullHB, test="LRT")
=======
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|apiary/site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|apiary/site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|apiary/site), family = binomial(link = "logit"))
summary(PlantsFull)
>>>>>>> b3f427daeee7a75c815a093ce2a6daee9a10296d
