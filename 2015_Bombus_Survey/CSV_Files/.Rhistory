# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
# rename NAs "no apis caught"
DWV$HBSiteBin[is.na(DWV$HBSiteBin)] <- "No Apis Caught"
# Full, Null and Reduced Models
ApisFull <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + apis + (1|site), family = binomial(link = "logit"))
ApisNull <- glmer(data=DWV, formula = virusBINY ~ 1 + (1|site), family = binomial(link = "logit"))
ApisNoHB <- glmer(data=DWV, formula = virusBINY ~ Density + apis + (1|site), family = binomial(link = "logit"))
ApisNoApis <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + (1|site), family = binomial(link = "logit"))
ApisNoDens <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + apis + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(ApisFull, ApisNull, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
# To view effects and std. errors of each variable:
summary(ApisFull)
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"), REML = TRUE)
Plants$ID
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site/ID), family = binomial(link = "logit"))
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site/ID), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site/ID), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|site/ID), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|site/ID), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site/ID), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site/ID), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# FOR ALEX
setwd("~/Documents/GitHub/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# plant virus prevalence data:
Plants <- read.table("plants2015DF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# load site level data and merge pathogen data with GIS HB colony/apiary output:
SpatDat <- read.table("SpatDatBuffs.csv", header=TRUE,sep=",",stringsAsFactors=FALSE)
SpatDat <- dplyr::select(SpatDat, -elevation, -town, -apiary, -siteNotes, -apiaryNotes)
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialDat <- merge(SurvData, SpatDat, by = "site")
# merge data to create final APC data frame:
SpatDat <- dplyr::select(SpatDat, -lat, -long)
BombSurv <- merge(BombSurv, SpatDat, by = "site")
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee, -City, -Name, -virusBINY_PreFilter, -siteNotes, -X)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
# create variable that bins apiaries by how many colonies are there
BombSurv$ColoniesPooled <- ifelse(BombSurv$sumColonies1 <= 0, "0", ifelse(BombSurv$sumColonies1 <= 20, "1-19","20+"))
# formatting bombsurv to test Spatial Autocorralation on
BeeAbund <- read.table("BeeAbund.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
# create log virus data:
BombSurv$logVirus <- log(1+BombSurv$norm_genome_copbee)
BombSurv$logHB <- log(1+BombSurv$norm_genome_copbeeHB)
BombSurv <- merge(BombSurv, BeeAbund, by = "site")
BombSurv$HBdensRatio <-  BombSurv$Density/((BombSurv$apis+0.0000000000000001)/10)
# two data frames for DWV and BQCV for Morans I
BQCV <- subset(BombSurv, target_name=="BQCV")
DWV <- subset(BombSurv, target_name=="DWV")
# create Plants dataframe:
Plants <- merge(Plants, BeeAbund, all.x=TRUE, all.y=FALSE)
Plants <- merge(Plants, SpatialDat, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
# create data frames to test spatial AC
SpatialDatBQCV <- subset(SpatialDat, target_name=="BQCV")
SpatialDatDWV <- subset(SpatialDat, target_name=="DWV")
BQCVprev <- lm(data=SpatialDatBQCV, BombPrev ~ sumColonies1)
BQCVprevResid <- summary(BQCVprev)
BQCVprevResid$residual
DWVprev <- lm(data=SpatialDatDWV, BombPrev ~ sumColonies1)
DWVprevResid <- summary(DWVprev)
DWVprevResid$residual
DWVload <- lm(data=SpatialDatDWV, BombusViralLoad ~ sumColonies1)
DWVloadResid <- summary(DWVload)
DWVloadResid$residual
BQCVload <- lm(data=SpatialDatBQCV, BombusViralLoad ~ sumColonies1)
BQCVloadResid <- summary(BQCVload)
BQCVloadResid$residual
DWVhb <- lm(data=SpatialDatDWV, HBviralLoad ~ sumColonies1)
HBbqcvResid <- summary(DWVhb)
HBbqcvResid$residual
BQCVhb <- lm(data=SpatialDatBQCV, HBviralLoad ~ sumColonies1)
HBdwvResid <- summary(BQCVhb)
HBdwvResid$residual
#For DWV:
DWV.dists <- as.matrix(dist(cbind(SpatialDatDWV$long, SpatialDatDWV$lat)))
DWV.dists.inv <- 1/DWV.dists
diag(DWV.dists.inv) <- 0
#For BQCV:
BQ.dists <- as.matrix(dist(cbind(SpatialDatBQCV$long, SpatialDatBQCV$lat)))
BQ.dists.inv <- 1/BQ.dists
diag(BQ.dists.inv) <- 0
# BQCV PREV:
Moran.I(BQCVprevResid$residuals, BQ.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# DWV PREV:
Moran.I(DWVprevResid$residuals, DWV.dists.inv) # NO SPACIAL-AUTO COR
# BQCV LOAD:
Moran.I(BQCVloadResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV LOAD:
Moran.I(DWVloadResid$residual, DWV.dists.inv) # YES SPACIAL-AUTO COR (clustered)
# BQCV HB LOAD
Moran.I(HBbqcvResid$residual, BQ.dists.inv) # NO SPACIAL-AUTO COR
# DWV HB LOAD:
Moran.I(HBdwvResid$residual, DWV.dists.inv) # NO SPACIAL-AUTO COR
AICfinderPrev <- function(X=Xvar, Y="virusBINY", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- glmer(data=data, formula = y~x + (1|site/species),
family = binomial(link = "logit"))
x <- summary(Fullmod)
return(list(x$AICtab[1], paste("P=", x$coefficients[2,4])))
}
# create vector of explainitory variables to test:
Xvar <- c("sumApiaries800", "sumColonies800","sumApiaries1", "sumColonies1","sumApiaries2", "sumColonies2","sumApiaries3", "sumColonies3","sumApiaries4", "sumColonies4","sumApiaries5", "sumColonies5")
# apply funciton to run though every iteration of DWV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=DWV)
# apply funciton to run though every iteration of BQCV prev:
sapply(X=Xvar, FUN=AICfinderPrev, data=BQCV)
AICfinderLoad <- function(X=Xvar, Y="logVirus", data=DWV){
data$y <- data[,Y]
data$x <- data[,X]
Fullmod <- lmer(data=data, formula = y~x + (1|site/species))
z<-Anova(Fullmod)
return(list(AIC(Fullmod), paste("P=", z$`Pr(>Chisq)`)))
}
# apply function to run though every iteration of DWV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=DWV)
# apply function to run though every iteration of BQCV load:
sapply(X=Xvar, FUN=AICfinderLoad, data=BQCV)
# remove unwanted target:
BombSurvNoAIPV<-BombSurv[!BombSurv$target_name==("IAPV"),]
# remove 0s
BombSurvNoAIPVno0<-BombSurvNoAIPV[!BombSurvNoAIPV$logVirus==0,]
#Create plot in ggplot
plot <- ggplot(data = BombSurvNoAIPVno0,
aes(x = ColoniesPooled,
y = logVirus,
fill = target_name)
) + geom_boxplot(color="black") + coord_cartesian(ylim = c(5, 20)) + labs(x = "# apis colonies within 1km radius", y = "log(genome copies/bee)", fill="Virus:")
# add a theme
plot + theme_bw(base_size = 17) + scale_fill_manual(values=c("white", "gray40"))
VirusSum <- ddply(BombSurvNoAIPV, c("target_name", "ColoniesPooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
#Create plot in ggplot
plot1 <- ggplot(data = VirusSum,
aes(x = ColoniesPooled,
y = mean,
shape = target_name)
) + geom_point(size=4) + coord_cartesian(ylim = c(0, 1)) + labs(x = "# apis colonies within 1km radius", y = "% prevalence", shape="Virus:") + scale_y_continuous(labels = scales::percent) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2))
# add a theme
plot1 + theme_bw(base_size = 17) + scale_shape_manual(values=c(19, 1)) + annotate(geom = "text", x = 1, y = .11, label = "n=205",cex = 4) + annotate(geom = "text", x = 2, y = .18, label = "n=71",cex = 4) + annotate(geom = "text", x = 3, y = .3, label = "n=92",cex = 4) + annotate(geom = "text", x = 1, y = .72, label = "n=188",cex = 4) + annotate(geom = "text", x = 2, y = 1, label = "n=62",cex = 4) + annotate(geom = "text", x = 3, y = .98, label = "n=88",cex = 4)
VirusSum1 <- ddply(BombSurvNoAIPV, c("target_name", "apiary_near_far"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
VirusSum1$apiary_near_far <- as.character(VirusSum1$apiary_near_far)
colors <- c("white", "grey25")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85),  panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + annotate(geom = "text", x = 1, y = .98, label = "*",cex = 10) + annotate(geom = "text", x = 2, y = .25, label = "*",cex = 9)
#ddply summarize:
fieldPlantsSum <- ddply(Plants, c("target_name", "apiary_near_far"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sqrt(((mean(BINYprefilter))*(1-mean(BINYprefilter)))/n))
# remove 0 (make NA) for values so they dont plot error bars
fieldPlantsSum$sd[fieldPlantsSum$sd==0] <- NA
fieldPlantsSum$mean[fieldPlantsSum$mean==0] <- NA
#choosing color pallet
colors <- c("white", "grey30")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary_near_far, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
# summary of viral load for by target and site
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
# remove BQCV and IAPV:
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
ggplot(data=CopDist, aes(log(1 + mean))) +
geom_histogram(breaks=seq(5, 25, by = 1),
col="black",
fill="grey30") +
labs(x="Apis DWV log(viral load)", y="Frequency") + theme_bw(base_size=23)
HBSiteSum <- ddply(DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
# remove 0 (make NA) for values so they dont plot error bars
HBSiteSum$sd[HBSiteSum$sd==0] <- NA
HBSiteSum$mean[HBSiteSum$mean==0] <- NA
colors <- c("grey30", "white", "white")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", color = "black") + labs(x="Level of DWV in Apis", y = "% Prevalence in Bombus")
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
###################################################################################################
######################## CREATING PUBLICATION GRAPHICS FOR PLANT PREV #############################
###################################################################################################
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
#ddply summarize:
fieldPlantsSum <- ddply(Plants, c("target_name", "apiary_near_far"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sqrt(((mean(BINYprefilter))*(1-mean(BINYprefilter)))/n))
###################################################################################################
######################## CREATING PUBLICATION GRAPHICS FOR PLANT PREV #############################
###################################################################################################
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
#ddply summarize:
fieldPlantsSum <- ddply(Plants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sqrt(((mean(BINYprefilter))*(1-mean(BINYprefilter)))/n))
# remove 0 (make NA) for values so they dont plot error bars
fieldPlantsSum$sd[fieldPlantsSum$sd==0] <- NA
fieldPlantsSum$mean[fieldPlantsSum$mean==0] <- NA
#choosing color pallet
colors <- c("white", "grey30")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
# summary of viral load for by target and site
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
# remove BQCV and IAPV:
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
ggplot(data=CopDist, aes(log(1 + mean))) +
geom_histogram(breaks=seq(5, 25, by = 1),
col="black",
fill="grey30") +
labs(x="Apis DWV log(viral load)", y="Frequency") + theme_bw(base_size=23)
HBSiteSum <- ddply(DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
# remove 0 (make NA) for values so they dont plot error bars
HBSiteSum$sd[HBSiteSum$sd==0] <- NA
HBSiteSum$mean[HBSiteSum$mean==0] <- NA
colors <- c("grey30", "white", "white")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", color = "black") + labs(x="Level of DWV in Apis", y = "% Prevalence in Bombus")
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site/apiary), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site/apiary), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|site/apiary), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|site/apiary), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|site/apiary), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site/apiary), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
Plants$apiary
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|apiary/site), family = binomial(link = "logit"))
anova(PlantsFull, PlantsDensity, test="LRT")
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
anova(PlantsFull, PlantsBombus, test="LRT")
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|apiary_near_far/site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + (1|apiary/site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + (1|apiary/site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|apiary_near_far/site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
# To view effects and std. errors of each variable:
summary(PlantsFull)
Plants$Density
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density (1|site), family = binomial(link = "logit"))
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density (1|site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"))
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"))
Density
Plants$Density
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + Density + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
PlantsTarg
summary(PlantsTarg)
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"), nAGQ=0)
anova(PlantsFull,PlantsTarg, test="LRT")
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"), nAGQ=0)
summary(PlantsTarg)
# Full, Null and Reduced Models
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|site), family = binomial(link = "logit"))
PlantsApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + Density + (1|site), family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa"))
PlantsBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + Density + (1|site), family = binomial(link = "logit"))
PlantsDensity <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + target_name + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(PlantsFull, PlantsNull, test="LRT") # full model versus the null model
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
anova(PlantsFull, PlantsDensity, test="LRT")
anova(PlantsFull,PlantsTarg, test="LRT")
anova(PlantsFull, PlantsApis, test="LRT")
anova(PlantsFull, PlantsBombus, test="LRT")
# rename NAs "no apis caught"
DWV$HBSiteBin[is.na(DWV$HBSiteBin)] <- "No Apis Caught"
# Full, Null and Reduced Models
ApisFull <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + apis + (1|site), family = binomial(link = "logit"))
ApisNull <- glmer(data=DWV, formula = virusBINY ~ 1 + (1|site), family = binomial(link = "logit"))
ApisNoHB <- glmer(data=DWV, formula = virusBINY ~ Density + apis + (1|site), family = binomial(link = "logit"))
ApisNoApis <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + (1|site), family = binomial(link = "logit"))
ApisNoDens <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + apis + (1|site), family = binomial(link = "logit"))
# liklihood ratio tests between models for significance
anova(ApisFull, ApisNull, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
DWV$apis
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
TheExtractor <- function(Full, Null, Colonies, Density, Species){
sumFull <- summary(Full)
modelFit <- anova(Full, Null, test="LRT")
Cols <- anova(Full, Colonies, test="LRT")
Dens <- anova(Full, Density, test="LRT")
Spec <- anova(Full, Species, test="LRT")
ModFit <- list("Model Fit P"=modelFit$`Pr(>Chisq)`[2], "Model Fit Df"=modelFit$`Chi Df`[2], "Model Fit Chi2"=modelFit$Chisq[2])
ColFit <- list("Colony Fit P"=Cols$`Pr(>Chisq)`[2],"Colony Fit Df"=Cols$`Chi Df`[2],"Colony Fit Chi2"=Cols$Chisq[2])
DensFit <- list("Density Fit P"=Dens$`Pr(>Chisq)`[2],"Density Fit Df"=Dens$`Chi Df`[2],"Density Fit Chi2"=Dens$Chisq[2])
SpecFit <- list("Species Fit P"=Spec$`Pr(>Chisq)`[2],"Species Fit Df"=Spec$`Chi Df`[2],"Species Fit Chi2"=Spec$Chisq[2])
return(list(sumFull$coefficients[1:4,1:2],ModFit, ColFit, DensFit, SpecFit))
}
# Full, Null and Reduced Models
DWVprevModFull <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNull <- glmer(data=DWV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoCols <- glmer(data=DWV, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoDens <- glmer(data=DWV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoSpec <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
# run the function to get results of models
TheExtractor(Full=DWVprevModFull,
Null=DWVprevModNull,
Colonies=DWVprevModnoCols,
Density=DWVprevModnoDens,
Species = DWVprevModnoSpec)
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
# Full, Null and Reduced Models
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoSpec <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|species) + (1|lat) + (1|long))
# run the function to get results of models
TheExtractor(Full=DWVloadModFull,
Null=DWVloadModNull,
Colonies=DWVloadModnoCols,
Density=DWVloadModnoDens,
Species = DWVloadModnoSpec )
# Full, Null and Reduced Models
BQCVprevModFull <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNull <- glmer(data=BQCV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoCols <- glmer(data=BQCV, formula = virusBINY~Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoDens <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoSpec <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
# run the function to get results of models
TheExtractor(Full=BQCVprevModFull,
Null=BQCVprevModNull,
Colonies=BQCVprevModnoCols,
Density=BQCVprevModnoDens,
Species = BQCVprevModnoSpec)
# remove 0s to look at viral load of infected
BQCVno0 <- BQCV[!BQCV$virusBINY==0,]
# Full, Null and Reduced Models
BQCVloadModFull <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadModNull <- lmer(data=BQCVno0, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
BQCVloadModnoCols <- lmer(data=BQCVno0, formula = logVirus ~ Density + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoDens <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoSpec <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|lat) + (1|long))
# run the function to get results of models
TheExtractor(Full=BQCVloadModFull,
Null=BQCVloadModNull,
Colonies=BQCVloadModnoCols,
Density=BQCVloadModnoDens,
Species = BQCVloadModnoSpec)
