<<<<<<< HEAD
<<<<<<< HEAD
=======
cat(x, sep="\t")
# Line Break separator
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
x <- c(1:10)
print(x)
# Space separator
cat(x)
# Multi-space separator, and adds a period between each number
cat(x, sep=" . ")
# Separates each number by a tab
cat(x, sep="\t")
# Separates each number by a line break
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
y <- sample(c("red", "blue"), N, TRUE)
y
# use cat to concatenate the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab
cat(x[1], y[1], sep="\t")
z <- cat(x[1], y[1], sep="\t")
z
cat(z, file="data1.txt", append=TRUE)
cat(z)
y <- sample(c("red", "blue"), 10, TRUE)
y
# use cat to concatenate and print the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab.
cat(x[1], y[1], sep="\t")
help(rev)
x <- runif(10)
x
rev(x)
x <- c("red", "orange", "blue")
#check it out
print(x)
x <- c("red","orange","blue")
#check it out
print(x)
#now reverse the order of the vector and print
rev(x)
helo(cumprod)
help(cumprod)
cumprod(x)
x <-c(3,5,10)
cumprod(x)
3*5*10
help(write.csv)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:10
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
varA <- 1:12
varB <- rep(c("Con", "LowN", "HighN"), each=4) #4 values of each
varC <- runif(12)
dFrame <- data.frame(varA,varB,varC,stringsAsFactors = FALSE)
print(dFrame)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
B <- rep(c("red","blue","green","orange"), each =2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
data.frame(A,B,stringsAsFactors = FALSE)
C <-runif(16)
data.frame(A,B,C,stringsAsFactors = FALSE)
write.csv(data, "data.csv", row.names = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "blue", use "cyan"
write.csv(data, "data.csv", row.names = FALSE, blue = "cyan")
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "NA", return blank cell
write.csv(data, "data.csv", row.names = FALSE, na = "")
read.csv("data.csv")
help(rep_len)
rep_len(c("finch","thrush","warbler"),20)
help(read.delim)
help(all.equal)
sample()
help(sample)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 100, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 2000, replace = TRUE)
sample(x, 2000, replace = FALSE)
sample(x, 1500, replace = TRUE)
help(setequal)
x <- 1:100
y <- 2:101
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("finch","thrush","warbler"),20)
setequal(birds,birds2)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("owl","thrush","warbler"),20)
setequal(birds,birds2)
x <- sample(1:100, size=10)
y <- sample(1:100, size=10)
#use setequal to check if the two vectors are the same.
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("NA","thrush","warbler"),20)
#using setequal returns a FALSE value because there is one value different
setequal(birds,birds2)
help([)])
help([)
data = c(1,3,5,7,3,2)
#Using brackets will return the third value of the vector
data[3]
A <- 1:16
A <- 1:16
A <- 1:16
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
print(data)
data[1,2]
help(which)
sample(x, 1000, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 1000, replace = FALSE)
x <- runif(1:10)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 4, replace = FALSE)
# if you sample with replacement, you can sample at a size larger than the original object
#in this case, there will be numbers repeated
sample(x, 11, replace = TRUE)
```
shiny::runApp('AlgerProjects/demo')
# Multi-space separator
cat(x, sep=" . ")
data <- rep("blue","green", each=3)
rep_len(c("finch","thrush","warbler"),20)
bird<- rep_len(c("finch","thrush","warbler"),20)
which=="finch"
which(bird =="finch")
help(which)
x <- c(1,NA,2,NA,3)
#which positions are the
which(!is.na(x))[3]
help(atan2)
help(atan2)
help(atan2)
atan2(3,4)
hep(assign)
help(assign)
help(signif)
sigif(7.462527,digits=4)
signif(7.462527,digits=4)
lst <- list('one','two','three')
a <- lst[1]
class(a)
## returns "list"
a <- lst[[1]]
class(a)
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
chr [1:3] "a" "b" "c"
str(alist[1])
List of 1
$ : chr [1:3] "a" "b" "c"
str(alist[[1]][1])
chr "a"
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
str(alist[1])
alist[[1]]
alist[1]
alist[[1]]
alist[1]
lst <- list('one','two','three')
a <- lst[1]
class(a)
a <- lst[[1]]
class(a)
lst[[2]]
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
=======
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
xVar <- 1:10
yVar <- runif(10)
dataFrame <- data.frame(xVar,yVar)
dataFrame
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(Z)
}
Regression()
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
abline(regModel)
return(p)
>>>>>>> origin/master
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot()
RegressionPlot(y=c(1,2,3), x=c(4,5,6))
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return()
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return()
}
RegressionPlot()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- cbind(Pop1, Pop2)
MyDF
MyDF <- as.data.frame(cbind(Pop1, Pop2))
MyDF
MyDF$Pop1
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- as.data.frame(cbind(Pop1, Pop2))
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor1
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(cbind(Pop1, Pop2, Factor1, Factor2))
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(Pop1, Pop2, Factor1, Factor2)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
<<<<<<< HEAD
fitLinear()
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
>>>>>>> parent of 33ff7fb... figs
library(plyr)
VirusSum2 <- ddply(sp$Bimaculatus, c("target_name", "Date_Pooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
<<<<<<< HEAD
VirusSum2 <- VirusSum2[-(7:9),]
library(ggplot2)
#Create plot in ggplot
plot <- ggplot(data = VirusSum2,
aes(x = Date_Pooled,
y = mean,
group = target_name,
colour = target_name)
) + geom_line(size=1.5) + geom_point(size=4) + scale_colour_manual(values = c("dodgerblue4", "black")) + coord_cartesian(ylim = c(0, 1)) + labs(x = "Month", y = "% Prevalence", color="Virus:") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) + scale_y_continuous(labels = scales::percent)
# add a theme and add asterix for significance
plot + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 1))
mod <- glm(tempsplit$BQCV$virusBINY~tempsplit$BQCV$Date_collected)
summary(mod)
=======
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("HB + Bombus","Bombus Only","Pre Experiment"))
#creating the figure
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
#name....labels...= for legend (if there is a fill)
#theme(legend.position)= puts legend on plot
#coord_cartesian= set axis limits in this case, 0-1 because prevalence
#scale y continuous..= labels as percent
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
>>>>>>> parent of 33ff7fb... figs
```
Setting up data for regression between mean(bomble bee viral load) and HB viral load by site:
```{r}
# summary of bumbus viral load by site and target
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
<<<<<<< HEAD
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
# selcting the columns I want:
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
=======
<<<<<<< HEAD
cat(x, sep="\t")
# Line Break separator
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
x <- c(1:10)
print(x)
# Space separator
cat(x)
# Multi-space separator, and adds a period between each number
cat(x, sep=" . ")
# Separates each number by a tab
cat(x, sep="\t")
# Separates each number by a line break
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
y <- sample(c("red", "blue"), N, TRUE)
y
# use cat to concatenate the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab
cat(x[1], y[1], sep="\t")
z <- cat(x[1], y[1], sep="\t")
z
cat(z, file="data1.txt", append=TRUE)
cat(z)
y <- sample(c("red", "blue"), 10, TRUE)
y
# use cat to concatenate and print the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab.
cat(x[1], y[1], sep="\t")
help(rev)
x <- runif(10)
x
rev(x)
x <- c("red", "orange", "blue")
#check it out
print(x)
x <- c("red","orange","blue")
#check it out
print(x)
#now reverse the order of the vector and print
rev(x)
helo(cumprod)
help(cumprod)
cumprod(x)
x <-c(3,5,10)
cumprod(x)
3*5*10
help(write.csv)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:10
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
varA <- 1:12
varB <- rep(c("Con", "LowN", "HighN"), each=4) #4 values of each
varC <- runif(12)
dFrame <- data.frame(varA,varB,varC,stringsAsFactors = FALSE)
print(dFrame)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
B <- rep(c("red","blue","green","orange"), each =2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
data.frame(A,B,stringsAsFactors = FALSE)
C <-runif(16)
data.frame(A,B,C,stringsAsFactors = FALSE)
write.csv(data, "data.csv", row.names = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "blue", use "cyan"
write.csv(data, "data.csv", row.names = FALSE, blue = "cyan")
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "NA", return blank cell
write.csv(data, "data.csv", row.names = FALSE, na = "")
read.csv("data.csv")
help(rep_len)
rep_len(c("finch","thrush","warbler"),20)
help(read.delim)
help(all.equal)
sample()
help(sample)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 100, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 2000, replace = TRUE)
sample(x, 2000, replace = FALSE)
sample(x, 1500, replace = TRUE)
help(setequal)
x <- 1:100
y <- 2:101
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("finch","thrush","warbler"),20)
setequal(birds,birds2)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("owl","thrush","warbler"),20)
setequal(birds,birds2)
x <- sample(1:100, size=10)
y <- sample(1:100, size=10)
#use setequal to check if the two vectors are the same.
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("NA","thrush","warbler"),20)
#using setequal returns a FALSE value because there is one value different
setequal(birds,birds2)
help([)])
help([)
data = c(1,3,5,7,3,2)
#Using brackets will return the third value of the vector
data[3]
A <- 1:16
A <- 1:16
A <- 1:16
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
print(data)
data[1,2]
help(which)
sample(x, 1000, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 1000, replace = FALSE)
x <- runif(1:10)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 4, replace = FALSE)
# if you sample with replacement, you can sample at a size larger than the original object
#in this case, there will be numbers repeated
sample(x, 11, replace = TRUE)
```
shiny::runApp('AlgerProjects/demo')
# Multi-space separator
cat(x, sep=" . ")
data <- rep("blue","green", each=3)
rep_len(c("finch","thrush","warbler"),20)
bird<- rep_len(c("finch","thrush","warbler"),20)
which=="finch"
which(bird =="finch")
help(which)
x <- c(1,NA,2,NA,3)
#which positions are the
which(!is.na(x))[3]
help(atan2)
help(atan2)
help(atan2)
atan2(3,4)
hep(assign)
help(assign)
help(signif)
sigif(7.462527,digits=4)
signif(7.462527,digits=4)
lst <- list('one','two','three')
a <- lst[1]
class(a)
## returns "list"
a <- lst[[1]]
class(a)
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
chr [1:3] "a" "b" "c"
str(alist[1])
List of 1
$ : chr [1:3] "a" "b" "c"
str(alist[[1]][1])
chr "a"
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
str(alist[1])
alist[[1]]
alist[1]
alist[[1]]
alist[1]
lst <- list('one','two','three')
a <- lst[1]
class(a)
a <- lst[[1]]
class(a)
lst[[2]]
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
=======
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
xVar <- 1:10
yVar <- runif(10)
dataFrame <- data.frame(xVar,yVar)
dataFrame
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(Z)
}
Regression()
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
abline(regModel)
return(p)
>>>>>>> origin/master
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot()
RegressionPlot(y=c(1,2,3), x=c(4,5,6))
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return()
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return()
}
RegressionPlot()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- cbind(Pop1, Pop2)
MyDF
MyDF <- as.data.frame(cbind(Pop1, Pop2))
MyDF
MyDF$Pop1
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- as.data.frame(cbind(Pop1, Pop2))
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor1
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(cbind(Pop1, Pop2, Factor1, Factor2))
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(Pop1, Pop2, Factor1, Factor2)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
<<<<<<< HEAD
fitLinear()
# Clear memory of characters:
=======
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Looking at differences between the experiments:
#Subsetting the diversity experiment:
plantDiv <- plantTrans[ which(plantTrans$exp=="diversity"), ]
plantAcute <- plantTrans[ which(plantTrans$exp=="acute"), ]
plantComingle <- plantTrans[ which(plantTrans$exp=="comingle"), ]
plantChronic <- plantTrans[ which(plantTrans$exp=="chronic"), ]
#Checking out by plant species
plantTransDiv <- ddply(plantDiv, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$spp[plantTransDiv$spp == "RC"] <- "Red Clover"
plantTransDiv$spp[plantTransDiv$spp == "BFT"] <- "BirdsFoot Trefoil"
plantTransDiv$spp[plantTransDiv$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantTransDiv, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
=======
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
```{r}
>>>>>>> parent of 33ff7fb... figs
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
<<<<<<< HEAD
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("HB + Bombus","Bombus Only","Pre Experiment"))
#creating the figure
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
#name....labels...= for legend (if there is a fill)
#theme(legend.position)= puts legend on plot
#coord_cartesian= set axis limits in this case, 0-1 because prevalence
#scale y continuous..= labels as percent
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
```
```{r}
#Checking out virus detected on all treatment plants by plant species (for all experiments)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Looking at differences between the experiments:
#Subsetting the diversity experiment:
plantDiv <- plantTrans[ which(plantTrans$exp=="diversity"), ]
plantAcute <- plantTrans[ which(plantTrans$exp=="acute"), ]
plantComingle <- plantTrans[ which(plantTrans$exp=="comingle"), ]
plantChronic <- plantTrans[ which(plantTrans$exp=="chronic"), ]
#Checking out by plant species
plantTransDiv <- ddply(plantDiv, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$spp[plantTransDiv$spp == "RC"] <- "Red Clover"
plantTransDiv$spp[plantTransDiv$spp == "BFT"] <- "BirdsFoot Trefoil"
plantTransDiv$spp[plantTransDiv$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantTransDiv, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
=======
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
```{r}
ls()
rm(list=ls())
>>>>>>> parent of 33ff7fb... figs
=======
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(.85, .85))
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity", col="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, o.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 0.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 0.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
ls()
rm(list=ls())
>>>>>>> parent of 33ff7fb... figs
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
<<<<<<< HEAD
<<<<<<< HEAD
# Set Working Directory
=======
>>>>>>> parent of 33ff7fb... figs
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
<<<<<<< HEAD
# remove unwanted sites and bombus species
=======
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
>>>>>>> parent of 33ff7fb... figs
=======
>>>>>>> parent of 33ff7fb... figs
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
<<<<<<< HEAD
<<<<<<< HEAD
```
##Prevelence of viruses in bumble bees
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
=======
>>>>>>> parent of 33ff7fb... figs
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
=======
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
>>>>>>> parent of 33ff7fb... figs
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
<<<<<<< HEAD
<<<<<<< HEAD
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
=======
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(.85, .85))
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity", col="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
=======
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
>>>>>>> parent of 33ff7fb... figs
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
<<<<<<< HEAD
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, o.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 0.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 0.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
>>>>>>> parent of 33ff7fb... figs
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
<<<<<<< HEAD
# using ddply to get summary of virusBINY by species and target name:
=======
>>>>>>> parent of 33ff7fb... figs
=======
>>>>>>> parent of 33ff7fb... figs
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
<<<<<<< HEAD
<<<<<<< HEAD
#stats for % prevalence, species differences
=======
>>>>>>> parent of 33ff7fb... figs
=======
>>>>>>> parent of 33ff7fb... figs
statsplit <- split(BombSurv, BombSurv$target_name)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
<<<<<<< HEAD
<<<<<<< HEAD
# make apiary binary a character so we can use it as a factor in the model
=======
>>>>>>> parent of 33ff7fb... figs
=======
>>>>>>> parent of 33ff7fb... figs
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
PresAbst_stat <- BombSurv[which(BombSurv$apiary_near_far!="NA"),]
PresAbst_stat <- split(PresAbst_stat, PresAbst_stat$target_name)
chisq.test(PresAbst_stat$BQCV$virusBINY, PresAbst_stat$BQCV$apiary_near_far)
chisq.test(PresAbst_stat$DWV$virusBINY, PresAbst_stat$DWV$apiary_near_far)
<<<<<<< HEAD
<<<<<<< HEAD
# summary of viral load for by target and site
=======
>>>>>>> parent of 33ff7fb... figs
=======
>>>>>>> parent of 33ff7fb... figs
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- split(CopDist, CopDist$target_name)
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
hist(log(CopDist$DWV$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
<<<<<<< HEAD
<<<<<<< HEAD
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
# recode NAs for HBsiteBin as None to indicate no HB caught at site:
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "None"
# chi.sq test for High and Low DWV load sites
chisq.test(BombSurvSplit$DWV$HBSiteBin, BombSurvSplit$DWV$virusBINY)
fisher.test(BombSurvSplit$DWV$HBSiteBin, BombSurvSplit$DWV$virusBINY)
# Figure to see differences in virus prevalence over time
BombSurv$Date_collected <- as.Date(BombSurv$Date_collected, "%m/%d/%y")
tempsplit <- split(BombSurv, BombSurv$target_name)
BombSurv$Date_Pooled <- ifelse(BombSurv$Date_collected >= "2015-08-03", "August", ifelse(BombSurv$Date_collected >= "2015-07-28", "July", ifelse(BombSurv$Date_collected >= "2015-07-16", "July", "June")))
BombSurv$Date_Pooled <- factor(BombSurv$Date_Pooled, levels = c("June", "July", "August"))
library(dplyr)
sp <- split(BombSurv, BombSurv$species)
# create summary and sd and se using plyr
library(plyr)
VirusSum2 <- ddply(sp$Bimaculatus, c("target_name", "Date_Pooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusSum2 <- VirusSum2[-(7:9),]
library(ggplot2)
#Create plot in ggplot
plot <- ggplot(data = VirusSum2,
aes(x = Date_Pooled,
y = mean,
group = target_name,
colour = target_name)
) + geom_line(size=1.5) + geom_point(size=4) + scale_colour_manual(values = c("dodgerblue4", "black")) + coord_cartesian(ylim = c(0, 1)) + labs(x = "Month", y = "% Prevalence", color="Virus:") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) + scale_y_continuous(labels = scales::percent)
# add a theme and add asterix for significance
plot + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 1))
mod <- glm(tempsplit$BQCV$virusBINY~tempsplit$BQCV$Date_collected)
summary(mod)
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
# selcting the columns I want:
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
print(viralLoadDF)
# summary of bumbus viral load by site and target
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
# selcting the columns I want:
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
# summary of HB viral load by site and target
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
# selcting the columns I want:
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
# get apiary near far data:
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
# selcting the columns I want:
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
# merge HB and Bombus DFs and rename columns:
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
# merge in eco data
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
# merge in prev for bombus
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
# merge for bombus
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
# remove IAPV data (all 0 anyway)
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
# recoding NA as 0 for sites where no HB were found (prev of Virus is 0 so Viral load is also 0 or NULL)
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
# split DF by target name:
x <- split(viralLoadDF, viralLoadDF$target_name)
# linear regression of HB load and Bombus load for DWV
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
# linear regression of HB load and Bombus load for BQCV
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
# looking at mean bombus viral load by site viral prev for DWV (p=0.02)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
# looking at sans sites and values for each of them
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
viralLoadDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
viralLoadDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
head(MixedModelDF)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
head(MixedModelDF)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# mixed model of prevalence on viral load
mod2 <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~BombPrev, random = ~ 1 | site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
head(MixedModelDF)
# make apiary near far a factor variable:
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
MixedModelDF<- read.csv("MixedModelDF.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
x <- split(MixedModelDF, MixedModelDF$target_name)
head(MixedModelDF)
# make apiary near far a factor variable:
MixedModelDF$apiary_near_far <- as.factor(MixedModelDF$apiary_near_far)
library(lme4)
library(MASS)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# mixed model of prevalence on viral load
mod2 <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~BombPrev, random = ~ 1 | site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# mixed model for DWV (significant) and apiary status
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
# mixed model for BQCV (NOT significant) and apiary status
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plants2015Survey <- read.csv("plants2015DF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SiteData <- read.csv("2015SurveySpatial.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# merge datasets
fieldPlants <- merge(plants2015Survey,SiteData, by="site")
library(plyr)
library(dplyr)
library(ggplot2)
#change apiary column to say "apiary, no apiary"
fieldPlants$apiary[fieldPlants$apiary == "Y"] <- "apiary"
fieldPlants$apiary[fieldPlants$apiary == "N"] <- "no apiary"
# Are the plants with viruses at sites with or without apiaries?
#ddply summarize:
fieldPlantsSum <- ddply(fieldPlants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsSum
fieldPlants
fieldPlants$apiary
summary(fieldPlants)
table(fieldPlants$apiary)
fieldPlants$labID
View(fieldPlants)
FieldSum <- fieldPlants[which(unique(fieldPlants$labID)), ]
FieldSum <- select(unique(fieldPlants$labID)), ]
FieldSum <- select(unique(fieldPlants$labID), ])
FieldSum <- unique(fieldPlants$ID)
view(FieldSum)
View(FieldSum)
table(fieldPlants$apiary)
26/2
40/2
20+13
PosSites <- fieldPlants[which(fieldPlants$site=="MART", "WHAL","JOSH"), ]
fieldPlantsTotal <- ddply(fieldPlants, c("target_name",), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(fieldPlantsSum, aes(x=target_name, y=mean )) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
fieldPlantsTotal
table(fieldPlantsTotal)
fieldPlantsTotal$target_name
fieldPlantsTotal <- ddply(fieldPlants, c("target_name",), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal <- ddply(fieldPlants, c("target_name"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(fieldPlantsTotal, aes(x=target_name, y=mean )) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
fieldPlantsTotal
fieldPlantsTotal <- ddply(fieldPlants, c("BINYprefilter"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
fieldPlantsSum <- ddply(fieldPlants, c("target_name", "apiary"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(fieldPlantsSum, aes(x=apiary, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
fieldPlantsSum
3/13
3/33
4/33
View(fieldPlantsSum)
View(fieldPlants)
fieldPlantsTotal <- ddply(fieldPlants, c("labID", "target_name"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
fieldPlantsTotal <- ddply(fieldPlants, c("labID"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n),
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
fieldPlantsTotal <- ddply(fieldPlants, c("labID"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
7/13
13/7
fieldPlantsTotal <- ddply(fieldPlants, c("labID","target_name"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
4/13
3/23
7/33
fieldPlantsTotal <- ddply(fieldPlants, c("species"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal <- ddply(fieldPlants, c("spp"), summarise,
sum = sum(BINYprefilter, na.rm=TRUE))
fieldPlantsTotal
6/33
=======
=======
>>>>>>> parent of 33ff7fb... figs
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(.85, .85))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", col="black") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- split(CopDist, CopDist$target_name)
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
hist(log(CopDist$DWV$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
>>>>>>> origin/master
<<<<<<< HEAD
>>>>>>> parent of 33ff7fb... figs
=======
>>>>>>> parent of 33ff7fb... figs
