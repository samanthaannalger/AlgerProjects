```
```{r}
#Checking out virus detected on all treatment plants by plant species (for all experiments)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
```
```{r}
#Remove Diversity experiment plants and check out data again.
```
```{r}
#Looking at differences between the experiments:
#Subsetting the diversity experiment:
plantDiv <- plantTrans[ which(plantTrans$exp=="diversity"), ]
plantAcute <- plantTrans[ which(plantTrans$exp=="acute"), ]
plantComingle <- plantTrans[ which(plantTrans$exp=="comingle"), ]
plantChronic <- plantTrans[ which(plantTrans$exp=="chronic"), ]
#Checking out by plant species
plantTransDiv <- ddply(plantDiv, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$spp[plantTransDiv$spp == "RC"] <- "Red Clover"
plantTransDiv$spp[plantTransDiv$spp == "BFT"] <- "BirdsFoot Trefoil"
plantTransDiv$spp[plantTransDiv$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantTransDiv, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
```
#Checking out virus detected on all treatment plants by plant species (for all experiments)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantTreat
plantTreat <- plantTrans[ -which(plantTrans$exp=="diversity"), ]
plantTreat
plantTreat <- plantTrans[ -which(plantTrans$exp=="comingle"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
plantTreat
plantTreat <- plantTrans[ -which(plantTrans$exp=="diversity"), ]
plantTreat
plantTreat <- plantTrans[ -which(plantTrans$exp=="comingle"), ]
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="diversity"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="comingle"), ]
plantTreat
#Checking out by plant species
#Checking out by plant species
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name * spp + (1|labID), family=binomial(link = "logit"))
library(lme4)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name * spp + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTrans
plantTreat
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat
mod3 <- glm(data=plantTreat, fixed = BINYprefilter~target_name * spp, random = ~ 1 | labID, family = binomial (link = "logit"))
summary(mod3)
mod3 <- glm(data=plantTreat, fixed = BINYprefilter~target_name * spp, random = ~ 1 | labID, family = binomial (link = "logit"))
plantTreat
mod3 <- glm(data=plantTreat, fixed = BINYprefilter~target_name * spp, family = binomial (link = "logit"))
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial (link = "logit"))
summary(mod3)
str(plantTreat)
plantTreat$BINYprefilter <- as.character(plantTreat$BINYprefilter)
str(plantTreat)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial (link = "logit"))
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
mod3 <- glm(BINYprefilter ~.,family=binomial(link='logit'),data=plantTreat)
summary(mod3)
plantTreat$BINYprefilter <- as.numeric(plantTreat$BINYprefilter)
str(plantTreat)
mod3 <- glm(BINYprefilter ~spp,family=binomial(link='logit'),data=plantTreat)
summary(mod3)
mod3 <- glm(BINYprefilter ~spp * target_name,family=binomial(link='logit'),data=plantTreat)
summary(mod3)
mod3 <- glm(BINYprefilter ~ target_name,family=binomial(link='logit'),data=plantTreat)
summary(mod3)
mod3 <- glm(BINYprefilter ~spp,family=binomial(link='logit'),data=plantTreat)
mod4 <- glm(BINYprefilter ~spp*target_name,family=binomial(link='logit'),data=plantTreat)
anova(mod3,mod4)
summary(anova(mod3,mod4))
mod3 <- glm(data=plantTreat, BINYprefilter~target_name + spp, family = binomial)
summary(mod3)
str(plantTreat)
plantTreat$spp <- as.factor(plantTreat$spp)
plantTreat$target_name <- as.factor(plantTreat$target_name)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name + spp, family = binomial)
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial)
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial(link = "logit"))
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial(link = "probit"))
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial)
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~spp, family = binomial)
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~targer_name, family = binomial)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
treat <- rep(plantTreat, 10)
treat
treat <- rbind(plantTreat, plantTreat)
treat
length(treat$date)
length(plantTreat$target_name)
treat <- rbind(plantTreat, plantTreat, plantTreat, plantTreat)
mod3 <- glm(data=treat, BINYprefilter~target_name, family = binomial)
summary(mod3)
mod3 <- glm(data=treat, BINYprefilter~target_name * spp, family = binomial)
summary(mod3)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name * spp, family = binomial)
summary(mod3)
library(lme4)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name*spp + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
plantTreat
str(plantTreat)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name + spp, family = binomial)
summary(mod3)
mod3 <- glm(data=statsplit$BQCV, BINYprefilter~spp, family = binomial)
summary(mod3)
plantTreat
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
plantTreat
plantSpp
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTransPlants <- read.csv("plantTransPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
plantqPCR <- read.csv("PlantqPCRResults.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# check data:
head(plantTransPlants)
head(plantqPCR)
# data cleaning whip dataframe into shape and merge with eco data:
# remove uneeded columns from DF:
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
## Clean up for 2015 plant data___________________________________________
# take only columns that we want:
plantqPCR <- select(plantqPCR, labID, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove unwanted rows from dataframe:
plantqPCR<-plantqPCR[!(plantqPCR$labID=="No Sample"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="Gblock"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="NTC"),]
# take only columns that we want:
plantqPCR <- select(plantqPCR, labID, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove unwanted rows from dataframe:
plantqPCR<-plantqPCR[!(plantqPCR$labID=="No Sample"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="Gblock"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="NTC"),]
# merge 2015 eco data with qPCR results
plantTransPlants <- merge(plantqPCR, plantTransPlants, by="labID")
head(plantTransPlants)
# create a binary vector in dataframe that pulled out samples where both replicates are positive (samples that are positive will receive a 1):
plantTransPlants$BINYprefilter <- ifelse(plantTransPlants$quantity_sd > 0, 1, 0)
#select columns needed and make new dataframe
plantTransPlants <- select(plantTransPlants, labID, ID, target_name, date, tent, group, fieldID, spp, exp, BINYprefilter)
#delete unique rows to show only one entry for each sample.
plantTransPlants <- unique(plantTransPlants)
plantTransPlants
str(plantTransPlants)
table(plantTransPlants)
tanle(plantTransPlants)
table(plantTransPlants)
plantTransPlants
table(plantTransPlants$spp)
table(plantTransPlants$target_name)
write.csv(plantTransPlants, file = "plantTransPlantsDF.csv")
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plants2015 <- read.csv("Plants_2015Survey.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
plantqPCR <- read.csv("PlantqPCRResults.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# check data:
head(plants2015)
head(plantqPCR)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
## Clean up for 2015 plant data___________________________________________
# take only columns that we want:
plantqPCR <- select(plantqPCR, labID, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove unwanted rows from dataframe:
plantqPCR<-plantqPCR[!(plantqPCR$labID=="No Sample"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="Gblock"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="NTC"),]
# merge 2015 eco data with qPCR results
plants2015 <- merge(plantqPCR, plants2015, by="labID")
plants2015
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTransPlants <- read.csv("plantTransPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
plantqPCR <- read.csv("PlantqPCRResults.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# check data:
head(plantTransPlants)
head(plantqPCR)
# data cleaning whip dataframe into shape and merge with eco data:
# remove uneeded columns from DF:
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
## Clean up for 2015 plant data___________________________________________
# take only columns that we want:
plantqPCR <- select(plantqPCR, labID, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove unwanted rows from dataframe:
plantqPCR<-plantqPCR[!(plantqPCR$labID=="No Sample"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="Gblock"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="NTC"),]
# take only columns that we want:
plantqPCR <- select(plantqPCR, labID, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove unwanted rows from dataframe:
plantqPCR<-plantqPCR[!(plantqPCR$labID=="No Sample"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="Gblock"),]
plantqPCR <- plantqPCR[!(plantqPCR$labID=="NTC"),]
# merge eco data with qPCR results
plantTransPlants <- merge(plantqPCR, plantTransPlants, by="labID")
head(plantTransPlants)
plantTransPlants
```{r}
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
table(PlantVirusSum)
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
#name....labels...= for legend (if there is a fill)
#theme(legend.position)= puts legend on plot
#coord_cartesian= set axis limits in this case, 0-1 because prevalence
#scale y continuous..= labels as percent
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
```
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#creating the figure
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
#name....labels...= for legend (if there is a fill)
#theme(legend.position)= puts legend on plot
#coord_cartesian= set axis limits in this case, 0-1 because prevalence
#scale y continuous..= labels as percent
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
```
```{r}
#Checking out virus detected on all treatment plants by plant species (for all experiments)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
```
```{r}
#Remove Diversity and comingle experiment plants and check out data again.
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="diversity"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="comingle"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
#
plantTreat$spp <- as.factor(plantTreat$spp)
plantTreat$target_name <- as.factor(plantTreat$target_name)
library(lme4)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name*spp + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
plantTreat
plantTreat <- plantTreat[ which(plantTreat$spp=="BFT"), ]
plantTreat
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
chisq.test(plantTreat$BINYprefilter, plantTreat$target_name)
fisher.test(plantTreat$BINYprefilter, plantTreat$target_name)
