Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
# Clear memory of characters
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("steelblue", "tan3")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("steelblue", "tan3")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
statsplit <- split(BombSurv, BombSurv$target_name)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
PresAbst_stat <- BombSurv[which(BombSurv$apiary_near_far!="NA"),]
PresAbst_stat <- split(PresAbst_stat, PresAbst_stat$target_name)
chisq.test(PresAbst_stat$BQCV$virusBINY, PresAbst_stat$BQCV$apiary_near_far)
chisq.test(PresAbst_stat$DWV$virusBINY, PresAbst_stat$DWV$apiary_near_far)
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "None"
chisq.test(BombSurvSplit$DWV$HBSiteBin, BombSurvSplit$DWV$virusBINY)
fisher.test(BombSurvSplit$DWV$HBSiteBin, BombSurvSplit$DWV$virusBINY)
BombSurv$Date_collected <- as.Date(BombSurv$Date_collected, "%m/%d/%y")
tempsplit <- split(BombSurv, BombSurv$target_name)
BombSurv$Date_Pooled <- ifelse(BombSurv$Date_collected >= "2015-08-03", "August", ifelse(BombSurv$Date_collected >= "2015-07-28", "July", ifelse(BombSurv$Date_collected >= "2015-07-16", "July", "June")))
BombSurv$Date_Pooled <- factor(BombSurv$Date_Pooled, levels = c("June", "July", "August"))
library(dplyr)
sp <- split(BombSurv, BombSurv$species)
library(plyr)
VirusSum2 <- ddply(sp$Bimaculatus, c("target_name", "Date_Pooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusSum2 <- VirusSum2[-(7:9),]
library(ggplot2)
plot <- ggplot(data = VirusSum2,
aes(x = Date_Pooled,
y = mean,
group = target_name,
colour = target_name)
) + geom_line(size=1.5) + geom_point(size=4) + scale_colour_manual(values = c("dodgerblue4", "black")) + coord_cartesian(ylim = c(0, 1)) + labs(x = "Month", y = "% Prevalence", color="Virus:") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) + scale_y_continuous(labels = scales::percent)
plot + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 1))
mod <- glm(tempsplit$BQCV$virusBINY~tempsplit$BQCV$Date_collected)
summary(mod)
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
x <- split(viralLoadDF, viralLoadDF$target_name)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
print(viralLoadDF)
write.csv(viralLoadDF, file="MixedModelDF.csv")
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod1 <- glmmPQL(data=x$BQCV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
mod2 <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~BombPrev, random = ~ 1 | site, family = gaussian)
summary(mod2)
viralLoadDF$logViralLoad <- log10(viralLoadDF$BombMeanNA+1)
VirusSum1 <- ddply(viralLoadDF, c("apiary_near_far", "target_name"), summarise,
n = length(logViralLoad),
mean = mean(logViralLoad, na.rm=TRUE),
sd = sd(logViralLoad, na.rm = TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Virus", y = "Viral Load log(genome copies/site)")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 10)) + scale_fill_manual(values=colors, name="Apiary Status:", labels=c("Far from Apiary", "Near Apiary")) + theme(legend.position=c(.8, .85)) + annotate(geom = "text", x = 2, y = 6.5, label = "**",cex = 10) + annotate(geom = "text", x = 1, y = 8.5, label = "n.s.",cex = 7)
x$DWV
plot1 <- ggplot(data = x$DWV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-10,70)) + theme_minamal(base_size = 17) + theme(legend.position=c(3, 3), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), scale_x_continuous(breaks=pretty_breaks(n=10)))
plot1 <- ggplot(data = x$DWV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-10,70)) + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), scale_x_continuous(breaks=pretty_breaks(n=10)))
plot1 <- ggplot(data = x$DWV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-10,70)) + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'))
x$DWV
plot1 <- ggplot(data = x$DWV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-10,70)) + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'))
plot1 <- ggplot(data = x$DWV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-10,70)) + theme_minimal(base_size = 17)
plot1
plot1 <- ggplot(data = x$DWV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17)
plot1
x$DWV
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
SiteVirPrev <- ddply(BombSurv, c("site", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
SiteVirPrev
spac <- read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
spac <- select(spac, site, sumApiaries, sumColonies)
spacData <- merge(SiteVirPrev, spac, by="site")
splitDF <- split(spacData, spacData$target_name)
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumApiaries)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumApiaries)
plot1 <- plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumApiaries, xlab="# apiaries within 3 km", ylab="prevalence BQCV in Bumble Bees")
help(lines)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod1 <- glmmPQL(data=x$BQCV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
summary(mod)
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries with in 3 km", y = "Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17)
plot1
mod2 <- glmmPQL(data=x$BQCV, fixed = BombPrev~sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod2)
mod2 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod2)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod4 <- lm(BombPrev~sumApiaries, data=x$BQCV)
summary(mod4)
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent)
plot1
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent)
plot1
plot2 <- ggplot(data = x$DWV,
aes(x = BombPrev,
y = BombMeanNA)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(data = x$DWV,
aes(x = BombPrev,
y = log10(BombMeanNA))
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(data = x$DWV,
aes(x = BombPrev,
y = log10(BombMeanNA))
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 10), xlim = c(0,1)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(data = x$DWV,
aes(x = BombPrev,
y = log10(BombMeanNA))
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(2.5, 7.5), xlim = c(0,0.5)) + theme_minimal(base_size = 17)
plot2
plot2 <- ggplot(data = x$DWV,
aes(x = BombPrev,
y = log10(BombMeanNA))
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(2, 7), xlim = c(0,0.5)) + theme_minimal(base_size = 17)
plot2
plot2 <- ggplot(data = x$DWV,
aes(x = BombPrev,
y = log10(BombMeanNA))
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(1, 7), xlim = c(0,0.5)) + theme_minimal(base_size = 17)
plot2
x
x
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,9)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent)
plot1
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent) + scale_x_continuous(breaks=pretty_breaks(n=5))
plot1
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent) + scale_x_continuous(breaks=pretty_breaks(n=10))
plot1
library(scales)
plot1 <- ggplot(data = x$BQCV,
aes(x = sumApiaries,
y = BombPrev)
) + geom_point(size=3) + labs(x = "# of Apiaries within 3 km", y = "% Prevalence of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(0,10)) + theme_minimal(base_size = 17) + scale_y_continuous(labels = scales::percent) + scale_x_continuous(breaks=pretty_breaks(n=10))
plot1
