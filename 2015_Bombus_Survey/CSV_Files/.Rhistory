<<<<<<< HEAD
get.ver
PosList
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
x
# which are postive for DWV
posDWV <- PosList[PosList$target_name=="DWV",]
posDWV
posBQCV <- PosList[PosList$target_name=="BQCV",]
posBQCV
complete <- posDWV[(psoDWV$ID %in% posBQCV$ID),]
complete <- posDWV[(posDWV$ID %in% posBQCV$ID),]
complete
complete <- posDWV[!(posDWV$ID %in% posBQCV$ID),]
complete
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun
# samples that need to be run BQCV:
needtoRun <- posDWV[!(BQCVrun$ID %in% posBQCV$ID),]
needtoRun
# samples that need to be run BQCV:
needtoRun <- BQCVrun[!(BQCVrun$ID %in% posBQCV$ID),]
needtoRun
length(posBQCV$ID)
length(BQCVrun$ID)
posBQCV
# samples that need to be run BQCV:
needtoRun <- posBQCV[!(posBQCV$ID %in% BQCVrun$ID),]
needtoRun
length(needtoRun$ID)
length(posBQCV$ID)-length(BQCVrun$ID)
(BQCVrun$ID %in% needtoRun$ID)
write.csv(needtoRun, "BQCVneedtoRun.csv")
write.csv(posDWV, "DWVneedtoRun.csv")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BQCVrun
cq
Cq
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
# merge data:
Dat <- merge(Melt, Cq)
data
dat
Dat
str(Dat)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
library("dplyr")
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv
str(BombSurv)
# subset BombSurv:
select(BombSurv, site, sample_name, species, apiary_near_far, Density)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x=TRUE)
Bomb
Dat
# Merge Dat and Bomb
merge(Dat, Bomb)
names(Bomb)
names(Bomb)[3]
names(Bomb)[3] <- "ID"
Bomb
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
merge(Dat, Bomb)
names(Bomb)[3] <- "Sample"
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
merge(Dat, Bomb)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x=TRUE)
# Merge Dat and Bomb
merge(Dat, Bomb, all.y=TRUE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
Dat
Bomb
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
merge(Dat, Bomb, all.x=TRUE)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
View(Dat)
Dat[which(dat$Cq > 32.525)] <- NA
Dat[which(Dat$Cq > 32.525)] <- NA
Dat[which(Dat$Cq > 33)] <- NA
Dat[which(Dat$Cq > 33)] <- 0
Dat[which(Dat$Cq > 33),] <- 0
Dat
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!(Dat$Cq > 33),]
DatClean
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("dplyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
Dat
DatClean <- Dat[!(Dat$Cq == NA),]
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("dplyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!is.na(Dat$Cq),]
DatClean
DatClean <- Dat[!is.na(Dat$Melt),]
DatClean
DatClean <- DatClean[!(DatClean$Melt>33),]
DatClean
DatClean <- Dat[!is.na(Dat$Melt),]
DatClean
DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean
plot(DatClean$Density, DatClean$Cq)
plot(DatClean$norm_genome_copbeeHB, DatClean$Cq)
plot(DatClean$Cq_mean, DatClean$Cq)
plot(DatClean$Ct_mean, DatClean$Cq)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, norm_genome_copbee)
# change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
BQCVrun <- read.csv("NegStrandSamplesRan.csv", header=TRUE, stringsAsFactors=FALSE)
# which are postive for DWV
posDWV <- PosList[PosList$target_name=="DWV",]
posBQCV <- PosList[PosList$target_name=="BQCV",]
(BQCVrun$ID %in% needtoRun$ID)
# samples that need to be run BQCV:
needtoRun <- posBQCV[!(posBQCV$ID %in% BQCVrun$ID),]
(BQCVrun$ID %in% needtoRun$ID)
needtoRun
BQCVrun
length(BQCVrun$ID)
length(posBQCV$ID)
needtoRun
write.csv(needtoRun, "DWVneedtoRun.csv")
library("ggplot2")
library("plyr")
DatClean
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!is.na(Dat$Melt),]
DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
str(DatClean)
#ddply summarize:
fieldPlantsSum <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus") + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
plot1 + theme_bw(base_size = 23) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid"))
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
=======
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
#Create plot in ggplot
plot1 <- ggplot(data = VirusSum,
aes(x = ColoniesPooled,
y = mean,
shape = target_name)
) + geom_point(size=4) + coord_cartesian(ylim = c(0, 1)) + labs(x = "# apis colonies within 1km radius", y = "% prevalence", shape="Virus:") + scale_y_continuous(labels = scales::percent) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2))
# add a theme
plot1 + theme_bw(base_size = 17) + scale_shape_manual(values=c(19, 1)) + annotate(geom = "text", x = 1, y = .11, label = "n=205",cex = 4) + annotate(geom = "text", x = 2, y = .18, label = "n=71",cex = 4) + annotate(geom = "text", x = 3, y = .3, label = "n=92",cex = 4) + annotate(geom = "text", x = 1, y = .72, label = "n=188",cex = 4) + annotate(geom = "text", x = 2, y = 1, label = "n=62",cex = 4) + annotate(geom = "text", x = 3, y = .98, label = "n=88",cex = 4)
VirusSum1 <- ddply(BombSurvNoAIPV, c("target_name", "apiary_near_far"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
VirusSum1$apiary_near_far <- as.character(VirusSum1$apiary_near_far)
colors <- c("white", "grey25")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
>>>>>>> origin/master
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 23)
ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat
ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plotdat
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="% plants with virus detected", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
<<<<<<< HEAD
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
View(DatClean)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
plotdat
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat[!is.na(Dat$Melt),]
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Cq),
mean = mean(Cq, na.rm=TRUE),
sd = sd(Cq, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean
DatClean <- Dat
is.na(DatClean$Melt) <- 0
DatClean$Melt
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean$Binary
DatClean$Binary[is.na(DatClean$Binary),] <- 0
DatClean[is.na(DatClean$Binary),] <- 0
DatClean$Binary
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Binary),
mean = mean(Binary, na.rm=TRUE),
sd = sd(Binary, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plotdat
DatClean$Binary
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean[is.na(DatClean$Binary),] <- 0
DatClean
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Cq > 0, 1, 0)
DatClean$Binary
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# subset BombSurv:
Bomb <- select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name)
names(Bomb)[3] <- "Sample"
Bomb <- Bomb[Bomb$target_name=="BQCV",]
# merge data:
Dat <- merge(Melt, Cq)
str(Dat)
# Merge Dat and Bomb
Dat <- merge(Dat, Bomb, all.x=TRUE)
Dat
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean
DatClean <- Dat
DatClean
#DatClean <- DatClean[!(DatClean$Cq>33),]
#DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Melt > 0, 1, 0)
DatClean$Binary
DatClean[is.na(DatClean$Binary),] <- 0
DatClean
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
#DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$Binary <- ifelse(DatClean$Melt > 0, 1, 0)
DatClean$Binary[is.na(DatClean$Binary)] <- 0
DatClean$Binary
DatClean
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Binary),
mean = mean(Binary, na.rm=TRUE),
sd = sd(Binary, na.rm=TRUE))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat <- ddply(DatClean, c("Target", "apiary_near_far"), summarise,
n = length(Binary),
mean = mean(Binary, na.rm=TRUE),
sd = sqrt(((mean(Binary))*(1-mean(Binary)))/n))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plotdat
plotdat[-1,]
plotdat
plotdat <- plotdat[-1,]
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Cq", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=Target)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="Prevalence", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
DatCleanNeg <- DatClean[DatClean$Target=="BQCV-F",]
DatCleanNeg
DatCleanNeg <- DatClean[DatClean$Target=="BQCV-F",]
chisq.test(DatCleanNeg$Binary, DatCleanNeg$apiary_near_far)
DatCleanNeg
fisher.test(DatCleanNeg$Binary, DatCleanNeg$apiary_near_far)
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plotdat1 <- plotdat1[-1]
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
plotdat1 <- plotdat1[-1]
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plotdat1
#ddply summarize:
plotdat1 <- ddply(DatClean, c("Target"), summarise,
n = length(Ct_mean),
mean = mean(Ct_mean, na.rm=TRUE),
sd = sd(Ct_mean, na.rm=TRUE))
plotdat1 <- plotdat1[-1,]
print(plotdat1)
plot1 <- ggplot(plotdat1, aes(x=Target, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="mean Ct of previous runs", x="Target") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18)
plot(DatClean$Ct_mean, DatClean$Binary)
model <- glm(Binary ~Ct_mean,family=binomial(link='logit'),data=DatClean)
summary(model)
model <- glm(Binary ~Ct_mean,family=binomial(link='logit'),data=DatCleanNeg)
summary(model)
=======
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.86, .8),legend.background = element_rect(color = "black", fill = "white", size = .4, linetype = "solid")) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
# rename NAs "no apis caught"
DWV$HBSiteBin[is.na(DWV$HBSiteBin)] <- "No Apis Caught"
ApisFull <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + apis + (1|site), family = binomial(link = "logit"))
ApisNull <- glmer(data=DWV, formula = virusBINY ~ 1 + (1|site), family = binomial(link = "logit"))
ApisNoHB <- glmer(data=DWV, formula = virusBINY ~ Density + apis + (1|site), family = binomial(link = "logit"))
ApisNoApis <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + Density + (1|site), family = binomial(link = "logit"))
ApisNoDens <- glmer(data=DWV, formula = virusBINY ~ HBSiteBin + apis + (1|site), family = binomial(link = "logit"))
summary(ApisFull)
anova(ApisFull, ApisNull, test="LRT")
anova(ApisFull, ApisNoHB, test="LRT")
anova(ApisFull, ApisNoApis, test="LRT")
anova(ApisFull, ApisNoDens, test="LRT")
# summary of viral load for by target and site
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
# remove BQCV and IAPV:
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
ggplot(data=CopDist, aes(log(1 + mean))) +
geom_histogram(breaks=seq(5, 25, by = 1),
col="black",
fill="grey30") +
labs(x="Apis DWV log(viral load)", y="Frequency") + theme_bw(base_size=23)
HBSiteSum <- ddply(DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sqrt(((mean(virusBINY))*(1-mean(virusBINY)))/n))
# remove 0 (make NA) for values so they dont plot error bars
HBSiteSum$sd[HBSiteSum$sd==0] <- NA
HBSiteSum$mean[HBSiteSum$mean==0] <- NA
colors <- c("grey30", "white", "white")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", color = "black") + labs(x="Level of DWV in Apis", y = "% Prevalence in Bombus")
plot1 + theme_bw(base_size = 23) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
TheExtractor <- function(Full, Null, Colonies, Density, Species){
sumFull <- summary(Full)
modelFit <- anova(Full, Null, test="LRT")
Cols <- anova(Full, Colonies, test="LRT")
Dens <- anova(Full, Density, test="LRT")
Spec <- anova(Full, Species, test="LRT")
ModFit <- list("Model Fit P"=modelFit$`Pr(>Chisq)`[2], "Model Fit Df"=modelFit$`Chi Df`[2], "Model Fit Chi2"=modelFit$Chisq[2])
ColFit <- list("Colony Fit P"=Cols$`Pr(>Chisq)`[2],"Colony Fit Df"=Cols$`Chi Df`[2],"Colony Fit Chi2"=Cols$Chisq[2])
DensFit <- list("Density Fit P"=Dens$`Pr(>Chisq)`[2],"Density Fit Df"=Dens$`Chi Df`[2],"Density Fit Chi2"=Dens$Chisq[2])
SpecFit <- list("Species Fit P"=Spec$`Pr(>Chisq)`[2],"Species Fit Df"=Spec$`Chi Df`[2],"Species Fit Chi2"=Spec$Chisq[2])
return(list(sumFull$coefficients[1:4,1:2],ModFit, ColFit, DensFit, SpecFit))
}
DWVprevModFull <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNull <- glmer(data=DWV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoCols <- glmer(data=DWV, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoDens <- glmer(data=DWV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoSpec <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=DWVprevModFull,
Null=DWVprevModNull,
Colonies=DWVprevModnoCols,
Density=DWVprevModnoDens,
Species = DWVprevModnoSpec)
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoSpec <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|species) + (1|lat) + (1|long))
TheExtractor(Full=DWVloadModFull,
Null=DWVloadModNull,
Colonies=DWVloadModnoCols,
Density=DWVloadModnoDens,
Species = DWVloadModnoSpec )
BQCVprevModFull <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNull <- glmer(data=BQCV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoCols <- glmer(data=BQCV, formula = virusBINY~Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoDens <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoSpec <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=BQCVprevModFull,
Null=BQCVprevModNull,
Colonies=BQCVprevModnoCols,
Density=BQCVprevModnoDens,
Species = BQCVprevModnoSpec)
# remove 0s to look at viral load of infected
BQCVno0 <- BQCV[!BQCV$virusBINY==0,]
BQCVloadModFull <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadModNull <- lmer(data=BQCVno0, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
BQCVloadModnoCols <- lmer(data=BQCVno0, formula = logVirus ~ Density + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoDens <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoSpec <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|lat) + (1|long))
TheExtractor(Full=BQCVloadModFull,
Null=BQCVloadModNull,
Colonies=BQCVloadModnoCols,
Density=BQCVloadModnoDens,
Species = BQCVloadModnoSpec)
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoSpec <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|species) + (1|lat) + (1|long))
TheExtractor(Full=DWVloadModFull,
Null=DWVloadModNull,
Colonies=DWVloadModnoCols,
Density=DWVloadModnoDens,
Species = DWVloadModnoSpec )
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
anova(DWVloadModFull, DWVloadModNull, test="LRT")
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoSpec <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|species) + (1|lat) + (1|long))
TheExtractor(Full=DWVloadModFull,
Null=DWVloadModNull,
Colonies=DWVloadModnoCols,
Density=DWVloadModnoDens,
Species = DWVloadModnoSpec )
DWVprevModFull <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNull <- glmer(data=DWV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoCols <- glmer(data=DWV, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoDens <- glmer(data=DWV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModnoSpec <- glmer(data=DWV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=DWVprevModFull,
Null=DWVprevModNull,
Colonies=DWVprevModnoCols,
Density=DWVprevModnoDens,
Species = DWVprevModnoSpec)
# remove 0s to look at viral load of infected
DWVno0 <- DWV[!DWV$virusBINY==0,]
DWVloadModFull <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNull <- lmer(data=DWVno0, formula = logVirus ~ 1  + (1|site) + (1|lat) + (1|long))
DWVloadModnoCols <- lmer(data=DWVno0, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoDens <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModnoSpec <- lmer(data=DWVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|species) + (1|lat) + (1|long))
TheExtractor(Full=DWVloadModFull,
Null=DWVloadModNull,
Colonies=DWVloadModnoCols,
Density=DWVloadModnoDens,
Species = DWVloadModnoSpec )
BQCVprevModFull <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModNull <- glmer(data=BQCV, formula = virusBINY~1 + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoCols <- glmer(data=BQCV, formula = virusBINY~Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoDens <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
BQCVprevModnoSpec <- glmer(data=BQCV, formula = virusBINY~apiary_near_far + Density + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
TheExtractor(Full=BQCVprevModFull,
Null=BQCVprevModNull,
Colonies=BQCVprevModnoCols,
Density=BQCVprevModnoDens,
Species = BQCVprevModnoSpec)
# remove 0s to look at viral load of infected
BQCVno0 <- BQCV[!BQCV$virusBINY==0,]
BQCVloadModFull <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + species + (1|site) + (1|lat) + (1|long))
BQCVloadModNull <- lmer(data=BQCVno0, formula = logVirus ~ 1 + (1|site) + (1|lat) + (1|long))
BQCVloadModnoCols <- lmer(data=BQCVno0, formula = logVirus ~ Density + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoDens <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + species + (1|lat) + (1|long) + (1|site))
BQCVloadModnoSpec <- lmer(data=BQCVno0, formula = logVirus ~ apiary_near_far + Density + (1|site) + (1|lat) + (1|long))
TheExtractor(Full=BQCVloadModFull,
Null=BQCVloadModNull,
Colonies=BQCVloadModnoCols,
Density=BQCVloadModnoDens,
Species = BQCVloadModnoSpec)
# DWV load by number of colonies
DWVno0just_HB <- DWVno0[!DWVno0$sumColonies1==0,]
DWVloadModFullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
DWVloadModNullHB <- lmer(data=DWVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
anova(DWVloadModFullHB, DWVloadModNullHB, test="LRT")
# BQCV load by number of colonies
BQCVno0just_HB <- BQCVno0[!BQCVno0$sumColonies1==0,]
BQCVloadModFullHB <- lmer(data=BQCVno0just_HB, formula = logVirus ~ sumColonies1 + Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
BQCVloadModNullHB <- lmer(data=BQCVno0just_HB, formula = logVirus ~ Density + species + (1|site) + (1|species) + (1|lat) + (1|long))
anova(BQCVloadModFullHB, BQCVloadModNullHB, test="LRT")
# DWV prev by number of colonies
DWVjust_HB <- DWV[!DWV$sumColonies1==0,]
DWVprevModFullHB <- glmer(data=DWVjust_HB, formula = virusBINY~sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(DWVprevModFullHB, DWVprevModNullHB, test="LRT")
DWVloadModFullHB
summary(DWVloadModFullHB)
# DWV prev by number of colonies
DWVjust_HB <- DWV[!DWV$sumColonies1==0,]
DWVprevModFullHB <- glmer(data=DWVjust_HB, formula = virusBINY~sumColonies1 + Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
DWVprevModNullHB <- glmer(data=DWVjust_HB, formula = virusBINY~ Density + species + (1|site) + (1|lat) + (1|long), family = binomial(link = "logit"))
anova(DWVprevModFullHB, DWVprevModNullHB, test="LRT")
summary(DWVprevModFullHB)
DWVprevModFullHB
# Remove erant sites from plants data
Plants <- Plants[!Plants$site==("SIND"),]
Plants <- Plants[!Plants$site==("BOST"),]
# create a binary varaible for apiary or no apiary
Plants$apiary <- ifelse(Plants$sumColonies1 <= 0, "no apiary","apiary")
Plants$HBlowHigh <- ifelse(Plants$apis <= 4, "Low HB","High HB")
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNoApis <- glmer(data=Plants, formula = BINYprefilter ~ target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNoTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + (1|apiary/site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|apiary/site), family = binomial(link = "logit"))
summary(PlantsFull)
anova(PlantsFull, PlantsNull, test="LRT")
anova(PlantsFull, PlantsNoApis, test="LRT")
anova(PlantsFull,PlantsNoTarg, test="LRT")
PlantsFull <- glmer(data=Plants, formula = BINYprefilter ~ apis + bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNoApis <- glmer(data=Plants, formula = BINYprefilter ~ bombus + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNoTarg <- glmer(data=Plants, formula = BINYprefilter ~ apis + (1|apiary/site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|apiary/site), family = binomial(link = "logit"))
summary(PlantsFull)
anova(PlantsFull, PlantsNull, test="LRT")
anova(PlantsFull, PlantsNoApis, test="LRT")
anova(PlantsFull,PlantsNoTarg, test="LRT")
PlantsNoBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + (1|apiary/site), family = binomial(link = "logit"))
anova(PlantsFull, PlantsNoBombus, test="LRT")
PlantsNoTarg <- glmer(data=Plants, formula = BINYprefilter ~ bombus + apis + (1|apiary/site), family = binomial(link = "logit"))
PlantsNoBombus <- glmer(data=Plants, formula = BINYprefilter ~ apis + target_name + (1|apiary/site), family = binomial(link = "logit"))
PlantsNull <- glmer(data=Plants, formula = BINYprefilter ~ 1 + (1|apiary/site), family = binomial(link = "logit"))
summary(PlantsFull)
anova(PlantsFull, PlantsNull, test="LRT")
anova(PlantsFull, PlantsNoApis, test="LRT")
anova(PlantsFull,PlantsNoTarg, test="LRT")
anova(PlantsFull, PlantsNoBombus, test="LRT")
summary(PlantsNoApis)
PlantsNoApis
anova(PlantsFull, PlantsNoApis, test="LRT")
summary(PlantsNoApis)
summary(PlantsFull)
PlantsFull
summary(PlantsFull)
table(Plants$HBlowHigh)
head(Plants)
vb
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv", header=TRUE, stringsAsFactors=FALSE)
table(PosVirus$site, PosVirus$apiary_near_far)
table(PosVirus$target_name)
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv", header=TRUE, stringsAsFactors=FALSE)
table(PosVirus$site, PosVirus$apiary_near_far)
table(PosVirus$target_name)
table(PosVirus$ID)
bothVirus <- table(PosVirus$ID)
BQCVOnly<- PosVirus[PosVirus$target_name == "BQCV", ]
View(BQCVOnly)
table(BQCVOnly$site, BQCVOnly$species)
table(BQCVOnly$site)
DWVOnly<- PosVirus[PosVirus$target_name == "DWV", ]
View(DWVOnly)
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
BombSurvDF <- read.table("qPCR_results_dataframe.csv", header=TRUE, sep = ",")
EcoSurvDF <- read.table("2015EcoSurveyData.csv", header=TRUE, sep = ",")
HbDF <- read.table("qPCR_results_dataframe_HB.csv", header=TRUE, sep =",")
EcoHbDF <- read.table("2015EcoSurveyData_HB.csv", header=TRUE, sep = ",")
NHBS <- read.csv("NHBS_2015_DataSubset1.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
Diversity <- read.table("Diversity.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
SpacDF <-read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
length(EcoSurvDF$ID)
# check dataframe to see what the fuck is wrong with it:
head(BombSurvDF)
head(EcoSurvDF)
head(HbDF)
head(EcoHbDF)
#------------------------------------------------------------------------
# data cleaning whip dataframe into shape and merge with eco data:
# remove uneeded columns from DF:
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
# take only columns that we want:
BombSurvDF <- select(BombSurvDF, sample_name, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows from dataframe:
BombSurvDF<-BombSurvDF[!duplicated(BombSurvDF), ]
# remove NTC rows from dataframe:
BombSurvDF<-BombSurvDF[!(BombSurvDF$sample_name=="No Sample"),]
#create table to check for non-numeric sample names
table(BombSurvDF$sample_name)
# use grep to remove rows containing non Bombus Survey data:
#Field Experiment
BombSurvDF <- BombSurvDF[-grep("\\F",BombSurvDF$sample_name),]
#Koppert
BombSurvDF <- BombSurvDF[-grep("\\K",BombSurvDF$sample_name),]
#Ross Conrad
BombSurvDF <- BombSurvDF[-grep("\\RC",BombSurvDF$sample_name),]
#BB- BioBest Colonies
BombSurvDF <- BombSurvDF[-grep("\\-",BombSurvDF$sample_name),]
#gamma irradiated pollen
BombSurvDF <- BombSurvDF[-grep("\\Pollen",BombSurvDF$sample_name),]
#No template control
BombSurvDF <- BombSurvDF[-grep("\\NTC",BombSurvDF$sample_name),]
#Gblock
BombSurvDF <- BombSurvDF[-grep("\\Gblock",BombSurvDF$sample_name),]
# make sample name a numeric variable:
BombSurvDF$sample_name <- as.numeric(as.character(BombSurvDF$sample_name))
# order from low to high my sample name:
BombSurvDF <- BombSurvDF[order(BombSurvDF$sample_name),]
EcoSurvDF <- EcoSurvDF[order(EcoSurvDF$sample_name),]
# Merge datasets eco and bombus qPCR:
#Need rownames and all.x=TRUE because data frames are different sizes.
BombSurvDF$variable <- rownames(BombSurvDF)
BombSurv <- merge(BombSurvDF, EcoSurvDF, all.x =TRUE)
# remove temporary column - "variable" from DF:
BombSurv <- select(BombSurv, -variable)
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
total_extr_vol <- 600
number_bees <- 1
cDNA_eff <- 0.1
rxn_vol <- 3
# create column for genome copies per bee:
BombSurv$genome_copbee <- ((((((BombSurv$quantity_mean / cDNA_eff) / rxn_vol) * BombSurv$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# pull only actin values out of dataframe
ActinOnly <- BombSurv[which(BombSurv$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$genome_copbee)
colnames(ActinDF) <- c("sample_name", "ACT_genome_copbee")
BombSurv <- merge(BombSurv, ActinDF, by="sample_name")
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genome_copbee, na.rm = TRUE)
# create column for normalized genome copies per bee:
BombSurv$norm_genome_copbee <- (BombSurv$genome_copbee/BombSurv$ACT_genome_copbee)*ActinMean
#----------------------------------------------------------------------
#Working with the HB data:
# take only columns that we want:
HbDF <- select(HbDF, sample_name, target_name, Ct_mean_hb, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows from dataframe:
HbDF<-HbDF[!duplicated(HbDF), ]
# remove NTC rows from dataframe:
HbDF<-HbDF[!(HbDF$sample_name=="No Sample"),]
#merge dilutions with PCR data by sample name
HbDF <- merge(HbDF, EcoHbDF, by="sample_name")
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
GITCperbee <- 200
number_bees <- 4
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
HbDF$total_extr_vol <- (GITCperbee * HbDF$num_bees)
# create column for genome copies per bee:
HbDF$genome_copbeeHB <- ((((((HbDF$quantity_mean / cDNA_eff) / rxn_vol) * HbDF$dil.factor) * eluteRNA) / crude_extr) * HbDF$total_extr_vol) / HbDF$num_bees
#----------------------------------------------------------------------
# pull only actin values out of dataframe
ActinOnly <- HbDF[which(HbDF$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$genome_copbeeHB)
colnames(ActinDF) <- c("sample_name", "ACT_genome_copbeeHB")
HbDF <- merge(HbDF, ActinDF, by="sample_name")
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genome_copbeeHB, na.rm = TRUE)
# create column for normalized genome copies per bee:
HbDF$norm_genome_copbeeHB <- (HbDF$genome_copbeeHB/HbDF$ACT_genome_copbeeHB)*ActinMean
HbDF <- select(HbDF, site, target_name, norm_genome_copbeeHB,Ct_mean_hb)
#Make column for all honey bee virus data that identifies each as "honey bees collected and tested"
HbDF$HBCollected <- rep(1,length(HbDF$site))
BombSurv <- merge(BombSurv, HbDF, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
head(select(BombSurv, site, norm_genome_copbeeHB, sample_name, target_name), 200)
# make NAs 0
BombSurv$genome_copbee[is.na(BombSurv$genome_copbee)] <- 0
BombSurv$norm_genome_copbee[is.na(BombSurv$norm_genome_copbee)] <- 0
BombSurv$norm_genome_copbeeHB[is.na(BombSurv$norm_genome_copbeeHB)] <-0
# create a binary vector in dataframe
BombSurv$virusBINY_PreFilter <- ifelse(BombSurv$genome_copbee > 0, 1, 0)
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
head(BombSurv)
View(BombSurv)
IAPVOnly <- BombSurv[which(BombSurv$target_name==c("IAPV")), ]
view(IAPVOnly)
View(IAPVOnly)
splitkeptstuff$IAPV$norm_genome_copbee[which(splitkeptstuff$IAPV$Ct_mean > 50.796)] <- 0
# splitting dataframe by target name
splitkeptstuff <- split(keptstuff, keptstuff$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbee[which(splitkeptstuff$DWV$Ct_mean > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbee[which(splitkeptstuff$BQCV$Ct_mean > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbee[which(splitkeptstuff$IAPV$Ct_mean > 50.796)] <- 0
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 50.796, 0, 1)
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 50.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 50.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
View(splitDF$IAPV)
# calling Burnhams_Fabulous_Data_Cleanser created above and using it on BombSurv data frame:
keptstuff <- Burnhams_Fabulous_Data_Cleanser(BombSurv)
# make NAs 0 in virusBINY
keptstuff$virusBINY [is.na(keptstuff$virusBINY)] <- 0
# splitting dataframe by target name
splitkeptstuff <- split(keptstuff, keptstuff$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbee[which(splitkeptstuff$DWV$Ct_mean > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbee[which(splitkeptstuff$BQCV$Ct_mean > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbee[which(splitkeptstuff$IAPV$Ct_mean > 50.796)] <- 0
# merge split dataframe back into "BombSurv" dataframe:
BombSurv <- rbind(splitkeptstuff$DWV, splitkeptstuff$BQCV, splitkeptstuff$IAPV)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbeeHB[which(splitkeptstuff$DWV$Ct_mean_hb > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbeeHB[which(splitkeptstuff$BQCV$Ct_mean_hb > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbeeHB[which(splitkeptstuff$IAPV$Ct_mean_hb > 50.796)] <- 0
# merge split dataframe back into "BombSurv" dataframe:
BombSurv <- rbind(splitkeptstuff$DWV, splitkeptstuff$BQCV, splitkeptstuff$IAPV)
BombSurv$norm_genome_copbeeHB <- ifelse(BombSurv$HBCollected == "NA", "NA", BombSurv$norm_genome_copbeeHB)
View(BombSurv)
table(BombSurv$target_name, BombSurv$virusBINY)
table(BombSurv$target_name, BombSurv$virusBINY, BombSurv$apiary_near_far)
IAPVOnly <- [which(BombSurv$target_name=="IAPV",)]
IAPVOnly <- BombSurv[which(BombSurv$target_name=="IAPV"),]
table(IAPVOnly$virusBINY,IAPVOnly$apiary_near_far)
table(IAPVOnly$virusBINY)
>>>>>>> origin/master
