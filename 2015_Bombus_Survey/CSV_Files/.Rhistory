QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
xVar <- 1:10
yVar <- runif(10)
dataFrame <- data.frame(xVar,yVar)
dataFrame
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(Z)
}
Regression()
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot()
RegressionPlot(y=c(1,2,3), x=c(4,5,6))
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return()
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return()
}
RegressionPlot()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- cbind(Pop1, Pop2)
MyDF
MyDF <- as.data.frame(cbind(Pop1, Pop2))
MyDF
MyDF$Pop1
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- as.data.frame(cbind(Pop1, Pop2))
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor1
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(cbind(Pop1, Pop2, Factor1, Factor2))
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(Pop1, Pop2, Factor1, Factor2)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
```{r}
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(.85, .85))
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity", col="black",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, o.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 0.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 0.3)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
statsplit <- split(BombSurv, BombSurv$target_name)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
PresAbst_stat <- BombSurv[which(BombSurv$apiary_near_far!="NA"),]
PresAbst_stat <- split(PresAbst_stat, PresAbst_stat$target_name)
chisq.test(PresAbst_stat$BQCV$virusBINY, PresAbst_stat$BQCV$apiary_near_far)
chisq.test(PresAbst_stat$DWV$virusBINY, PresAbst_stat$DWV$apiary_near_far)
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- split(CopDist, CopDist$target_name)
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
hist(log(CopDist$DWV$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$DWV$HBSiteBin[is.na(BombSurvSplit$DWV$HBSiteBin)] <- "No Apis Caught"
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(.85, .85))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity", col="black") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
plot1 <- ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=colors)) +
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.2)) + scale_y_continuous(labels = scales::percent) + theme(legend.position=c(3, 3))
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- split(CopDist, CopDist$target_name)
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist<-CopDist[!CopDist$target_name==("BQCV"),]
CopDist<-CopDist[!CopDist$target_name==("IAPV"),]
hist(log(CopDist$DWV$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
