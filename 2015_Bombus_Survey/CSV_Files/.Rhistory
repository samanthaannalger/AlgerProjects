<<<<<<< HEAD
=======
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google", TRUE, TRUE)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google")
ggmap(vtMap)
vtMap
ggmap(vtMap)
map(vtMap)
install.packages("maps")
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
vtMap
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
ggmap(vtMap)
install.packages("ggproto")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
.75*350
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
BombSurvDF <- read.table("qPCR_results_dataframe.csv", header=TRUE, sep = ",")
EcoSurvDF <- read.table("2015EcoSurveyData.csv", header=TRUE, sep = ",")
HbDF <- read.table("qPCR_results_dataframe_HB.csv", header=TRUE, sep =",")
EcoHbDF <- read.table("2015EcoSurveyData_HB.csv", header=TRUE, sep = ",")
NHBS <- read.csv("NHBS_2015_DataSubset1.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
Diversity <- read.table("Diversity.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
SpacDF <-read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
length(EcoSurvDF$ID)
# check dataframe to see what the fuck is wrong with it:
head(BombSurvDF)
head(EcoSurvDF)
head(HbDF)
head(EcoHbDF)
#------------------------------------------------------------------------
# data cleaning whip dataframe into shape and merge with eco data:
# remove uneeded columns from DF:
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
# take only columns that we want:
BombSurvDF <- select(BombSurvDF, sample_name, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows from dataframe:
BombSurvDF<-BombSurvDF[!duplicated(BombSurvDF), ]
# remove NTC rows from dataframe:
BombSurvDF<-BombSurvDF[!(BombSurvDF$sample_name=="No Sample"),]
#create table to check for non-numeric sample names
table(BombSurvDF$sample_name)
# use grep to remove rows containing non Bombus Survey data:
#Field Experiment
BombSurvDF <- BombSurvDF[-grep("\\F",BombSurvDF$sample_name),]
#Koppert
BombSurvDF <- BombSurvDF[-grep("\\K",BombSurvDF$sample_name),]
#Ross Conrad
BombSurvDF <- BombSurvDF[-grep("\\RC",BombSurvDF$sample_name),]
#BB- BioBest Colonies
BombSurvDF <- BombSurvDF[-grep("\\-",BombSurvDF$sample_name),]
#gamma irradiated pollen
BombSurvDF <- BombSurvDF[-grep("\\Pollen",BombSurvDF$sample_name),]
#No template control
BombSurvDF <- BombSurvDF[-grep("\\NTC",BombSurvDF$sample_name),]
#Gblock
BombSurvDF <- BombSurvDF[-grep("\\Gblock",BombSurvDF$sample_name),]
# make sample name a numeric variable:
BombSurvDF$sample_name <- as.numeric(as.character(BombSurvDF$sample_name))
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
```
##Prevelence of viruses in bumble bees
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
```
##Prevalence by bumble bee species:
**FIGURES:**
```{r}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
---
title: "BombSurv2015"
author: "Samantha Alger & Alex Burnham"
date: "October 27, 2016"
output:
pdf_document:
fig_height: 5.5
fig_width: 7
html_document: default
---
**Metadata**
**Author:** Samantha Alger & Alex Burnham
**Date:** 27 October 2016
**Data Set:** These data were collected during the a 2015 Bumble Bee Survey in Vermont by Samantha Alger and Alex Burnham with all testing is being done at the University of Vermont
**Data Source:** 2015 Bumble Bee Survey
**Funding Source:** Garden Club of America, Pollinator Partnership, Fabri Fiahlo (UVM), Roger Williams Park Zoo Sophie Danforth Conservation Fund.
**Data Collection:** Bumble bees were netted from flowers at field sites.
**Columns:** (from left to right) Site ID, Target (Actin, DWV, IAPV, or BQCV), sample ID, From the qPCR results: Ctmean, Ctsd, quantity mean, quantitysd, Run # (QPCR), Date specimen was collected, Field ID, Bee species, plant the bee was caught on, date the specimen was processed in the lab, was pollen found on the leg and collected (0-no, 1- yes), dil.factor (RNA diluted), apiary present/not present at site (1, 0), genome copy for target (not normalized), ACTIN genome copy, normalized target genome copy (normalized using ACTIN), 6-10 Honey Bees were collected at each site, homogenized and assayed for viruses, 'norm_genome_copbeeHB' is the normalized genome copy for honey bee for the target specified, 'CTmeanhb' is the CT value for the honey bee for each target (from qpcr data), 'HB collected' is whether honeybees were collected and processed at that site, 1 or NA, virus 'BINYPreFilter' is whether the bumble bee was positive for the virus of interest, 'virusBINY' is whether the bumble bee was positive for the virus but takes into accont the limit of detection for each target, 'HB_Abun' is # of honey bees over total number bee observed- taken from bee abundance survey at each site. 'HBSiteBin' is for DWV data only. Honey Bee virus load results showed two distinct groups 'high' (VL) and 'low' (VL).
**Rows:** Bumble bee specimens
**Missing values:** NA
---
##Preliminaries:
```{r}
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
```
##Prevelence of viruses in bumble bees
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
>>>>>>> origin/master
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
<<<<<<< HEAD
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
x <- split(viralLoadDF, viralLoadDF$target_name)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
print(viralLoadDF)
write.csv(viralLoadDF, file="MixedModelDF.csv")
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod4 <- glmmPQL(data=x$DWV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod4)
mod5 <- glmmPQL(data=viralLoadDF, fixed = BombMeanNA~(apiary_near_far + sumApiaries) * target_name, random = ~ 1 | site, family = gaussian)
summary(mod5)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod4 <- glmmPQL(data=x$DWV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod4)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far*Species, random = ~ 1 | site, family = gaussian)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far * species, random = ~ 1 | site, family = gaussian)
head(x$BQCV)
head(BombSurv)
DFsplit <- split(BombSurv, BombSurv$target_name)
DFsplit$BQCV$HBSiteBin
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = family = binomial (link = "logit"))
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = binomial (link = "logit"))
mod3
summary(mod3)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod3)
x$BQCV$apiary_near_far
str(x$BQCV)
x$BQCV$apiary_near_far <- as.factor(x$BQCV$apiary_near_far)
str(x$BQCV)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod3)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod3)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod3)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod)
viralLoadDF
DFsplit$BQCV
head(DFsplit$BQCV)
mod5 <- glmmPQL(data=DFsplit$BQCV, fixed = virusBINY~apiary_near_far, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod5)
mod5 <- glmmPQL(data=BombSurv, fixed = virusBINY~apiary_near_far*target_name, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod5)
BombSurv$target_name
mod6 <- glmmPQL(data=BombSurv, fixed = norm_genome_copbee~apiary_near_far+target_name, random = ~ 1 | site, family = binomial (link = "logit"))
mod6 <- glmmPQL(data=DFsplit$DWV, fixed = norm_genome_copbee~apiary_near_far, random = ~ 1 | site, family = gaussian())
summary(mod6)
mod6 <- glmmPQL(data=DFsplit$DWV, fixed = log(norm_genome_copbee)~apiary_near_far, random = ~ 1 | site, family = gaussian())
summary(mod6)
mod6 <- glmmPQL(data=DFsplit$DWV, fixed = norm_genome_copbee~apiary_near_far, random = ~ 1 |site + species, family = gaussian())
summary(mod6)
library(lme4)
lmermod <- lmer(data=data=x$DWV, formula = BombPrev~apiary_near_far + (apiary_near_far | site))
lmermod <- lmer(data=x$DWV, formula = BombPrev~apiary_near_far + (apiary_near_far | site))
lmermod <- lmer(data=x$DWV, formula = BombPrev~apiary_near_far + | site)
lmermod <- lmer(data=x$DWV, formula = BombPrev~apiary_near_far + (apiary_near_far | site))
lmermod <- lmer(data=DFsplit$DWV, formula = BombPrev~apiary_near_far + (apiary_near_far | site))
lmermod <- lmer(data=DFsplit$DWV, formula = VirusBINY~apiary_near_far + (apiary_near_far | site))
lmermod <- lmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (apiary_near_far | site))
summary(lmermod)
lmermod
aov(lmermod)
anova(mermod)
anova(lmermod)
x<-anova(lmermod)
summary(x)
x<-anova(lmermod)
summary(x)
x<-aov(lmermod)
summary(x)
lmermod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (apiary_near_far | site))
lmermod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (apiary_near_far | site), family=binomial(link = "logit"))
lmermod
summary(lmermod)
lmermod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1 | site), family=binomial(link = "logit"))
summary(lmermod)
DFsplit$BQCV$virusBINY
lmermod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1|site), family=binomial(link = "logit"))
lmermod <- glmer(data=DFsplit$BQCV, formula = norm_genome_copbee~apiary_near_far + (1|site), family=binomial(link = "logit"))
lmermod1 <- glmer(data=DFsplit$BQCV, formula = norm_genome_copbee~apiary_near_far + (1|site), family=gaussian)
summary(lmermod1)
lmermod1 <- lmer(data=DFsplit$BQCV, formula = norm_genome_copbee~apiary_near_far + (1|site))
summary(lmermod1)
lmermod1 <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ apiary_near_far + (1|site))
summary(lmermod1)
lmermod1.null <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ 1 + (1|site), REML = FALSE)
lmermod1 <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ apiary_near_far + (1|site), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
DFsplit$DWV
head(DFsplit$DWV)
lmermod1.null <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DFsplit$DWV, formula = norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"))
summary(lmermod)
statsplit <- split(BombSurv, BombSurv$target_name)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
library(lme4)
lmermod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"))
summary(lmermod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"))
summary(BQCVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"))
summary(DWVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"), REML = TRUE)
DWVpos <- subset(DFsplit$DWV, virusBINY==1)
DWVpos
DWVpos$X
DWVpos$virusBINY
hist(DWVpos$norm_genome_copbee)
hist(DWVpos$norm_genome_copbee, breaks=c(1:10))
hist(DWVpos$norm_genome_copbee, breaks=c(1,10))
DWVpos$log10norm_genome_copbee <- log10(DWVpos$norm_genome_copbee)
DWVpos$log10norm_genome_copbee
DWVpos$norm_genome_copbee
hist(DWVpos$log10norm_genome_copbee)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + sumApiaries + (1|site) + (1|species), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~sumApiaries + (1|site) + (1|species), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~apiary_near_far + sumApiaries + (1|site) + (1|species), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species), family=binomial(link = "logit"))
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species), family=binomial(link = "logit"))
summary(BQCVmod)
DFsplot
DFsplit
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
plot(sumApiaries, virusBINY)
plot(DFsplit$BQCV$sumApiaries, DFsplit$BQCV$virusBINY)
DFsplit$BQCV$sumApiaries
summary(DFsplit$BQCV$sumApiaries)
table(DFsplit$BQCV$sumApiaries)
barplot(DFsplit$BQCV$sumApiaries, DFsplit$BQCV$virusBINY)
plot <- ggplot(DFsplit$BQCV, aes(x=sumApiaries, y=virusBINY, fill=colors))+
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot
plot <- ggplot(DFsplit$BQCV, aes(x=DFsplit$BQCV$sumApiaries, y=DFsplit$BQCV$virusBINY, fill=colors))+
geom_bar(stat="identity") + labs(x=NULL, y = "% Prevalence")
plot
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~sumApiaries + (1|site) + (1|species), family=binomial(link = "logit"))
summary(DWVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (1|site) + (1|species), family=binomial(link = "logit"))
summary(DWVmod)
DWVpos <- subset(DFsplit$DWV, virusBINY==1)
DWVpos$log10norm_genome_copbee <- log10(DWVpos$norm_genome_copbee)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
SpacDat <- read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
head(SpacDat)
SpacDat[,c("site", "lat", "long")]
SpacDat <- SpacDat[,c("site", "lat", "long")]
SpacDat
BombSurv <- merge(BombSurv, SpacDat, by="site")
BombSurv
BombSurv$lat.y
DFsplit <- split(BombSurv, BombSurv$target_name)
DFsplit
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
x <- split(viralLoadDF, viralLoadDF$target_name)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
print(viralLoadDF)
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~apiary_near_far+sumApiary, random = ~ 1 | site, family = gaussian)
summary(mod)
mod1 <- glmmPQL(data=x$BQCV, fixed = BombMeanNA~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod1)
x$BQCV$apiary_near_far <- as.factor(x$BQCV$apiary_near_far)
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod3)
DFsplit <- split(BombSurv, BombSurv$target_name)
DFsplit
mod5 <- glmmPQL(data=BombSurv, fixed = virusBINY~apiary_near_far*target_name, random = ~ 1 | site, family = binomial (link = "logit"))
summary(mod5)
mod6 <- glmmPQL(data=DFsplit$DWV, fixed = norm_genome_copbee~apiary_near_far, random = ~ 1 |site + species, family = gaussian())
summary(mod6)
DFsplit$BQCV$HBSiteBin
mod3 <- glmmPQL(data=x$BQCV, fixed = BombPrev~apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod3)
mod4 <- glmmPQL(data=x$DWV, fixed = BombPrev~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod4)
library(lme4)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
DWVpos <- subset(DFsplit$DWV, virusBINY==1)
DWVpos$log10norm_genome_copbee <- log10(DWVpos$norm_genome_copbee)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"), glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species))
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species))
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1, REML = FALSE)
lmermod1.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
lmermod1 <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(lmermod1.null,lmermod1)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
BQCVpos <- subset(DFsplit$BQCV, virusBINY==1)
BQCVpos$log10norm_genome_copbee <- log10(BQCVpos$norm_genome_copbee)
BQCVpos$log10norm_genome_copbee
hist(BQCVpos$log10norm_genome_copbee)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
BQCVpos <- subset(DFsplit$BQCV, virusBINY==1)
BQCVpos$log10norm_genome_copbee <- log10(BQCVpos$norm_genome_copbee)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
DWVpos <- subset(DFsplit$DWV, virusBINY==1)
DWVpos$log10norm_genome_copbee <- log10(DWVpos$norm_genome_copbee)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
DWVpos <- subset(DFsplit$DWV, virusBINY==1)
DWVpos$log10norm_genome_copbee <- log10(DWVpos$norm_genome_copbee)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
coef(DWVvl)
BQCVpos <- subset(DFsplit$BQCV, virusBINY==1)
BQCVpos$log10norm_genome_copbee <- log10(BQCVpos$norm_genome_copbee)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far (1|site) + (1|species), REML = FALSE)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
coef(DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
coef(DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
BQCVpos <- subset(DFsplit$BQCV, virusBINY==1)
BQCVpos$log10norm_genome_copbee <- log10(BQCVpos$norm_genome_copbee)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ apiary_near_far + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ sumApiaries + apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY~apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ sumApiaries + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ apiary_near_far + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species)+ (1|lat) + (1|long), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species)+ (1|lat) + (1|long), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ shannonDIV + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ shanonDIV + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
str(DFsplit$DWV)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ ShannonDIV + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ Density + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
DWVmod <- glmer(data=BombSurv, formula = virusBINY ~ Density * target_name + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ ShannonDIV + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
BQCVmod <- glmer(data=DFsplit$BQCV, formula = virusBINY ~ Density + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(BQCVmod)
DWVmod <- glmer(data=DFsplit$DWV, formula = virusBINY ~ norm_genome_copbeeHB + (1|site) + (1|species) + (1|lat) + (1|long), family=binomial(link = "logit"))
summary(DWVmod)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQCVpos <- subset(DFsplit$BQCV, virusBINY==1)
BQCVpos$log10norm_genome_copbee <- log10(BQCVpos$norm_genome_copbee)
BQVCvl.null <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
BQVCvl <- lmer(data=BQCVpos, formula = log10norm_genome_copbee ~ norm_genome_copbeeHB + (1|site) + (1|species), REML = FALSE)
anova(BQVCvl.null,BQVCvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
DWVvl.null <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ 1 + (1|site) + (1|species), REML = FALSE)
DWVvl <- lmer(data=DWVpos, formula = log10norm_genome_copbee ~ sumApiaries + (1|site) + (1|species), REML = FALSE)
anova(DWVvl.null,DWVvl)
library(tcltk)
=======
summarySE(BombSurv)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
}
library(ggmap)
library(ggplot2)
get_map(location="vermont")
vermont <- get_map(location="vermont")
vermont
?ggmap
ggmap(vermont,extent="normal")
vermont <- map_data("vt")
vermont <- map_data("vermont")
vermont <- map_data("state")
vermont <- subset(vermont, region %in% c("vermont"))
library(ggplot)
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
vermont <- subset(states, region %in% c("vermont"))
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")  +
theme_nothing()
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "grey", color = "black")  +
theme_nothing()
vermont <- ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "grey", color = "black")  +
theme_nothing()
vermont <- get_map(location="vermont", zoom = 6)
ggmap(vermont,extent="normal")
# Working with ggmap/ggplot2
# 2017 03 31
vermont <- get_map(location="vermont", zoom = 10)
ggmap(vermont,extent="normal")
vermont <- get_map(location="vermont", zoom = 9)
ggmap(vermont,extent="normal")
vermont <- ggmap("vermont", extent = "device", legend = "topleft")
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
#install package for Morans.i
install.packages(ape)
# get programs
library(ape)
# read in data:
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialData <- read.csv("2015SurveyLocations.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(SurvData)
head(SpatialData)
#merge the two datafiles by Site name
SpatialData <- merge(SurvData,SpatialData, by="site")
#Split by viruses
SpatDWV <- subset(SpatialData, target_name=="DWV")
SpatBQ <- subset(SpatialData, target_name=="BQCV")
#not normal! transform data?
#DWV:
#hist(SpatDWV$BombPrev)
#hist(SpatBQ$BombPrev)
#SpatDWV$logPrev <- log(SpatDWV$BombPrev)
#hist(SpatDWV$logPrev)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
#install package for Morans.i
install.packages(ape)
# get programs
library(ape)
# read in data:
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialData <- read.csv("2015SurveyLocations.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(SurvData)
head(SpatialData)
#merge the two datafiles by Site name
SpatialData <- merge(SurvData,SpatialData, by="site")
#Split by viruses
SpatDWV <- subset(SpatialData, target_name=="DWV")
SpatBQ <- subset(SpatialData, target_name=="BQCV")
```
#################################################################
Calculating Moran's I
#################################################################
Steps:
1. Generate a distance matrix
2. take inverse of the matrix values
and replace the diagonal entries with zero
3. repeat for each virus (but not necessary)
```{r}
#Fo:
DWV.dists <- as.matrix(dist(cbind(SpatDWV$long, SpatDWV$lat)))
DWV.dists.inv <- 1/DWV.dists
diag(DWV.dists.inv) <- 0
DWV.dists.inv[1:5, 1:5]
#For BQCV, (this is actually same as above):
BQ.dists <- as.matrix(dist(cbind(SpatBQ$long, SpatBQ$lat)))
BQ.dists.inv <- 1/BQ.dists
diag(BQ.dists.inv) <- 0
BQ.dists.inv[1:5, 1:5]
#Calculating Morans i:
Moran.I(SpatDWV$BombPrev, DWV.dists.inv)
Moran.I(SpatBQ$BombPrev, BQ.dists.inv)
library(ggmap)
library(ggplot2)
library(ggplot)
vermont <- get_map(location="vermont", zoom = 9)
ggmap(vermont,extent="normal")
#Get map of all states
states <- map_data("state")
#plot map of all states
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
#subset just vermont
vermont <- subset(states, region %in% c("vermont"))
#plot the state of vermont
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
#get rid of the background with theme_nothing()
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "grey", color = "black")  +
theme_nothing()
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing()
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
?write.csv
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
#install package for Morans.i
install.packages(ape)
# get programs
library(ape)
# read in data:
SurvData <- read.csv("MixedModelDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
SpatialData <- read.csv("2015SurveyLocations.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(SurvData)
head(SpatialData)
#merge the two datafiles by Site name
SpatialData <- merge(SurvData,SpatialData, by="site")
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
write.csv(SpatialData, file="spatialMerge.csv")
read.table(spatialMerge.csv)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
#Read in data:
spatDat <- read.table(spatialMerge.csv)
spatDat <- read.csv(spatialMerge.csv)
spatDat <- read.csv("spatialMerge.csv", , header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(spatDat)
library(ggmap)
library(ggplot2)
library(ggplot)
source('~/ggmap.R', echo=TRUE)
source('~/ggmap.R', echo=TRUE)
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
#subset just vermont
vermont <- subset(states, region %in% c("vermont"))
vermont
#plot the state of vermont
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
#get rid of the background with theme_nothing()
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing()
spatDat <- read.csv("spatialMerge.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
str(spatDat)
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing()
+ geom_point(data = spatDat, mapping = aes(x = long, y = lat), color = "red")
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing() +
coord_fixed(1.3)
vtBase <- ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing() +
coord_fixed(1.3)
vtBase <- ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing()
vtBase <- ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "white", color = "black")  +
theme_nothing() +
coord_fixed(1.3)
ggplot(data = vermont) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
vtBase
View(spatDat)
ggmap(vtBase) +
geom_point(aes(x = long,
y = lat,
colour = apiary_near_far),
data = spatDat,
alpha = 0.6,                     # `alpha=` sets the transparency of `geom_point()`, from 0 (transparent) to 1 (opaque)
size = 2) +                      # `size=` sets the diameter of `geom_point()`
scale_colour_manual(values=c("red", "blue")
+ geom_point(data = spatDat, mapping = aes(x = long, y = lat), color = "red"))
library(ggmap)
library(ggplot2)
library(ggplot)
ggmap(vtBase) +
geom_point(aes(x = long,
y = lat,
colour = apiary_near_far),
data = spatDat,
alpha = 0.6,                     # `alpha=` sets the transparency of `geom_point()`, from 0 (transparent) to 1 (opaque)
size = 2) +                      # `size=` sets the diameter of `geom_point()`
scale_colour_manual(values=c("red", "blue")
+ geom_point(data = spatDat, mapping = aes(x = long, y = lat), color = "red"))
ggmap(vtBase) +
geom_point(aes(x = long,
y = lat,
colour = apiary_near_far),
data = spatDat,
alpha = 0.6,                     # `alpha=` sets the transparency of `geom_point()`, from 0 (transparent) to 1 (opaque)
size = 2) +                      # `size=` sets the diameter of `geom_point()`
scale_colour_manual(values=c("red", "blue"))
ggmap(vtBase) +
geom_point(data= spatDat, mapping= aes(x = long, y = lat,
color = red))
bbox <- c(min(spatDat$long) - 2,
min(spatDat$lat) - 2,
max(spatDat$long) + 2,
max(spatDat$lat) + 2
)
vt <- get_map(location = bbox, source = "stamen", maptype = "terrain")
install.packages("readr") # Read in files
install.packages("dplyr") # Formatting data
install.packages("rgdal") # Manipulate map data
install.packages("dplyr")
install.packages("devtools")
library(readr)
library(dplyr)
library(rgdal)
library(devtools)
devtools::install_github("dkahle/ggmap") # Plot map data, download map tiles from online sources
library(ggmap)
bbox <- c(min(spatDat$long) - 2,
min(spatDat$lat) - 2,
max(spatDat$long) + 2,
max(spatDat$lat) + 2
)
vt <- get_map(location = bbox, source = "stamen", maptype = "terrain")
ggplot(spatDat, aes(x = decimallongitude, y = decimallatitude, group = apiary_near_far)) +
geom_point(aes(color = apiary_near_far))
ggplot(spatDat, aes(x = long, y = lat, group = apiary_near_far)) +
geom_point(aes(color = apiary_near_far))
ggmap(vt)
vt <- get_map(location = bbox, source = "stamen", maptype = "terrain")
vt <- get_map(location = bbox, source = "stamen", maptype = "toner")
ls()
rm(list=ls())
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
#Read in data:
spatDat <- read.csv("spatialMerge.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(spatDat)
#get packages:
library(ggmap)
library(ggplot2)
library(ggplot)
library(readr)
library(dplyr)
library(rgdal)
library(devtools)
devtools::install_github("dkahle/ggmap") # Plot map data, download map tiles from online sources
library(ggmap)
bbox <- c(min(spatDat$long) - 2,
min(spatDat$lat) - 2,
max(spatDat$long) + 2,
max(spatDat$lat) + 2
)
vt <- get_map(location = bbox, source = "stamen", maptype = "toner")
vt <- get_map(location = bbox, source = "google", maptype = "terrain")
vt <- get_map(location = bbox, source = "google", maptype = "satellite")
bbox
vt <- get_map(location = bbox, source = "google", maptype = "satellite")
bbox <- c(min(spatDat$long) - 1,
min(spatDat$lat) - 1,
max(spatDat$long) + 1,
max(spatDat$lat) + 1
)
vt <- get_map(location = bbox, source = "google", maptype = "satellite")
vt <- get_map(location = bbox, source = "stamen", maptype = "terrain")
bbox
vt <- get_map(location = c( long = -74.33909, lat = 43.15842), source = "stamen", maptype = "terrain")
head(spatDat)
bbox
vt <- get_map(location = c( lon = -74.33909, lat = 43.15842), zoom = "auto" source = "stamen", maptype = "terrain")
vermont <- get_map(location = c( lon = -74.33909, lat = 43.15842), source = "stamen", maptype = "terrain
")
vermont <- get_map(location = c( lon = -74.33909, lat = 43.15842), source = "stamen", maptype = "terrain")
get_map(location = c( lon = -74.33909, lat = 43.15842), source = "stamen", maptype = "terrain")
vermont <- get_map(location="vermont", zoom = 9)
vermont <- get_map(location="vermont", zoom = 9)
ggmap(vermont,extent="normal")
library(ggmap)
library(ggplot2)
library(ggplot)
vermont <- get_map(location="vermont", zoom = 9)
ggmap(vermont,extent="normal")
ls()
rm(list=ls())
library(ggmap)
library(ggplot2)
library(ggplot)
vermont <- get_map(location="vermont", zoom = 9)
(ggmap)
library(ggmap)
vermont <- get_map(location="vermont", zoom = 9)
>>>>>>> origin/master
