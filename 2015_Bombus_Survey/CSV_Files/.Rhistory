HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
library(ggmap)
install.packages("ggmap")
install.packages("ggplot2")
library(ggmap)
library(ggplot2)
Vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google", TRUE, TRUE)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google")
ggmap(vtMap)
vtMap
ggmap(vtMap)
map(vtMap)
install.packages("maps")
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
vtMap
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
ggmap(vtMap)
install.packages("ggproto")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
.75*350
x <- c("ggmap", "rdgal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x)
lapply(x, library, character.only = TRUE)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',configure.args="--with-proj-include=/sw/proj/4.9.2/include --with-proj-lib=/sw/proj/4.9.2/lib")
libray(rdgal)
library(rdgal)
require(rdgal)
library(tmap) # load tmap package
tmap_mode="plot"
# load spatial data included in the tmap package
data("World", "metro")
# Try typing head(World$...) or head(metro@...) to see the type of data...
head(World@data)
quick plot example:
qtm(World, fill = "income_grp", text = "iso_a3", text.size = "AREA") # use "World$" to see the two attributes: income_grp and iso_a3, text.size= area: text is sized increasingly with coutry area size.
citation("vegan")
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
table(BombSurv$site,BombSurv$species)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
NegStrand <- read.csv("NegStrd_PosVirus_2015.csv", header=TRUE, stringsAsFactors=FALSE)
SiteDat <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
head(SiteDat)
NegStrand <- read.csv("NegStrd_PosVirus_2015.csv", header=TRUE, stringsAsFactors=FALSE)
head(NegStrand)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
#code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
head(BombSurv)
#code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee, site, apiary_near_far,sumColonies )
change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
write.csv(PosList, file = "PosVirus_NegStrd_withSites.csv")
#just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
# read nanodrop data:
drop <- read.table("BombSurv_RNANanodropResults.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
# find number of samples in data set that are postive:
length(PosList$ID[!duplicated(PosList$ID)])
# cross refernce entire data set
complete <- drop[(drop$ID %in% x),]
read.csv("PosVirus_NegStrd_withSites.csv")
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv")
table(PosVirus$site)
table(PosVirus$site, PosVirus$apiary_near_far)
DWVOnly<- PosVirus(which(PosVirus$target_name = "DWV"))
DWVOnly<- PosVirus(which(PosVirus$target_name == "DWV"))
DWVOnly<- which(PosVirus$target_name == "DWV"))
DWVOnly<- which(PosVirus$target_name == "DWV")
head(DWVOnly)
print(DWVOnly)
view(DWVOnly)
View(DWVOnly)
DWVOnly<- PosVirus[PosVirus$target_name=="DWV"]
DWVOnly<- PosVirus[PosVirus$target_name == DWV ]
DWVOnly<- PosVirus[PosVirus$target_name = "DWV" ]
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv")
DWVOnly<- PosVirus[PosVirus$target_name == "DWV" ]
PosVirus <- read.table("PosVirus_NegStrd_withSites.csv")
DWVOnly<- PosVirus[PosVirus$target_name == "DWV" ]
head(DWVOnly)
print(DWVOnly)
View(DWVOnly)
ls()
rm(list=ls())
PosVirus <- read.table("PosVirus_NegStrd_withSites.csv"), header=TRUE, sep = ",", stringsAsFactors=FALSE
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv"), header=TRUE, sep = ",", stringsAsFactors=FALSE
PosVirus <- read.table("PosVirus_NegStrd_withSites.csv"), header=TRUE, stringsAsFactors=FALSE
PosVirus <- read.table("PosVirus_NegStrd_withSites.csv", header=TRUE, stringsAsFactors=FALSE)
table(PosVirus$site, PosVirus$apiary_near_far)
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv", header=TRUE, stringsAsFactors=FALSE)
table(PosVirus$site, PosVirus$apiary_near_far)
DWVOnly<- PosVirus[PosVirus$target_name == "DWV" ]
DWVOnly<- PosVirus[PosVirus$target_name == "DWV", ]
View(DWVOnly)
BQCVOnly<- PosVirus[PosVirus$target_name == "BQCV", ]
View(BQCV)
View(BQCVOnly)
Table(DWVOnly$site)
table(DWVOnly$site)
table(BQCVOnly$site)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
#code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee, site, apiary_near_far,sumColonies, species)
change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
write.csv(PosList, file = "PosVirus_NegStrd_withSites.csv")
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv", header=TRUE, stringsAsFactors=FALSE)
table(PosVirus$site, PosVirus$apiary_near_far)
DWVOnly<- PosVirus[PosVirus$target_name == "DWV", ]
View(DWVOnly)
table(DWVOnly$site)
BQCVOnly<- PosVirus[PosVirus$target_name == "BQCV", ]
table(BQCVOnly$site)
table(BQCVOnly$site, BQCVOnly$species)
head(BombSurv)
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
# read nanodrop data:
drop <- read.table("BombSurv_RNANanodropResults.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
head(drop)
# read nanodrop data:
drop <- read.csv("BombSurv_RNANanodropResults.csv",
header=TRUE,
stringsAsFactors=FALSE)
# read nanodrop data:
drop <- read.csv("BombSurv_RNANanodropResults.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
# find number of samples in data set that are postive:
length(PosList$ID[!duplicated(PosList$ID)])
# cross refernce entire data set
complete <- drop[(drop$ID %in% x),]
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
#code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee, site, apiary_near_far,sumColonies, species)
#change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
write.csv(PosList, file = "PosVirus_NegStrd_withSites.csv")
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(VideoData)
# read in data:
VideoData <- read.table("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VideoData <- read.table("PlantTransVideoData.csv", header=TRUE, stringsAsFactors=FALSE)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data:
VideoData <- read.table("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="#")
head(VideoData)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="#")
View(VideoData)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="#")
head(VideoData)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="#")
---
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="#")
head(VideoData)
---
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="###")
head(VideoData)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="###")
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/ImidPilot/")
###########################################################################################
# Read in Virus Data:
ImidVirus <- read.table("csv_files/ImidqPCR_RawResults.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Read in Lab Data
ImidStat <- read.table("csv_files/ImidLabData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# source my functions
source("Scripts/BurnhamFunctions.R")
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
# preliminary data cleaning
ImidVirus <- PrelimClean(data=ImidVirus)
# take only columns that we want:
data <- select(ImidVirus, sample_name, Treatment, dil.factor, ID)
# use dilution factors to calculate normalized virus load
ImidVirus <- VirusNorm(data=ImidVirus, number_bees = 1)
# use actin to normalize normalized viral load
ImidVirus <- actinNormal(data=ImidVirus)
# remove actin from data frame
ImidVirus <- ImidVirus[!(ImidVirus$target_name=="ACTIN"),]
# adds virus binary data and makes norm genome copy 0 if above threashold CT
ImidVirus <- CT_Threash(data=ImidVirus)
#Fixes Virus Binary column
ImidVirus$virusBINY <- ifelse(ImidVirus$NormGenomeCopy > 0, 1, 0)
# create full ID to check for inccorrect duplicates
ImidVirus$fullID <- with(ImidVirus, paste0(sample_name, target_name))
# remove duplicates for examples with Cts above threashold (i.e. both coerced to 0s)
ImidVirus <- ImidVirus[!duplicated(ImidVirus$fullID), ]
# merge the virus data to the main dataset
ImidVirus <- VirusMerger2000(data1 = ImidVirus, data2 = ImidStat)
# log transform virus data:
ImidVirus$logDWV <- log(ImidVirus$DWVload + 1)
ImidVirus$logBQCV <- log(ImidVirus$BQCVload + 1)
##############################################################
#figure for DWV load:
#Select only DWV positive samples
ImidDWV <- ImidVirus[ which(ImidVirus$DWVbinary=="1"), ]
#Checking out by plant species
Imid <- ddply(ImidDWV, c("Treatment"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1", "black")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 20))
##############################################################
##############################################################
#figure for DWV load:
#Select only DWV positive samples
#Checking out by plant species
n = length(logBQCV),
sd = sd(logBQCV, na.rm=TRUE),
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1", "black")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 15))
#Checking out by plant species
DWVPrev <- ddply(ImidVirus, c("Treatment"), summarise,
n = length(DWVbinary),
mean = mean(DWVbinary, na.rm=TRUE),
sd = sd(DWVbinary, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1", "black")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(DWVPrev, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position= "none") + coord_cartesian(ylim = c(0, .25)) + scale_y_continuous(labels = scales::percent)
##############################################################
#figure for DWV load:
#Select only DWV positive samples
ImidDWV <- ImidVirus[ which(ImidVirus$DWVbinary=="1"), ]
#Checking out by treatment
Imid <- ddply(ImidDWV, c("Treatment"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1", "black")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Treatment", y = "log(Virus load) ")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 20))
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Treatment", y = "log(Virus load) ")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 25))
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Treatment", y = "log(Virus load) ")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 15))
x <- aov(data=ImidDWV, logDWV~Treatment)
summary(x)
head(ImidDWV)
x <- aov(data=ImidDWV, logDWV~Treatment)
summary(x)
table(ImidDWV$Treatment, ImidDWV$DWVbinary)
##
View(ImidDWV)
##############################################################
#figure for DWV load:
#Select only DWV positive samples
ImidBQCV <- ImidVirus[ which(ImidVirus$BQCVbinary=="1"),
#Checking out by plant species
n = length(logBQCV),
sd = sd(logBQCV, na.rm=TRUE),
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1", "black")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 15))
table(ImidVirus$DWVbinary, ImidVirus$BQCVbinary)
View(ImidVirus)
##############################################################
#figure for DWV load:
#Select only DWV positive samples
ImidBQCV <- ImidVirus[ which(ImidVirus$BQCVbinary=="1"),
##############################################################
#figure for DWV load:
#Select only DWV positive samples
ImidBQCV <- ImidVirus[ which(ImidVirus$BQCVbinary=="1"), ]
##############################################################
#figure for DWV load:
#Select only DWV positive samples
ImidBQCV <- ImidVirus[ which(ImidVirus$BQCVbinary=="1"), ]
#Checking out by plant species
Imid <- ddply(ImidBQCV, c("Treatment"), summarise,
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1", "black")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 15))
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(Imid, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Treatment", y = "log(virus load)")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 20))
x <- aov(data=ImidBQCV, logBQCV~Treatment)
summary(x)
---
title: "PlantsTransExp"
author: "Samantha A. Alger"
date: "2/27/2018"
output: pdf_document
---
# Clear memory of characters:
ls()
---
title: "PlantsTransExp"
author: "Samantha A. Alger"
date: "2/27/2018"
---
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, comment.char="#")
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(VideoData)
# read in data:
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
head(VideoData)
table(VideoData$expID)
visitations <- table(VideoData$expID)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
#code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee, site, apiary_near_far,sumColonies, species)
#change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
PosVirus <- read.csv("PosVirus_NegStrd_withSites.csv", header=TRUE, stringsAsFactors=FALSE)
table(PosVirus$site, PosVirus$apiary_near_far)
table(PosVirus$target_name)
