cat(x, sep="\t")
# Line Break separator
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
x <- c(1:10)
print(x)
# Space separator
cat(x)
# Multi-space separator, and adds a period between each number
cat(x, sep=" . ")
# Separates each number by a tab
cat(x, sep="\t")
# Separates each number by a line break
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
y <- sample(c("red", "blue"), N, TRUE)
y
# use cat to concatenate the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab
cat(x[1], y[1], sep="\t")
z <- cat(x[1], y[1], sep="\t")
z
cat(z, file="data1.txt", append=TRUE)
cat(z)
y <- sample(c("red", "blue"), 10, TRUE)
y
# use cat to concatenate and print the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab.
cat(x[1], y[1], sep="\t")
help(rev)
x <- runif(10)
x
rev(x)
x <- c("red", "orange", "blue")
#check it out
print(x)
x <- c("red","orange","blue")
#check it out
print(x)
#now reverse the order of the vector and print
rev(x)
helo(cumprod)
help(cumprod)
cumprod(x)
x <-c(3,5,10)
cumprod(x)
3*5*10
help(write.csv)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:10
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
varA <- 1:12
varB <- rep(c("Con", "LowN", "HighN"), each=4) #4 values of each
varC <- runif(12)
dFrame <- data.frame(varA,varB,varC,stringsAsFactors = FALSE)
print(dFrame)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
B <- rep(c("red","blue","green","orange"), each =2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
data.frame(A,B,stringsAsFactors = FALSE)
C <-runif(16)
data.frame(A,B,C,stringsAsFactors = FALSE)
write.csv(data, "data.csv", row.names = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "blue", use "cyan"
write.csv(data, "data.csv", row.names = FALSE, blue = "cyan")
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "NA", return blank cell
write.csv(data, "data.csv", row.names = FALSE, na = "")
read.csv("data.csv")
help(rep_len)
rep_len(c("finch","thrush","warbler"),20)
help(read.delim)
help(all.equal)
sample()
help(sample)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 100, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 2000, replace = TRUE)
sample(x, 2000, replace = FALSE)
sample(x, 1500, replace = TRUE)
help(setequal)
x <- 1:100
y <- 2:101
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("finch","thrush","warbler"),20)
setequal(birds,birds2)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("owl","thrush","warbler"),20)
setequal(birds,birds2)
x <- sample(1:100, size=10)
y <- sample(1:100, size=10)
#use setequal to check if the two vectors are the same.
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("NA","thrush","warbler"),20)
#using setequal returns a FALSE value because there is one value different
setequal(birds,birds2)
help([)])
help([)
data = c(1,3,5,7,3,2)
#Using brackets will return the third value of the vector
data[3]
A <- 1:16
A <- 1:16
A <- 1:16
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
print(data)
data[1,2]
help(which)
sample(x, 1000, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 1000, replace = FALSE)
x <- runif(1:10)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 4, replace = FALSE)
# if you sample with replacement, you can sample at a size larger than the original object
#in this case, there will be numbers repeated
sample(x, 11, replace = TRUE)
```
shiny::runApp('AlgerProjects/demo')
# Multi-space separator
cat(x, sep=" . ")
data <- rep("blue","green", each=3)
rep_len(c("finch","thrush","warbler"),20)
bird<- rep_len(c("finch","thrush","warbler"),20)
which=="finch"
which(bird =="finch")
help(which)
x <- c(1,NA,2,NA,3)
#which positions are the
which(!is.na(x))[3]
help(atan2)
help(atan2)
help(atan2)
atan2(3,4)
hep(assign)
help(assign)
help(signif)
sigif(7.462527,digits=4)
signif(7.462527,digits=4)
lst <- list('one','two','three')
a <- lst[1]
class(a)
## returns "list"
a <- lst[[1]]
class(a)
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
chr [1:3] "a" "b" "c"
str(alist[1])
List of 1
$ : chr [1:3] "a" "b" "c"
str(alist[[1]][1])
chr "a"
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
str(alist[1])
alist[[1]]
alist[1]
alist[[1]]
alist[1]
lst <- list('one','two','three')
a <- lst[1]
class(a)
a <- lst[[1]]
class(a)
lst[[2]]
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
View(HardyWeinberg)
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
pp <- 0.7
HardyWeinberg(pp)
HardyWeinberg(1.2)
HardyWeinberg2 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
return("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Plant Trans Exp_____________________
# using ddply to summarize data for treatment groups:
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
#Re-ordering the DF for the graph
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("HB + Bombus","Bombus Only","Pre Experiment"))
#creating the figure
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
# aes: aesthetics
# geom_bar = type of graph
# stat="identity.....dodge())"  part of the code required to make grouped columns
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
#adding additional aesthetics to the figure:
#name....labels...= for legend (if there is a fill)
#theme(legend.position)= puts legend on plot
#coord_cartesian= set axis limits in this case, 0-1 because prevalence
#scale y continuous..= labels as percent
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
```
```{r}
#Checking out virus detected on all treatment plants by plant species (for all experiments)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Looking at differences between the experiments:
#Subsetting the diversity experiment:
plantDiv <- plantTrans[ which(plantTrans$exp=="diversity"), ]
plantAcute <- plantTrans[ which(plantTrans$exp=="acute"), ]
plantComingle <- plantTrans[ which(plantTrans$exp=="comingle"), ]
plantChronic <- plantTrans[ which(plantTrans$exp=="chronic"), ]
#Checking out by plant species
plantTransDiv <- ddply(plantDiv, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$spp[plantTransDiv$spp == "RC"] <- "Red Clover"
plantTransDiv$spp[plantTransDiv$spp == "BFT"] <- "BirdsFoot Trefoil"
plantTransDiv$spp[plantTransDiv$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantTransDiv, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
