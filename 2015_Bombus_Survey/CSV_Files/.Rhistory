<<<<<<< HEAD
#-----------------------------------------------------------------------------------
# looking at a scenario that benefits fitness at the population level:
# order lowest litter to highes and remove the lowest
PopBenVar <- LionDF[order(LionDF$NumCubs),]
PopBenVar <- PopBenVar[-1,]
# find mean number of litter size
AvgPBV <- mean(PopBenVar$NumCubs)
# litter size of indvidual PBV lion:
PBV_litter_size <- AvgPBV
# find mean including behavioral lions offspring
TotalAVG_PBV <- mean(c(PopBenVar$NumCubs, PBV_litter_size))
# finding relitive fitness for this behavioral trait
PBV_Rel_Fit <- PBV_litter_size/TotalAVG_PBV
# relitive fitness is equal to 1 (it is NOT adaptive in this environment)
PBV_Rel_Fit
#-----------------------------------------------------------------------------------
# looking at a scenario that benefits an indivuals fitness:
# choosing a random ineger between 1 and 20 and removing it from the population:
set.seed(276)
IDcubskilled <- as.integer(runif(n=1, min=1, max=20))
IndvBenVar <- LionDF[-IDcubskilled,]
# find mean number of litter size
AvgIBV <- mean(IndvBenVar$NumCubs)
# litter size of Indiviual IBV lion:
IBV_litter_size <- AvgIBV + 2
# find mean including behavioral lions offspring
TotalAVG_IBV <- mean(c(IndvBenVar$NumCubs, IBV_litter_size))
# finding relitive fitness for this behavioral trait
IBV_Rel_Fit <- IBV_litter_size/TotalAVG_IBV
# relitive fitness is greater than 1 (it is adaptive and performs well in this environment)
IBV_Rel_Fit
LionID <- seq(1,20)
NumCubs <- c(4,7,3,8,2,6,4,9,3,3,6,4,7,5,5,6,1,9,12,8)
LionDF <- data.frame(LionID,NumCubs)
print(LionDF)
#-----------------------------------------------------------------------------------
# looking at a scenario that benefits fitness at the population level:
# order lowest litter size to highest and remove the lowest one
PopBenVar <- LionDF[order(LionDF$NumCubs),]
PopBenVar <- PopBenVar[-1,]
# find mean number of litter size
AvgPBV <- mean(PopBenVar$NumCubs)
# litter size of indvidual PBV lion:
Indv_PBV_litter <- AvgPBV
# find mean litter size including PBV lion's offspring
AVG_PBV_litter <- mean(c(PopBenVar$NumCubs, Indv_PBV_litter))
# finding relitive fitness for this behavioral trait
PBV_Rel_Fit <- Indv_PBV_litter/AVG_PBV_litter
# relitive fitness is equal to 1 (it is NOT adaptive in this environment)
PBV_Rel_Fit
#-----------------------------------------------------------------------------------
# looking at a scenario that benefits an indivuals fitness:
# choosing a random ineger between 1 and 20 and removing it from the population:
set.seed(276)
IDcubskilled <- as.integer(runif(n=1, min=1, max=20))
IndvBenVar <- LionDF[-IDcubskilled,]
# find mean number of litter size
AvgIBV <- mean(IndvBenVar$NumCubs)
# litter size of Indiviual IBV lion:
Indv_IBV_litter <- AvgIBV + 2
# find mean including behavioral lions offspring
AVG_IBV_litter <- mean(c(IndvBenVar$NumCubs, Indv_IBV_litter))
# finding relitive fitness for this behavioral trait
IBV_Rel_Fit <- Indv_IBV_litter/AVG_IBV_litter
# relitive fitness is greater than 1 (it is adaptive and performs well in this environment)
IBV_Rel_Fit
LionID <- seq(1,20)
NumCubs <- c(4,7,3,8,2,6,4,9,3,3,6,4,7,5,5,6,1,9,12,8)
LionDF <- data.frame(LionID,NumCubs)
print(LionDF)
#-----------------------------------------------------------------------------------
# looking at a scenario of species-benefit variant (SBV):
# order lowest litter size to highest and remove the lowest one
SpBenVar <- LionDF[order(LionDF$NumCubs),]
SpBenVar <- SpBenVar[-1,]
# find mean number of litter size
AvgSBV <- mean(SpBenVar$NumCubs)
# litter size of indvidual PBV lion:
Indv_SBV_litter <- AvgSBV
# find mean litter size including PBV lion's offspring
AVG_SBV_litter <- mean(c(SpBenVar$NumCubs, Indv_SBV_litter))
# finding relitive fitness for this behavioral trait
SBV_Rel_Fit <- Indv_SBV_litter/AVG_SBV_litter
# relitive fitness is equal to 1 (it is NOT adaptive in this environment)
SBV_Rel_Fit
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69  )
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69  )
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55 )
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
plot(LowHearingIC, HighHearingIC)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
# plot low hearing by high hearing:
plot(x=LowHearingIC, y=HighHearingIC,
#xlim=c(0, 0.55),
#ylim=c(0, 14),
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
grid(col="gray")
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# plot low hearing by high hearing:
plot(x=LowHearingIC, y=HighHearingIC,
#xlim=c(0, 0.55),
#ylim=c(0, 14),
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
grid(col="gray")
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(HighHearingIC~LowHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
z <- summary(LineBF)
Sum1 <- summary(LineBF)
Sum1
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
HighHearingIC <- HighHearingIC * (-1)
# plot low hearing by high hearing:
plot(x=LowHearingIC, y=HighHearingIC,
#xlim=c(0, 0.55),
#ylim=c(0, 14),
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
grid(col="gray")
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(HighHearingIC~LowHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
HighHearingIC <- c(-33.95, -4, -50.5, -49.59, -0.5, -15, -10.25, -10.89, -16.55)
# plot low hearing by high hearing:
plot(x=LowHearingIC, y=HighHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
grid(col="gray")
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(HighHearingIC~LowHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
Sum1
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
HighHearingIC <- c(-33.95, -4, -50.5, -49.59, -0.5, -15, -10.25, -10.89, -16.55)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
#ylab="Low Hearing (independant contrast)",
#xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(HighHearingIC~LowHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
HighHearingIC <- c(-33.95, -4, -50.5, -49.59, -0.5, -15, -10.25, -10.89, -16.55)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
#ylab="Low Hearing (independant contrast)",
#xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
```
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(-11.74, -2.5, -13.75, -8.83, -5.5, -9, -2.75, -7.62, -5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
#ylab="Low Hearing (independant contrast)",
#xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
Sum1
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(-11.74, -2.5, -13.75, -8.83, -5.5, -9, -2.75, -7.62, -5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, 5.25, 24.5, 7.37, 25.31, 4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF2)
```{r}
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, 5.25, 24.5, 7.37, 25.31, 4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF2)
Sum1
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(-39.01, -5, -51.5, -52.48, -5.25, -24.5, -7.37, -25.31, -4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum1 <- summary(LineBF2)
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
Sum1
```{r}
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
IsolationCallIC <- c(-1.49, 2.5, 15.25, 14.51, 8, 10, -6, -9, 4.12)
# plot low hearing by isolation call:
plot(x=LowHearingIC, y=IsolationCallIC,
font.lab=2,
pch=19,
ylab="Isolation Call (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Isolation Call IC by Low Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF3 <- lm(IsolationCallIC~LowHearingIC)
line<-abline(LineBF3, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum2 <- summary(LineBF3)
Sum2
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, -5.25, 24.5, 7.37, 25.31, 4.78)
# plot Echo Location by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum2 <- summary(LineBF2)
Sum2
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.536
Sum1 <- summary(Li
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, -5.25, 24.5, 7.37, 25.31, 4.78)
# plot Echo Location by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.848
Sum2 <- summary(LineBF2)
```{r}
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
IsolationCallIC <- c(-1.49, 2.5, 15.25, 14.51, 8, 10, -6, -9, 4.12)
# plot low hearing by isolation call:
plot(x=LowHearingIC, y=IsolationCallIC,
font.lab=2,
pch=19,
ylab="Isolation Call (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Isolation Call IC by Low Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF3 <- lm(IsolationCallIC~LowHearingIC)
line<-abline(LineBF3, col = "blue", lwd=3)
# summary of model R-square = 0.078
Sum3 <- summary(LineBF3)
$$/frac{E_l}{h_l}$$
$$ \[\frac{E_l}{h_l}\] $$
ringIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.536
Sum1 <- summary(LineBF)
```
print(Sum1)
=======
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
View(HardyWeinberg)
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
pp <- 0.7
HardyWeinberg(pp)
HardyWeinberg(1.2)
HardyWeinberg2 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
return("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
ing ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
make apiary binary a character so we can use it as a factor in the model
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
# using ddply to get summary of virusBINY by species and target name:
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- CopDist[c(23:44),]
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
BombSurv$Date_collected <- as.Date(BombSurv$Date_collected, "%m/%d/%y")
tempsplit <- split(BombSurv, BombSurv$target_name)
BombSurv$Date_Pooled <- ifelse(BombSurv$Date_collected >= "2015-08-03", "August", ifelse(BombSurv$Date_collected >= "2015-07-28", "July", ifelse(BombSurv$Date_collected >= "2015-07-16", "July", "June")))
BombSurv$Date_Pooled <- factor(BombSurv$Date_Pooled, levels = c("June", "July", "August"))
library(dplyr)
sp <- split(BombSurv, BombSurv$species)
# create summary and sd and se using plyr
library(plyr)
VirusSum2 <- ddply(sp$Bimaculatus, c("target_name", "Date_Pooled"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusSum2 <- VirusSum2[-(7:9),]
library(ggplot2)
#Create plot in ggplot
plot <- ggplot(data = VirusSum2,
aes(x = Date_Pooled,
y = mean,
group = target_name,
colour = target_name)
) + geom_line(size=1.5) + geom_point(size=4) + scale_colour_manual(values = c("dodgerblue4", "black")) + coord_cartesian(ylim = c(0, 1)) + labs(x = "Month", y = "% Prevalence", color="Virus:") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) + scale_y_continuous(labels = scales::percent)
# add a theme and add asterix for significance
plot + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 1))
chisq.test(tempsplit$BQCV$Date_Pooled, tempsplit$BQCV$virusBINY)
mod <- glm(tempsplit$BQCV$virusBINY~tempsplit$BQCV$Date_collected)
>>>>>>> origin/master
num <- c(7, 3, 6, 4, 7, 3, 3, 5, 9, 11, 7, 6, 5, 4, 4)
num
mean(num)
sd(num)
<<<<<<< HEAD
install.packages("knitr")
library(knitr)
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
library(plyr)
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurvNHBS <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
BombSurvNHBS <- select(BombSurvNHBS, -City, -Name, -virusBINY_PreFilter)
SiteVirPrev <- ddply(BombSurvNHBS, c("site", "target_name"), summarise,
=======
SiteVirPrev <- ddply(BombSurv, c("site", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
SiteVirPrev
# read in spacial data and select columns I want
spac <- read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
spac <- select(spac, site, sumApiaries, sumColonies)
# merge % prev data for spatial data
spacData <- merge(SiteVirPrev, spac, by="site")
# split by virus type
splitDF <- split(spacData, spacData$target_name)
# plot % prev by sum Apiaries for all three targets:
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumApiaries)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumApiaries)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumApiaries)
# black queen cell lm
mymod <- lm(data=splitDF$BQCV, splitDF$BQCV$mean~splitDF$BQCV$sumApiaries)
abline(mymod)
summary(mymod)
# plot % prev by sumColonies for all three targets:
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumColonies)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumColonies)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumColonies)
# black queen cell lm
mymod1 <- lm(data=splitDF$BQCV, splitDF$BQCV$mean~splitDF$BQCV$sumColonies)
abline(mymod1)
summary(mymod1)
logRegDF <- select(BombSurv, site, target_name, species, norm_genome_copbee, virusBINY, Varroa100, sumApiaries, sumColonies)
logRegDF$logViralLoad <- log10(logRegDF$norm_genome_copbee)
# Log(Bombus Viral Load)
splitDF <- split(logRegDF, logRegDF$target_name)
# fitting a logistic regression to the data (regressing virusBINY on Varroa100)
splitDFmite <- splitDF$DWV[complete.cases(splitDF$DWV),]
#splitDFmite<-splitDFmite[!splitDFmite$site==("PAT"),]
#splitDFmite<-splitDFmite[!splitDFmite$site==("BOST-NEAR"),]
#splitDFmite<-splitDFmite[!splitDFmite$species==("Bimaculatus"),]
miteMod <- glm(virusBINY~Varroa100, data=splitDFmite, family=binomial(link='logit'))
summary(miteMod)
plot(x=splitDFmite$Varroa100, y=splitDFmite$virusBINY)
NHBSdata <- read.csv("NHBS_2015_DataSubset1.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
NHBSdata <- select(NHBSdata, site, Varroa100)
# merge % prev data for mite data
miteData <- merge(spacData, NHBSdata, by="site")
# split by virus type
splitMite <- split(miteData, miteData$target_name)
# plot % prev by sum Apiaries for all three targets:
plot(y=splitMite$DWV$mean, x=splitMite$DWV$Varroa100)
plot(y=splitMite$IAPV$mean, x=splitMite$IAPV$Varroa100)
plot(y=splitMite$BQCV$mean, x=splitMite$BQCV$Varroa100)
# black queen cell lm
mymod <- lm(data=splitMite$DWV, splitMite$DWV$mean~splitMite$DWV$Varroa100)
abline(mymod)
summary(mymod)
splitDFmite
str(splitDFmite)
hist(splitDFmite$norm_genome_copbee)
hist(splitDFmite$norm_genome_copbee, c(0,10))
hist(splitDFmite$norm_genome_copbee, breaks = c(0,10))
hist(splitDFmite$norm_genome_copbee, breaks = 20)
hist(splitDFmite$norm_genome_copbee, breaks = 10)
hist(splitDFmite$logViralLoad, breaks = 10)
hist(splitDFmite$logViralLoad, breaks = 8)
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
```
___________________________________________________________________________________
**Prevalence by bumble bee species:**
```{r}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
```
**Figure 1:** Percent prevalence (% of infected individuals) for two bumble bee species, *Bombus bimaculatus* and *Bombus vagans* for black queen cell virus (BQCV), deformed wing virus (DWV) and Israeli acute paralysis virus (IAPV). BQCV was significantly more prevalent among *B. bimaculatus* than *B. vagans* (p<0.00001). No significant differences in DWV prevalence between species (p = 0.9469). IAPV was detected only in low levels among a few individuals. This figure only includes bees with quantifiable viral infections above the threshold of detection.
```{r}
#stats for % prevalence, species differences
statsplit <- split(BombSurv, BombSurv$target_name)
# chi.sq test for BQCV prev. vs species (p < 0.00001)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
# chi.sq test for DWV prev. vs species (p = 0.9469)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
```
___________________________________________________________________________________
**Bumble bee virus prevalence as a function of Apiary present/absent**
```{r}
# make apiary binary a character so we can use it as a factor in the model
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
# using ddply to get summary of virusBINY by species and target name:
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
```
hist(splitDFmite$norm_genome_copbee, breaks = 10)
hist(splitDFmite$logViralLoad, breaks = 8)
hist(splitDFmite$norm_genome_copbee, breaks = 20)
hist(splitDFmite$logViralLoad, breaks = 8)
SiteVirPrev <- ddply(BombSurv, c("site", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
SiteVirPrev
# read in spacial data and select columns I want
spac <- read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
spac <- select(spac, site, sumApiaries, sumColonies)
# merge % prev data for spatial data
spacData <- merge(SiteVirPrev, spac, by="site")
# split by virus type
splitDF <- split(spacData, spacData$target_name)
# plot % prev by sum Apiaries for all three targets:
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumApiaries)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumApiaries)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumApiaries)
logRegDF <- select(BombSurv, site, target_name, species, norm_genome_copbee, virusBINY, Varroa100, sumApiaries, sumColonies)
logRegDF$logViralLoad <- log10(logRegDF$norm_genome_copbee)
# Log(Bombus Viral Load)
splitDF <- split(logRegDF, logRegDF$target_name)
# fitting a logistic regression to the data (regressing virusBINY on Varroa100)
splitDFmite <- splitDF$DWV[complete.cases(splitDF$DWV),]
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <-ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
plot1
barplot(height=HBSiteSum$mean,
names.arg = c("High DWV Load",
"Low DWV Load",
"No Apis Caught"),
xlab="Site Type",
ylab ="% Prevalence (Bombus with DWV)",
ylim = c(0,0.2),
main = "Bombus DWV Prevalence by Honey Bee DWV Load",
col = colors
)
SiteVirPrev <- ddply(BombSurv, c("site", "target_name"), summarise,
>>>>>>> origin/master
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
<<<<<<< HEAD
SiteVirPrev<-SiteVirPrev[!SiteVirPrev$site==("PITH"),]
SiteVirPrev<-SiteVirPrev[!SiteVirPrev$site==("STOW"),]
SiteVirPrev
spac <- read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
spac <- select(spac, site, sumApiaries, sumColonies)
data <- merge(SiteVirPrev, spac, by="site")
splitDF <- split(data, data$target_name)
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumApiaries)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumApiaries)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumApiaries)
mymod <- lm(data=splitDF$BQCV, splitDF$BQCV$mean~splitDF$BQCV$sumApiaries)
abline(mymod)
summary(mymod)
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumColonies)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumColonies)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumColonies)
mymod1 <- lm(data=splitDF$BQCV, splitDF$BQCV$mean~splitDF$BQCV$sumColonies)
abline(mymod1)
summary(mymod1)
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumColonies)
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumApiaries)
=======
SiteVirPrev
# read in spacial data and select columns I want
spac <- read.table("2015SurveySpatial.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
spac <- select(spac, site, sumApiaries, sumColonies)
# merge % prev data for spatial data
spacData <- merge(SiteVirPrev, spac, by="site")
# split by virus type
splitDF <- split(spacData, spacData$target_name)
# plot % prev by sum Apiaries for all three targets:
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumApiaries)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumApiaries)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumApiaries)
# black queen cell lm
mymod <- lm(data=splitDF$BQCV, splitDF$BQCV$mean~splitDF$BQCV$sumApiaries)
abline(mymod)
summary(mymod)
# plot % prev by sumColonies for all three targets:
plot(y=splitDF$DWV$mean, x=splitDF$DWV$sumColonies)
plot(y=splitDF$IAPV$mean, x=splitDF$IAPV$sumColonies)
plot(y=splitDF$BQCV$mean, x=splitDF$BQCV$sumColonies)
>>>>>>> origin/master
