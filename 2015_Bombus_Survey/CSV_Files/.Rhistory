sample(x, 1500, replace = TRUE)
help(setequal)
x <- 1:100
y <- 2:101
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("finch","thrush","warbler"),20)
setequal(birds,birds2)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("owl","thrush","warbler"),20)
setequal(birds,birds2)
x <- sample(1:100, size=10)
y <- sample(1:100, size=10)
#use setequal to check if the two vectors are the same.
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("NA","thrush","warbler"),20)
#using setequal returns a FALSE value because there is one value different
setequal(birds,birds2)
help([)])
help([)
data = c(1,3,5,7,3,2)
#Using brackets will return the third value of the vector
data[3]
A <- 1:16
A <- 1:16
A <- 1:16
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
print(data)
data[1,2]
help(which)
sample(x, 1000, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 1000, replace = FALSE)
x <- runif(1:10)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 4, replace = FALSE)
# if you sample with replacement, you can sample at a size larger than the original object
#in this case, there will be numbers repeated
sample(x, 11, replace = TRUE)
```
shiny::runApp('AlgerProjects/demo')
# Multi-space separator
cat(x, sep=" . ")
data <- rep("blue","green", each=3)
rep_len(c("finch","thrush","warbler"),20)
bird<- rep_len(c("finch","thrush","warbler"),20)
which=="finch"
which(bird =="finch")
help(which)
x <- c(1,NA,2,NA,3)
#which positions are the
which(!is.na(x))[3]
help(atan2)
help(atan2)
help(atan2)
atan2(3,4)
hep(assign)
help(assign)
help(signif)
sigif(7.462527,digits=4)
signif(7.462527,digits=4)
lst <- list('one','two','three')
a <- lst[1]
class(a)
## returns "list"
a <- lst[[1]]
class(a)
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
chr [1:3] "a" "b" "c"
str(alist[1])
List of 1
$ : chr [1:3] "a" "b" "c"
str(alist[[1]][1])
chr "a"
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
str(alist[1])
alist[[1]]
alist[1]
alist[[1]]
alist[1]
lst <- list('one','two','three')
a <- lst[1]
class(a)
a <- lst[[1]]
class(a)
lst[[2]]
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
View(HardyWeinberg)
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
pp <- 0.7
HardyWeinberg(pp)
HardyWeinberg(1.2)
HardyWeinberg2 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
return("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
```{r}
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call blue color palette for graphics
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# read in data
#BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove unneeded columns from the DF
#BombSurv <- select(BombSurv, -X, -Ct_mean, -Ct_sd, -quantity_mean, -quantity_sd, -run, -date_processed, -dil.factor, -genome_copbee, -Ct_mean_hb, -ID, -ACT_genome_copbee)
# remove unneeded columns from the DF
BombSurv <- select(BombSurv, -City, -Name, -virusBINY_PreFilter)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
```
___________________________________________________________________________________
**Prevelence of viruses in bumble bees**
```{r,  echo=FALSE}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors) + scale_y_continuous(labels = scales::percent)
```
___________________________________________________________________________________
**Prevalence by bumble bee species:**
```{r}
# using ddply to get summary of virusBINY by species and target name:
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=species)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Bombus Species:", labels=c("bimaculatus", "vagans")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
```
**Figure 1:** Percent prevalence (% of infected individuals) for two bumble bee species, *Bombus bimaculatus* and *Bombus vagans* for black queen cell virus (BQCV), deformed wing virus (DWV) and Israeli acute paralysis virus (IAPV). BQCV was significantly more prevalent among *B. bimaculatus* than *B. vagans* (p<0.00001). No significant differences in DWV prevalence between species (p = 0.9469). IAPV was detected only in low levels among a few individuals. This figure only includes bees with quantifiable viral infections above the threshold of detection.
```{r}
#stats for % prevalence, species differences
statsplit <- split(BombSurv, BombSurv$target_name)
# chi.sq test for BQCV prev. vs species (p < 0.00001)
chisq.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
fisher.test(statsplit$BQCV$virusBINY, statsplit$BQCV$species)
# chi.sq test for DWV prev. vs species (p = 0.9469)
chisq.test(statsplit$DWV$virusBINY, statsplit$DWV$species)
```
___________________________________________________________________________________
**Bumble bee virus prevalence as a function of Apiary present/absent**
```{r}
# make apiary binary a character so we can use it as a factor in the model
BombSurv$apiary_near_far <- as.character(BombSurv$apiary_near_far)
# using ddply to get summary of virusBINY by species and target name:
VirusSum1 <- ddply(BombSurv, c("apiary_near_far", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(VirusSum1, aes(x=target_name, y=mean, fill=apiary_near_far)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
```
**Figure 2:** Percent prevalence of infected bumble bee individuals for black queen cell virus (BQCV), deformed wing virus (DWV) and Israeli acute paralysis virus (IAPV). Bumble bees were either caught in sites with honey bee apiaries present or no apiary nearby. BQCV (p<.0001) and DWV (p=.00225) were more prevalent in bumble bees caught in sites with a honey bee apiary present than in sites without an apiary nearby. IAPV was detected only in very low levels among a few individuals. This figure only includes bees with quantifiable viral infections above the threshold of detection for quantification.
```{r}
#stats for % prevalence, apiary_near_far differences
#remove NAs before doing test
PresAbst_stat <- BombSurv[which(BombSurv$apiary_near_far!="NA"),]
PresAbst_stat <- split(PresAbst_stat, PresAbst_stat$target_name)
# chi.sq test for BQCV prev. vs apiary_near_far (p < 0.00001)
chisq.test(PresAbst_stat$BQCV$virusBINY, PresAbst_stat$BQCV$apiary_near_far)
# chi.sq test for DWV prev. vs apiary_near_far (p = 0.00225)
chisq.test(PresAbst_stat$DWV$virusBINY, PresAbst_stat$DWV$apiary_near_far)
```
_____________________________________________________________________________________
**Distribution of honey bee viral loads: "Clustered HoneyBees". Honey bee virus load data falls into a binomial distribution with samples eiher high or low.**
```{r}
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- CopDist[c(23:44),]
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
```
**Creating a figure showing bumble bee viral prevalence as a function of honey bee viral load (bins) or honey bees absent.**
```{r}
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <-ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
plot1
barplot(height=HBSiteSum$mean,
names.arg = c("High DWV Load",
"Low DWV Load",
"No Apis Caught"),
xlab="Site Type",
ylab ="% Prevalence (Bombus with DWV)",
ylim = c(0,0.2),
main = "Bombus DWV Prevalence by Honey Bee DWV Load",
col = colors
)
plot1 <-ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
plot1
plot1 <-ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
+
geom_bar(stat="identity",
position=position_dodge()) +
labs(x="Site Type", y = "y  Prevalence (Bombus with DWV)")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
plot1 <-ggplot(HBSiteSum$mean, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
+
geom_bar(stat="identity",
position=position_dodge()) +
labs(x="Site Type", y = "y  Prevalence (Bombus with DWV)")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <-ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
+
geom_bar(stat="identity",
position=position_dodge()) +
labs(x="Site Type", y = "y  Prevalence (Bombus with DWV)")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Site Type:", labels=c("Apiary Absent", "Apiary Present")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
CopDist <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB, na.rm=TRUE),
sd = sd(norm_genome_copbeeHB, na.rm=TRUE),
se = sd / sqrt(n))
CopDist <- CopDist[c(23:44),]
hist(log(CopDist$mean),
breaks=20,
xlim = c(5,25),
col = "dodgerblue4",
xlab = "Honeybee DWV level log(viral load)",
main = "Distribution of DWV Viral Load in Honeybees",
cex.lab = 1.3,
font.lab = 2
)
```
**Creating a figure showing bumble bee viral prevalence as a function of honey bee viral load (bins) or honey bees absent.**
```{r}
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
HBSiteSum <- ddply(BombSurvSplit$DWV, c("HBSiteBin", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "blue4")
plot1 <-ggplot(HBSiteSum, aes(x=HBSiteBin, y=mean, fill=HBSiteBin))
+
geom_bar(stat="identity",
position=position_dodge()) +
labs(x="Site Type", y = "y  Prevalence (Bombus with DWV)")
