) + geom_point(size=4.5) + labs(x = "Sampling Event", y = name) + coord_cartesian(xlim = c(1,3)) + geom_line(size=1.5) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + scale_color_manual(values=c("black", "blue")) + theme_classic(base_size = 19) + theme(legend.position=c(.22, .87)) + labs(color="Varroa Status:") + scale_x_continuous(breaks=c(1,2,3))
z <- list(Temp, p)
return(z)
}
namesList <- list("NosemaBinary", "VarroaBinary", "DWVbinary", "BQCVbinary", "VarroaLoad", "NosemaLoad", "logBQCV", "logDWV", "FOB", "BroodPattern")
lapply(namesList, TempVarFunc, data=TempVar)
TempVarFunc <- function(name="DWVbinary", data = TempVar){
data$x <- data[,name]
# creating a data frame with means, sd and se for each variable
Temp <- ddply(data, c("VarroaBinary", "SamplingEvent"), summarise,
n = length(x),
mean = mean(x, na.rm=TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
Temp<-Temp[!(Temp$SamplingEvent==3),]
# create a character string of infected with varroa or not
Temp$Var <- ifelse(Temp$VarroaBinary==1, "Infected", "Uninfected")
# plot data frame
p <- ggplot( data = Temp,
aes(x = SamplingEvent,
y = mean,
color = Var)
) + geom_point(size=4.5) + labs(x = "Sampling Event", y = name) + coord_cartesian(xlim = c(1,2)) + geom_line(size=1.5) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + scale_color_manual(values=c("black", "blue")) + theme_classic(base_size = 19) + theme(legend.position=c(.22, .87)) + labs(color="Varroa Status:") + scale_x_continuous(breaks=c(1,2))
z <- list(Temp, p)
return(z)
}
###########################################################################
# END OF FUNCITON
###########################################################################
TempVarFunc()
# create list of all variable names
namesList <- list("NosemaBinary", "VarroaBinary", "DWVbinary", "BQCVbinary", "VarroaLoad", "NosemaLoad", "logBQCV", "logDWV", "FOB", "BroodPattern")
# apply function to all variable names
lapply(namesList, TempVarFunc, data=TempVar)
# apply function to all variable names
resultList <- lapply(namesList, TempVarFunc, data=TempVar)
resultList
# apply function to all variable names
resultList <- lapply(namesList, TempVarFunc, data=TempVar)
resultList
Full <- lmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
summary(Full)
Null <- lmer(data = TempVar, formula = logBQCV ~ SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
anova(Full, Null, test="LRT")
Anova(Full)
plot(TempVar$logBQCV~TempVar$VarroaLoad)
Full <- lmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard))
Anova(Full)
plot(TempVar$logBQCV~TempVar$VarroaLoad)
Full1 <- lmer(data = TempVar, formula = logDWV ~ VarroaBinary * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
Null1 <- lmer(data = TempVar, formula = logDWV ~ 1 * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
anova(Full1, Null1, test="LRT")
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Null1 <- glmer(data = TempVar, formula = DWVbinary ~ 1 * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
anova(Full1, Null1, test="LRT")
Full1 <- lmer(data = TempVar, formula = logDWV ~ VarroaBinary * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
Anova(Full1)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Anova(Full1)
hist(TempVar$logDWV)
hist(TempVar$logBQCV)
Full <- glmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = gamma)
Full <- glmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = Gamma)
Anova(Full)
plot(TempVar$logBQCV~TempVar$VarroaLoad)
ggplot(TempVar, aes(logBQCV~TempVar$VarroaLoad) + geom_point(aes(colour = factor(SamplingEvent)), size = 4))
ggplot(TempVar, aes(logBQCV, VarroaLoad) + geom_point(aes(colour = factor(SamplingEvent)), size = 4))
ggplot(TempVar, aes(logBQCV, VarroaLoad) + geom_point(aes(color = factor(SamplingEvent)), size = 4))
ggplot(TempVar, aes(logBQCV, VarroaLoad) + geom_point(aes(color = SamplingEvent, size = 4)))
ggplot(TempVar, aes(logBQCV, VarroaLoad) + geom_point(size = 4))
ggplot(TempVar, aes(logBQCV, VarroaLoad))
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(size = 4)
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=Samplingvent), size = 4)
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEvent), size = 4)
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4)
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(0,30), ylim=c(0,25))
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,30), ylim=c(0,25))
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 19) + theme(legend.position=c(10, 25)) + labs(color="Sampling Event:")
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 19) + theme(legend.position=c(.1, .8)) + labs(color="Sampling Event:")
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 19) + theme(legend.position=c(.3, .8)) + labs(color="Sampling Event:")
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 19) + theme(legend.position=c(.2, .8)) + labs(color="Sampling Event:")
ggplot(TempVar, aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 19) + theme(legend.position=c(.2, .8)) + labs(color="Sampling Time")
ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .8)) + labs(color="Sampling Time", xlab="d")
ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .8)) + labs(color="Sample:", x="BQCV Load log(genome copies/bee)", y="Varroa Load (mites/100 bees)")
ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)")
ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)")
ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black"))
ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth()
p + ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black"))
# lines of best fit
p + geom_smooth(aes(logBQCV, VarroaLoad))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(logBQCV, VarroaLoad))
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(logBQCV, VarroaLoad))
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_abline(aes(intercept=intercept, slope=slope,color = SamplingEvent))
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=factor(SamplingEvent)), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(se = FALSE, method = lm)
# make sampling event a factor:
TempVar$SamplingEvent <- as.factor(TempVar$SamplingEvent)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEvent), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
Full <- glmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = Gamma)
Full <- glmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = Gamma)
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/BurnhamAlexPrivate/TempVar_Coinfection_Data")
# read in data:
TempVar <- read.csv("TempVarData.csv",header=TRUE,sep=",",stringsAsFactors=FALSE, comment.char = '#')
# source my functions
source("~/Dissertation/Scripts/BurnhamFunctions.R")
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(gridExtra)
library(grid)
library(cowplot)
# make sampling event a factor:
TempVar$SamplingEventFact <- as.factor(TempVar$SamplingEvent)
# create binary variable for Nosema:
TempVar$NosemaBinary <- ifelse(TempVar$NosemaLoad == 0, 0, 1)
# create binary variable for Varroa:
TempVar$VarroaBinary <- ifelse(TempVar$VarroaLoad == 0, 0, 1)
# create scaled (0 to 1) variable for Brood Pattern:
TempVar$BroodPatternScaled <- TempVar$BroodPattern * 0.1
# create scaled (0 to 1) variable for Frames of Brood:
TempVar$FOBnorm <- ((TempVar$FOB) - min(TempVar$FOB, na.rm = TRUE))/(max(TempVar$FOB, na.rm = TRUE)-min(TempVar$FOB, na.rm = TRUE))
DFmaker <- function(data = TempVar,
Var1 = "SamplingEvent",
Var2 = "DWVbinary",
repNum = 80,
name = "DWV"){
x <- cbind(select(data, Var1, Var2), rep(name, repNum))
names(x)[2] <- "variable"
names(x)[3] <- "variableName"
return(x)
}
# create data frames for each variable and merge them
DW <- DFmaker(name = "DWV", Var2 = "DWVbinary")
BQ <- DFmaker(name = "BQCV", Var2 = "BQCVbinary")
NO <- DFmaker(name = "Nosema", Var2 = "NosemaBinary")
VA <- DFmaker(name = "Varroa", Var2 = "VarroaBinary")
BP <- DFmaker(name = "Brood Pattern", Var2 = "BroodPatternScaled")
FB <- DFmaker(name = "Frames of Bees", Var2 = "FOBnorm")
# create TempDat dataframe:
TempDat <- rbind(DW, BQ, NO, VA, BP, FB)
Temporal <- ddply(TempDat, c("variableName", "SamplingEvent"), summarise,
n = length(variable),
mean = mean(variable, na.rm=TRUE),
sd = sd(variable, na.rm = TRUE),
se = sd / sqrt(n))
# split data frame into brood variables and pathogen variables
Brood <- Temporal[13:18,]
Path <- Temporal[1:12,]
# plotting pathogens through time
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .24), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
# plotting brood measures through time
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.22, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
# use cowlpot package to combine the two figures:
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
TempVarFunc <- function(name="DWVbinary", data = TempVar){
# prepare character for use in dplyr environment
data$x <- data[,name]
# creating a data frame with means, sd and se for each variable
Temp <- ddply(data, c("VarroaBinary", "SamplingEvent"), summarise,
n = length(x),
mean = mean(x, na.rm=TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
Temp<-Temp[!(Temp$SamplingEvent==3),]
# create a character string of infected with varroa or not
Temp$Var <- ifelse(Temp$VarroaBinary==1, "Infected", "Uninfected")
# plot data frame
p <- ggplot( data = Temp,
aes(x = SamplingEvent,
y = mean,
color = Var)
) + geom_point(size=4.5) + labs(x = "Sampling Event", y = name) + coord_cartesian(xlim = c(1,2)) + geom_line(size=1.5) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + scale_color_manual(values=c("black", "blue")) + theme_classic(base_size = 19) + theme(legend.position=c(.22, .87)) + labs(color="Varroa Status:") + scale_x_continuous(breaks=c(1,2))
z <- list(Temp, p)
return(z)
}
# create list of all variable names
namesList <- list("NosemaBinary", "VarroaBinary", "DWVbinary", "BQCVbinary", "VarroaLoad", "NosemaLoad", "logBQCV", "logDWV", "FOB", "BroodPattern")
# apply function to all variable names
resultList <- lapply(namesList, TempVarFunc, data=TempVar)
Full <- glmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = Gamma)
Anova(Full)
plot(TempVar$logBQCV~TempVar$VarroaLoad)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(se = FALSE, method = lm)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25)) + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(se = FALSE, method = lm)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + geom_smooth(se = FALSE, method = lm)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(se = FALSE, method = lm)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) geom_smooth(method = "nls", formula = y ~ a * x + b, se = F, method.args = list(start = list(a = 0.1, b = 0.1)))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(method = "nls", formula = y ~ a * x + b, se = F, method.args = list(start = list(a = 0.1, b = 0.1)))
# make sampling event a factor:
TempVar$SamplingEventFact <- as.character(TempVar$SamplingEvent)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(method = "nls", formula = y ~ a * x + b, se = F, method.args = list(start = list(a = 0.1, b = 0.1)))
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) geom_smooth(aes(color=SamplingEventFact), method  = "nls", formula = y ~ a * x + b, se = FALSE, method.args = list(start = list(a = 0.1, b = 0.1)))
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 5) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), size = 1, linetype = "solid") + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), linetype = "solid") + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), element_rect(color = "black", fill = "grey90", size = 1, linetype = "solid")) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), legend.background = element_rect(color = "black", fill = "grey90", size = 1, linetype = "solid")) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), legend.background = element_rect(color = "black", size = 1, linetype = "solid")) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), legend.background = element_rect(size = 1, linetype = "solid")) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), legend.background = element_rect(color = "black", size = 1)) + labs(color="Sample:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.15, .8), legend.background = element_rect(color = "black", size = 1)) + labs(color="Sample Event:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = 1)) + labs(color="Sample Event:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 4) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = 1)) + labs(color="Sample Event:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Sample Event:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 5) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = 1)) + labs(color="Sample Event:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(logBQCV, VarroaLoad)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Sample Event:", x="BQCV Load (log(genome copies/bee))", y="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# plotting pathogens through time
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .24), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
# plotting brood measures through time
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.22, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
# use cowlpot package to combine the two figures:
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
# plotting pathogens through time
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .24), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p1
p2
# creating seperate plots for prevalence and population metrics:
p1sep <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .24)) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
print(p1sep)
# creating seperate plots for prevalence and population metrics:
p1sep <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .24)) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
print(p1sep)
# plotting brood measures through time
p2sep <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.22, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
print(p2sep)
Brood
# plotting brood measures through time
p2sep <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.22, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05))
print(p2sep)
# plotting brood measures through time
p2sep <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.22, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.05))
print(p2sep)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ VarroaBinary * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Anova(Full1)
Full1 <- glmer(data = TempVar, formula =VarroaBinary ~ DWVbinary * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Anova(Full1)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ VarroaBinary + FOB * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Anova(Full1)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ (VarroaBinary + FOB) * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Anova(Full1)
summary(Full1)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ (VarroaBinary + FOB) * SamplingEvent + (1|labID) + (1|Yard), family = binomial(link = "logit"))
Anova(Full1)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~  FOB * SamplingEvent + (1|labID) + (1|Yard), family = binomial(link = "logit"))
Anova(Full1)
chisq.test(TempVar$DWVbinary, TempVar$VarroaBinary)
chisq.test(TempVar$DWVbinary, FOB)
chisq.test(TempVar$DWVbinary, TempVar$FOB)
TempVar[SamplingEvent==1,]
TempVar[TempVar$SamplingEvent=="1",]
TempVar[TempVar$SamplingEvent=="1",]
TempVar[TempVar$SamplingEvent=="2",]
TempVar[TempVar$SamplingEvent=="3",]
One <- TempVar[TempVar$SamplingEvent=="1",]
Two <- TempVar[TempVar$SamplingEvent=="2",]
Three <- TempVar[TempVar$SamplingEvent=="3",]
Tab1 <- table(One$VarroaBinary, One$DWVbinary)
Tab1
Tab1 <- table(One$VarroaBinary, One$DWVbinary)
Tab2 <- table(Two$VarroaBinary, Two$DWVbinary)
Tab3 <- table(Three$VarroaBinary, Three$DWVbinary)
chisq.test(TempVar$DWVbinary, TempVar$FOB)
chisq.test(Tab1)
chisq.test(Tab2)
chisq.test(Tab3)
fisher.test(Tab3)
fisher.test(Tab2)
fisher.test(Tab1)
Full1 <- glmer(data = TempVar, formula = DWVbinary ~  VarroaBinary * SamplingEvent + (1|labID), family = binomial(link = "logit"))
Anova(Full1)
Full1 <- glmer(data = TempVar, formula = FOB ~  VarroaBinary * SamplingEvent + (1|labID), family = binomial(link = "logit"))
Anova(Full1)
Full1 <- glmer(data = TempVar, formula = FOB ~  DWVbinary * SamplingEvent + (1|labID), family = binomial(link = "logit"))
Anova(Full1)
TempVar$FOB
Full1 <- lmer(data = TempVar, formula = FOB ~  DWVbinary * SamplingEvent + (1|labID))
Anova(Full1)
Full1 <- lmer(data = TempVar, formula = FOB ~  (DWVbinary + VarroaBinary) * SamplingEvent + (1|labID))
Anova(Full1)
Full1 <- lmer(data = TempVar, formula = FOB ~  (DWVbinary + VarroaBinary) * SamplingEvent + (1|labID), (1|Yard))
Anova(Full1)
hist(TempVar$FOB)
Full1 <- glmer(data = TempVar, formula = FOB ~  (DWVbinary + VarroaBinary) * SamplingEvent + (1|labID), (1|Yard), family = Gamma)
Full1 <- glmer(data = TempVar, formula = FOB ~  (DWVbinary + VarroaBinary) * SamplingEvent + (1|labID) + (1|Yard), family = Gamma)
Anova(Full1)
Full1 <- lmer(data = TempVar, formula = FOB ~  (DWVbinary + VarroaBinary) * SamplingEvent + (1|labID) + (1|Yard))
Anova(Full1)
# main plot parameters
p1 <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(size = 3.5) + coord_cartesian(xlim = c(10,25), ylim=c(0,25))
# aestetic parameters
p1 + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(y="BQCV Load (log(genome copies/bee))", x="Varroa Load (mites/100 bees)") + geom_smooth(method  = lm, se = FALSE)
# main plot parameters
p1 <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p1 + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(y="BQCV Load (log(genome copies/bee))", x="Varroa Load (mites/100 bees)") + geom_smooth(method  = lm, se = FALSE)
# main plot parameters
p1 <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p1 + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + geom_smooth(method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Sample Event:", y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.8, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Sample Event:", y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.9, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Time:", y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.8, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Time:", y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.8, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Time Point:", y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(aes(color=SamplingEventFact), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Time Point:", y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + scale_color_manual(values = c("slategrey", "blue", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p1 <- ggplot(TempVar,aes(VarroaLoad, logBQCV)) + geom_point(size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p1 + theme_classic(base_size = 17) + theme(legend.position=c(.17, .8), legend.background = element_rect(color = "black", size = .5)) + labs(y="BQCV log(genome copies/bee)", x="Varroa Load (mites/100 bees)") + geom_smooth(method  = lm, se = FALSE)
plot(VarroaLoad, logBQCV)
plot(TempVar$VarroaLoad, TempVar$logBQCV)
# model of loBQCV by varroa load using a gamma distribution:
Full <- glmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = Gamma)
# running an anova on the model for determining significance:
Anova(Full)
# model of loBQCV by varroa load using a gamma distribution:
Full <- glmer.nb(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard))
# running an anova on the model for determining significance:
Anova(Full)
Full
summary(Full)
# model of loBQCV by varroa load using a gamma distribution:
Full <- lmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard))
# running an anova on the model for determining significance:
Anova(Full)
Full
summary(Full)
lm(data=TempVar, logBQCV ~ VarroaLoad)
summary(lm(data=TempVar, logBQCV ~ VarroaLoad))
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv
View(BombSurv)
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList
View(PosList)
library("dplyr")
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee)
head(PosList)
table(PosList$target_name)
write.csv(PosList, file = "PosVirus_NegStrd_2015_Bomb")
write.csv(PosList, file = "PosVirus_NegStrd_2015.csv")
# code to find negative bees and write out columns wanted
NegList <- BombSurv[BombSurv$virusBINY==0,]
NegList <- select(NegList, sample_name, target_name, Ct_mean, norm_genome_copbee)
head(NegList)
write.csv(PosList, file = "NegVirus_NegStrd_2015.csv")
# code to find negative bees and write out columns wanted
NegList <- BombSurv[BombSurv$virusBINY==0,]
NegList <- select(NegList, sample_name, target_name, Ct_mean, norm_genome_copbee)
write.csv(NegList, file = "NegVirus_NegStrd_2015.csv")
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("ape")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee)
head(PosList)
table(PosList$target_name)
PosList$sample_name[!duplicated(PosList$sample_name),]
PosList$sample_name[!duplicated(PosList$sample_name)]
length(PosList$sample_name[!duplicated(PosList$sample_name)])
