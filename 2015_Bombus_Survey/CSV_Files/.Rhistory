data
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
data
str(data)
mod <- aov(data, RefReading~Concentration + Refractometer)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$20%$Concentration~splitDat$20%$Refractometer)
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10", 10), rep("20", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$20$Concentration~splitDat$20$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
Concentration <- c(rep("Ten", 10), rep("Twenty", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$Twenty$Concentration~splitDat$Twenty$Refractometer)
summary(mod)
summary(mod)
mod <- aov(splitDat$Twenty$RefReading~splitDat$Twenty$Refractometer)
summary(mod)
mod10 <- aov(splitDat$Ten$RefReading~splitDat$Ten$Refractometer)
summary(mod10)
splitDatConc <- split(data, data$Refractometer)
splitDatConc$New - splitDatConc$Old
splitDatConc$New$RefReading - splitDatConc$Old$RefReading
splitDatConc$New$RefReading
reading <- splitDatConc$New$RefReading - splitDatConc$Old$RefReading
conc <- c(rep("Ten",5), rep("Twenty",5))
df <- data.frame(conc, reading)
df
m <- aov(data=df, reading~conc)
summary(m)
mean(reading)
# required packages:
library(plyr)
library(dplyr)
install.packages(plyr)
install.packages("plyr")
# required packages:
library(plyr)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("lme4")
install.packages("car")
install.packages("MASS")
install.packages("vegan")
install.packages("factoextra")
install.packages("knitr")
install.packages("knitr")
library(knitr)
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(vegan)
library(factoextra)
x <- c(2,5,2,6,4,3,2)
y <- c("A","B", NA, NA,"A","B")
dat <- data.frame(x,y)
x <- c(2,2,6,4,3,2)
y <- c("A","B", NA, NA,"A","B")
dat <- data.frame(x,y)
dat
dat <- dat[is.na(dat$y),]
dat
dat <- data.frame(x,y)
dat <- dat[-is.na(dat$y),]
dat
dat <- data.frame(x,y)
dat <- dat[! is.na(dat$y),]
dat
install.packages("wesanderson")
wesanderson::wes_palette()
wes_palette
library(wesanderson)
wes_palettes
wes_palettes$Moonrise2
# Preliminaries:
ls()
rm(list=ls())
library(deSolve)
par(mfrow=c(1,1))
# initial state of system
state<-c(S=1, I1=0.05, I2=0.00, P=0.0)
# set parameters
parameters <- c(
beta=0.202,
alpha1=0.07,
alpha2=0.010,
gamma=0.05,
muA=0.011,
muB=0.025,
theta=0.01
)
#====================================================================================================
# create a function for this disease system using desolve
NosemaModel4 <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
dSdt <- -(S * P * beta) - (S * muA)
dI1dt <- (S * P * beta) - (I1 * muA) - (I1 * gamma)
dI2dt <- (I1 * P * gamma) - (I2 * muB)
dPdt <- (I1 * alpha1) + (I2 * alpha2) - (P * theta)
return(list(c(dSdt,dI1dt,dI2dt,dPdt)))
})
}
# set up time steps
times <- seq(0,150,by=1)
# use ode() to to create an output
out <- ode(y=state,times=times, func=NosemaModel4, parms=parameters)
out<-as.data.frame(out)
out
# remove unwanted columns for this model
#out$time <- NULL
#out$S <- NULL
out$P <- NULL
out
matplot(x=times,y=out,
type="l",
xlab="Time (days)",
ylab="Rate of Nosema Infection",
main="Infection Rate through Time",
lwd=3,
ylim=c(0,1),
lty=1,
font.lab=2,
bty="l",
col=c("blue","red", "green"))
grid(col="gray")
legend(x=100,y=0.6,
legend=c("Infected",
"Critically Infected",
"Susceptable"),
pch=19,
col=c("blue","red", "green"),
bty="n",
bg="white")
out
plot(out$time, out$S)
plot(out$time, out$I1)
plot(out$time, out$I2)
#------------------------------------------------------------------------
# Preliminaries:
ls()
rm(list=ls())
library(deSolve)
par(mfrow=c(1,1))
# initial state of system
state<-c(S=1, I1=0.05, I2=0.00, P=0.0)
# set parameters
parameters <- c(
beta=0.202,
alpha1=0.07,
alpha2=0.010,
gamma=0.05,
muA=0.011,
muB=0.025,
theta=0.01
)
#====================================================================================================
# create a function for this disease system using desolve
NosemaModel4 <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
dSdt <- -(S * P * beta) - (S * muA)
dI1dt <- (S * P * beta) - (I1 * muA) - (I1 * gamma)
dI2dt <- (I1 * P * gamma) - (I2 * muB)
dPdt <- (I1 * alpha1) + (I2 * alpha2) - (P * theta)
return(list(c(dSdt,dI1dt,dI2dt,dPdt)))
})
}
#====================================================================================================
# set up time steps
times <- seq(0,150,by=1)
# use ode() to to create an output
out <- ode(y=state,times=times, func=NosemaModel4, parms=parameters)
out<-as.data.frame(out)
# remove unwanted columns for this model
#out$time <- NULL
#out$S <- NULL
out$P <- NULL
# set survival equal to  1 - pooled infected (I1+I2)
#Surv <- 1 - (out[,1]+out[,2])
#out <- cbind(out,Surv)
#head(out,10)
#------------------------------------------------------------------------------------------
matplot(x=times,y=out,
type="l",
xlab="Time (days)",
ylab="Rate of Nosema Infection",
main="Infection Rate through Time",
lwd=3,
ylim=c(0,1),
lty=1,
font.lab=2,
bty="l",
col=c("blue","red", "green"))
grid(col="gray")
legend(x=100,y=0.6,
legend=c("Infected",
"Critically Infected",
"Susceptable"),
pch=19,
col=c("blue","red", "green"),
bty="n",
bg="white")
#####################################################################################################
# END MODEL MKIV
plot(out$time, out$S)
######################################################################################################
# Nosema Model MKV (5 May 2016) includes growth rates but no equation for colony as a reser
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("ape")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- NA
USDASurv$Melt.Temperature
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
USDASurv$Melt.Temperature
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
USDASurv
# create wide form data set:
reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv)
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv)
BombSurv$sample_name
# change the names of the data frame
names(USDASurv) <- c("sample_name", "NegCt", "NegMelt", "PosCt", "PosMelt", "SelfP_Ct", "SelfP_Melt")
USDASurv
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by.x = "sample_name")
BombUSDA
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by.y = "sample_name")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove "None" from data frame
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv) <- c("sample_name", "NegCt", "NegMelt", "PosCt", "PosMelt", "SelfP_Ct", "SelfP_Melt")
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by.y = "sample_name")
View(BombUSDA)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("ape")
library("lme4")
library("car")
library("ape")
library("MuMIn")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove "None" from data frame
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv) <- c("sample_name", "NegCt", "NegMelt", "PosCt", "PosMelt", "SelfP_Ct", "SelfP_Melt")
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by = "sample_name")
# Merge USDA data with main data frame:
BombUSDA <- merge(y = BombSurv, x = USDASurv, by = "sample_name")
# Merge USDA data with main data frame:
BombUSDA <- merge(y = BombSurv, x = USDASurv, by = "sample_name")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove "None" from data frame
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv) <- c("sample_name", "NegCt", "NegMelt", "PosCt", "PosMelt", "SelfP_Ct", "SelfP_Melt")
# Merge USDA data with main data frame:
BombUSDA <- merge(y = BombSurv, x = USDASurv, by = "sample_name")
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by = "sample_name", all.x = TRUE)
BombUSDA
View(BombUSDA)
# find data for just DWV
BombUSDA_DWV <- BombUSDA$target_name[BombUSDA$target_name=="DWV"]
BombUSDA_DWV
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV"]
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by = "sample_name", all.x = TRUE)
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV"]
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# remove "None" from data frame
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv) <- c("sample_name", "NegCt", "NegMelt", "PosCt", "PosMelt", "SelfP_Ct", "SelfP_Melt")
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by = "sample_name", all.x = TRUE)
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV"]
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV",]
BombUSDA_DWV
BombUSDA_DWV$target_name
BombUSDA_DWV <- BombUSDA_DWV[BombUSDA_DWV$PosCt!=0,]
BombUSDA_DWV
BombUSDA_DWV <- BombUSDA_DWV[BombUSDA_DWV$PosCt!=NA,]
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV",]
BombUSDA_DWV <- BombUSDA_DWV[BombUSDA_DWV$PosCt!=NA,]
BombUSDA_DWV <- BombUSDA_DWV[!BombUSDA_DWV$PosCt == NA,]
BombUSDA_DWV
BombUSDA_DWV <- BombUSDA_DWV[!is.na(BombUSDA_DWV$PosCt),]
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV",]
BombUSDA_DWV <- BombUSDA_DWV[!is.na(BombUSDA_DWV$PosCt),]
BombUSDA_DWV
BombUSDA_DWV <- BombUSDA_DWV[!14,]
BombUSDA_DWV
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV",]
BombUSDA_DWV <- BombUSDA_DWV[!is.na(BombUSDA_DWV$PosCt),]
BombUSDA_DWV <- BombUSDA_DWV[-14,]
BombUSDA_DWV
# find data for just DWV
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV",]
BombUSDA_DWV <- BombUSDA_DWV[!is.na(BombUSDA_DWV$PosCt),]
BombUSDA_DWV
BombUSDA_DWV <- BombUSDA_DWV[-12,]
BombUSDA_DWV
View(BombUSDA_DWV)
View(USDASurv)
BombUSDA_DWV$NegStrand <- ifelse(BombUSDA_DWV$NegMelt >= 78, 1, 0)
BombUSDA_DWV$NegStrand
View(BombUSDA_DWV)
boxplot(BombUSDA_DWV$norm_genome_copbee~BombUSDA_DWV$NegStrand)
x <- aov(BombUSDA_DWV$norm_genome_copbee~BombUSDA_DWV$NegStrand)
summary(x)
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee)
# change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
# read nanodrop data:
drop <- read.table("BombSurv_RNANanodropResults.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
# find number of samples in data set that are postive:
length(PosList$ID[!duplicated(PosList$ID)])
# cross refernce entire data set
complete <- drop[(drop$ID %in% x),]
# select columns we want from DF complete
complete <- select(complete, ID, ng.ul, final_vol)
# merge data frames to get ng.ul in with main frame
mergedDF <- merge(x = PosList, y = complete, by.x = "ID")
# sample for USDA 1 step checking: 87, 67, 362
mergedDF[which(mergedDF$target_name=="DWV"),]
drop
names(drop)
names(drop)[1]
names(drop)[1] <- "sample_name"
drop
# remove "None" from data frame
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
# load in data
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
USDASurv <- read.table("USDA_finalPCR_results.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
# code to find positive bees and write out columns wanted
PosList <- BombSurv[BombSurv$virusBINY==1,]
PosList <- select(PosList, sample_name, target_name, Ct_mean, norm_genome_copbee)
# change the name of sample_name to ID
colnames(PosList)[1] <- "ID"
# just the samples that are postive
x <- PosList$ID[!duplicated(PosList$ID)]
# read nanodrop data:
drop <- read.table("BombSurv_RNANanodropResults.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
# find number of samples in data set that are postive:
length(PosList$ID[!duplicated(PosList$ID)])
# cross refernce entire data set
complete <- drop[(drop$ID %in% x),]
# select columns we want from DF complete
complete <- select(complete, ID, ng.ul, final_vol)
# merge data frames to get ng.ul in with main frame
mergedDF <- merge(x = PosList, y = complete, by.x = "ID")
# sample for USDA 1 step checking: 87, 67, 362
mergedDF[which(mergedDF$target_name=="DWV"),]
# remove "None" from data frame
USDASurv$Melt.Temperature[USDASurv$Melt.Temperature=="None"] <- 0
# create wide form data set:
USDASurv <- reshape(USDASurv, idvar = "Sample", timevar = "Target", direction = "wide")
# change the names of the data frame
names(USDASurv) <- c("sample_name", "NegCt", "NegMelt", "PosCt", "PosMelt", "SelfP_Ct", "SelfP_Melt")
# change name of drop ID to sample_name
names(drop)[1] <- "sample_name"
# Merge USDA data with main data frame:
BombUSDA <- merge(x = BombSurv, y = USDASurv, by = "sample_name", all.x = TRUE)
BombUSDA <- merge(x = BombUSDA, y = drop, by = "sample_name", all.x = TRUE)
# find data for just DWV for bees we ran at USDA
BombUSDA_DWV <- BombUSDA[BombUSDA$target_name=="DWV",]
BombUSDA_DWV <- BombUSDA_DWV[!is.na(BombUSDA_DWV$PosCt),]
BombUSDA_DWV <- BombUSDA_DWV[-12,]
# new variable Negative strand binary:
BombUSDA_DWV$NegStrand <- ifelse(BombUSDA_DWV$NegMelt >= 78, 1, 0)
BombUSDA_DWV$NegStrand
# viral load
boxplot(BombUSDA_DWV$norm_genome_copbee~BombUSDA_DWV$NegStrand)
x <- aov(BombUSDA_DWV$norm_genome_copbee~BombUSDA_DWV$NegStrand)
summary(x)
# concentrarion
boxplot(BombUSDA_DWV$ng.ul~BombUSDA_DWV$NegStrand)
x <- aov(BombUSDA_DWV$ng.ul~BombUSDA_DWV$NegStrand)
summary(x)
View(BombUSDA_DWV)
write.csv(BombUSDA, file = "FullDataSet_BombSurv2015_Alger.csv")
write.csv(USDASurv, file = "USDASurv_NegStrd_15samples.csv")
