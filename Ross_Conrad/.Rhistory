alist[1]
lst <- list('one','two','three')
a <- lst[1]
class(a)
a <- lst[[1]]
class(a)
lst[[2]]
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
View(HardyWeinberg)
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
pp <- 0.7
HardyWeinberg(pp)
HardyWeinberg(1.2)
HardyWeinberg2 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
return("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
library(ggmap)
install.packages("ggmap")
install.packages("ggplot2")
library(ggmap)
library(ggplot2)
Vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google", TRUE, TRUE)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google")
ggmap(vtMap)
vtMap
ggmap(vtMap)
map(vtMap)
install.packages("maps")
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
vtMap
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
ggmap(vtMap)
install.packages("ggproto")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
.75*350
x <- c("ggmap", "rdgal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x)
lapply(x, library, character.only = TRUE)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',configure.args="--with-proj-include=/sw/proj/4.9.2/include --with-proj-lib=/sw/proj/4.9.2/lib")
libray(rdgal)
library(rdgal)
require(rdgal)
library(tmap) # load tmap package
tmap_mode="plot"
# load spatial data included in the tmap package
data("World", "metro")
# Try typing head(World$...) or head(metro@...) to see the type of data...
head(World@data)
quick plot example:
qtm(World, fill = "income_grp", text = "iso_a3", text.size = "AREA") # use "World$" to see the two attributes: income_grp and iso_a3, text.size= area: text is sized increasingly with coutry area size.
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("ape")
library("lme4")
library("car")
library("ape")
library("MuMIn")
library("MASS")
# Set Working Directory
setwd("~/AlgerProjects/Ross_Conrad/")
# load in data
Conrad <- read.table("ConradSARE.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
View(Conrad)
VarSum <- ddply(Conrad, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
colors <- c("slategray3", "dodgerblue4", "black", "blue")
ggplot(data = VarSum,
aes(x = SamplingEvent,
y = mean,
color = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Varroa (mites/300 bees)") + coord_cartesian(ylim = c(0, 40), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .85),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(color="Treatment:") + scale_x_continuous(breaks=c(1,2,3)) + scale_color_manual(values=colors)
mod <- lmer(data=Conrad, formula = Varroa~Treatment * SamplingEvent + (1|ID))
library(cars)
library(MASS)
dsf
Anova()
anova()
install.packages("cars")
install.packages("CARS")
library(CARS)
library("car")
install.packages("car")
library("car")
mod <- lmer(data=Conrad, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(mod)
# Summary of Varroa
VarSum <- ddply(Conrad, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
colors <- c("slategray3", "dodgerblue4", "black", "blue")
ggplot(data = VarSum,
aes(x = SamplingEvent,
y = mean,
color = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Varroa (mites/300 bees)") + coord_cartesian(ylim = c(0, 40), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .85),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(color="Treatment:") + scale_x_continuous(breaks=c(1,2,3)) + scale_color_manual(values=colors)
mod <- lmer(data=Conrad, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(mod)
###############################################################
# Honey Figure
HoneySum <- ddply(Conrad, c("Treatment"), summarise,
n = length(Honey),
mean = mean(Honey, na.rm=TRUE),
sd = sd(Honey, na.rm = TRUE),
se = sd / sqrt(n))
HoneySum[3,5] <- NA
colors <- c("slategray3", "dodgerblue4", "black", "blue")
plot1 <- ggplot(HoneySum, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Treatment", y = "Honey Harvested (# Supers)")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 2)) + scale_fill_manual(values=colors, name="", labels=c("Stationary", "Migratory")) + theme(legend.position=c(2, 2))
#ANOVA testing honey
HoneyModel <- aov(data=Conrad, Honey~Treatment)
summary(HoneyModel)
TukeyHSD(HoneyModel)
# Significant difference in honey between treatments.
# C and QS=A
# TF and TFQ=B
###############################################################
# Survival Figure
Conrad$SurvivalBINY <- ifelse(Conrad$Survival=="Yes",1,0)
SurvivalSum <- ddply(Conrad, c("Treatment"), summarise,
n = length(SurvivalBINY),
mean = mean(SurvivalBINY, na.rm=TRUE),
sd = sd(SurvivalBINY, na.rm = TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "black", "blue")
plot1 <- ggplot(SurvivalSum, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Treatment", y = "% Survival")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors, name="", labels=c("Stationary", "Migratory")) + theme(legend.position=c(2, 2)) + scale_y_continuous(labels = scales::percent)
# chi square testing Survival
chisq.test(x=Conrad$Treatment, y=Conrad$Survival)
# significant difference between treatments
library("lme4")
Fullmod4 <- glmer(data=Conrad, formula = SurvivalBINY~Treatment + (1|ID), family = binomial(link = "logit"))
###############################################################
# Strength Figure
StrengthSum <- ddply(Conrad, c("Treatment"), summarise,
n = length(Strength),
mean = mean(Strength, na.rm=TRUE),
sd = sd(Strength, na.rm = TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "black", "blue")
plot1 <- ggplot(StrengthSum, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Treatment", y = "Brood Area (sq. inches)")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 600)) + scale_fill_manual(values=colors, name="", labels=c("Stationary", "Migratory")) + theme(legend.position=c(2, 2))
#ANOVA on Strength
StrengthModel <- aov(data=Conrad, Strength~Treatment)
summary(StrengthModel)
#No significant difference in brood area between treatments
mod <- lmer(data=Conrad, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(mod)
HoneyModel <- aov(data=Conrad, Honey~Treatment)
summary(HoneyModel)
TukeyHSD(HoneyModel)
chisq.test(x=Conrad$Treatment, y=Conrad$Survival)
# significant difference between treatments
library("lme4")
Fullmod4 <- glmer(data=Conrad, formula = SurvivalBINY~Treatment + (1|ID), family = binomial(link = "logit"))
StrengthModel <- aov(data=Conrad, Strength~Treatment)
summary(StrengthModel)
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("ape")
library("lme4")
library("car")
library("ape")
library("MuMIn")
library("MASS")
# Set Working Directory
setwd("~/AlgerProjects/Ross_Conrad/")
# load in data
Conrad <- read.table("ConradSARE.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
View(Conrad)
setwd("~/AlgerProjects/Ross_Conrad/")
# load in data
Conrad <- read.table("ConradSARE.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
View(Conrad)
setwd("~/AlgerProjects/Ross_Conrad/")
# load in data
Conrad <- read.table("ConradSARE.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
Conrad2 <- read.table("ConradSARE.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
View(Conrad2)
Conrad <- read.table("ConradSARE.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
View(Conrad)
VarSum <- ddply(Conrad, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
colors <- c("slategray3", "dodgerblue4", "black", "blue")
ggplot(data = VarSum,
aes(x = SamplingEvent,
y = mean,
color = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Varroa (mites/300 bees)") + coord_cartesian(ylim = c(0, 40), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .85),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(color="Treatment:") + scale_x_continuous(breaks=c(1,2,3)) + scale_color_manual(values=colors)
mod <- lmer(data=Conrad, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(mod)
###############################################################
# Honey Figure
HoneySum <- ddply(Conrad, c("Treatment"), summarise,
n = length(Honey),
mean = mean(Honey, na.rm=TRUE),
sd = sd(Honey, na.rm = TRUE),
se = sd / sqrt(n))
HoneySum[3,5] <- NA
colors <- c("slategray3", "dodgerblue4", "black", "blue")
plot1 <- ggplot(HoneySum, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Treatment", y = "Honey Harvested (# Supers)")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 2)) + scale_fill_manual(values=colors, name="", labels=c("Stationary", "Migratory")) + theme(legend.position=c(2, 2))
#ANOVA testing honey
HoneyModel <- aov(data=Conrad, Honey~Treatment)
summary(HoneyModel)
TukeyHSD(HoneyModel)
# Significant difference in honey between treatments.
# C and QS=A
# TF and TFQ=B
###############################################################
# Survival Figure
Conrad$SurvivalBINY <- ifelse(Conrad$Survival=="Yes",1,0)
SurvivalSum <- ddply(Conrad, c("Treatment"), summarise,
n = length(SurvivalBINY),
mean = mean(SurvivalBINY, na.rm=TRUE),
sd = sd(SurvivalBINY, na.rm = TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "black", "blue")
plot1 <- ggplot(SurvivalSum, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Treatment", y = "% Survival")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors, name="", labels=c("Stationary", "Migratory")) + theme(legend.position=c(2, 2)) + scale_y_continuous(labels = scales::percent)
# chi square testing Survival
chisq.test(x=Conrad$Treatment, y=Conrad$Survival)
# significant difference between treatments
library("lme4")
Fullmod4 <- glmer(data=Conrad, formula = SurvivalBINY~Treatment + (1|ID), family = binomial(link = "logit"))
###############################################################
# Strength Figure
StrengthSum <- ddply(Conrad, c("Treatment"), summarise,
n = length(Strength),
mean = mean(Strength, na.rm=TRUE),
sd = sd(Strength, na.rm = TRUE),
se = sd / sqrt(n))
colors <- c("slategray3", "dodgerblue4", "black", "blue")
plot1 <- ggplot(StrengthSum, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Treatment", y = "Brood Area (sq. inches)")
plot1 + theme_minimal(base_size = 17) + coord_cartesian(ylim = c(0, 600)) + scale_fill_manual(values=colors, name="", labels=c("Stationary", "Migratory")) + theme(legend.position=c(2, 2))
#ANOVA on Strength
StrengthModel <- aov(data=Conrad, Strength~Treatment)
summary(StrengthModel)
#No significant difference in brood area between treatments
