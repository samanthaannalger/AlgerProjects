fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
View(HardyWeinberg)
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
pp <- 0.7
HardyWeinberg(pp)
HardyWeinberg(1.2)
HardyWeinberg2 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
return("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
library(ggmap)
install.packages("ggmap")
install.packages("ggplot2")
library(ggmap)
library(ggplot2)
Vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google", TRUE, TRUE)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google")
ggmap(vtMap)
vtMap
ggmap(vtMap)
map(vtMap)
install.packages("maps")
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
vtMap
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
ggmap(vtMap)
install.packages("ggproto")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
.75*350
x <- c("ggmap", "rdgal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x)
lapply(x, library, character.only = TRUE)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',configure.args="--with-proj-include=/sw/proj/4.9.2/include --with-proj-lib=/sw/proj/4.9.2/lib")
libray(rdgal)
library(rdgal)
require(rdgal)
library(tmap) # load tmap package
tmap_mode="plot"
# load spatial data included in the tmap package
data("World", "metro")
# Try typing head(World$...) or head(metro@...) to see the type of data...
head(World@data)
quick plot example:
qtm(World, fill = "income_grp", text = "iso_a3", text.size = "AREA") # use "World$" to see the two attributes: income_grp and iso_a3, text.size= area: text is sized increasingly with coutry area size.
citation("vegan")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
log(3640689.838+1)
log10(3640689.838+1)
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
remove.packages("mgcv", lib = "../packrat/lib.R")
install.packages("mgcv")
install.packages("mgcv")
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
install.packages("Matrix")
install.packages("Matrix")
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
?fluidRow
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
theme = shinytheme("cerulean"),
navbarPage("VT BeekApp",
tabPanel("About",
box(status = "primary",
solidHeader = F,
collapsible = F,
width = 12,
fluidRow(column(width=5,
h4("Welcome to BeekApp"),
h6("Home of Vermont's Registered Apiary Data"),
column(width=2, align="center",
img(src="BeePic.JPG", height = "150px")))),
h4("Welcome to BeekApp"),
h6("Home of Vermont's Registered Apiary Data"),
p("In 2017, Vermont's Apiary Inspection Program began collecting data on beekeeping practices and colony loss. Now, you can explore Vermont state trends with BeekApp."),
p("All data were collected by the Vermont Department of Agriculture Apiary Inspection Program. Data were collected from Apiary Registration and Beekeeper Censuses. State wide trends are shown. Beekeeper personal information and apiary locations are kept confidential."),
br(),
br(),
br(),
uiOutput("tab")),
navbarMenu("Maps",
tabPanel("Apiary Density",
mainPanel(
h3("Apiary Density"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap")),
tabPanel("Table",
DT::dataTableOutput("sum")),
tabPanel("Description",
h5("Apiary Density"),
p("Map and table display the total number of registered apiaries in Vermont by county"))))),
tabPanel("Beekeeper Density",
mainPanel(
h3("Beekeeper Density"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap2")),
tabPanel("Table",
DT::dataTableOutput("sum2")),
tabPanel("Description",
h5("Beekeeper Density"),
p("Map and table display the total number of registered beekeepers in Vermont by county"))))),
tabPanel("Colony Loss",
mainPanel(
h3("% Annual Colony Loss (2017)"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap3")),
tabPanel("Table",
DT::dataTableOutput("sum3")),
tabPanel("Description",
h5("% Annual Colony Loss (2017)"),
p("Map and table display county averages for % colony loss during the 2016-2017 season"))))),
tabPanel("Mite Monitoring",
mainPanel(
h3("% Mite Monitoring"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap4")),
tabPanel("Table",
DT::dataTableOutput("sum4")),
tabPanel("Description",
h5("% Mite Monitoring"),
p("Map and table display county level data for the % of apiaries managed by beekeepers who reported using mite monitoring practices")))))),
# creating an ouput for the table
navbarMenu("Data",
tabPanel("Registrations",
mainPanel(
br(),
h3("Registrations by beekeeper type"),
br(),
plotlyOutput('BeekPlot', height = "350px"),
DT::dataTableOutput("BeekTable"))
),
tabPanel("Colony Loss",
mainPanel(
h3("Colony losses"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Loss Summary",
br(),
p("Annual colony loss by beekeepers type (2017)."),
plotlyOutput("BeekLoss", height = "350px"),
DT::dataTableOutput("BeekTable2")),
tabPanel("Losses Explained",
br(),
p("Explanations provided by beekeepers for their colony losses."),
plotlyOutput("LossExp", height = "500px"),
plotlyOutput("Other")))
)),
tabPanel("Pest Management",
mainPanel(
h3("Pest Management"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Mite Monitoring",
br(),
p("The percentage of beekeepers who reported monitoring Varroa mites in their colonies."),
plotlyOutput("pie", height = "350px")),
tabPanel("Monitoring Methods",
br(),
p("The methods beekeepers report using to monitor Varroa mites in their colonies."),
plotlyOutput("MiteMethods", height = "500px")),
tabPanel("Treatments ",
br(),
br(),
p("under construction"),
plotlyOutput("TreatPlot", height = "500px"))))),
tabPanel("Challenges",
mainPanel(
h3("Challenges"),
p("We asked VT beekeepers to tell us about the biggest challenges they face as beekeepers and here are the collective results displayed in a wordcloud. Words appear larger if they were mentioned more often by beekeepers."),
p("Use the slider bars to filter results. Select how often words were mentioned using the 'Minimum Frequency' slider. Choose to see how many words appear using the 'Maximum Number of Words' slider."),
br(),
br(),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
sliderInput("freq",
"Minimum Frequency:",
min = 1,  max = 30, value = 10),
sliderInput("max",
"Maximum Number of Words:",
min = 1,  max = 200,  value = 41)),
mainPanel( # Show Word Cloud
plotOutput("cloud",width= "600px", height = "500px")
)
)
)
))))
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/BeekApp')
# Samantha Alger
#Negative Strand Analysis and figures
# 4/5/2018
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
library("ggplot2")
library("dplyr")
library("lme4")
library("car")
library("plyr")
# load in data
Melt <- read.csv("USDAplate1Melt.csv", header=TRUE, stringsAsFactors=FALSE)
Cq <- read.csv("USDAplate1cq.csv", header=TRUE, stringsAsFactors=FALSE)
BombSurv <- read.csv("BombSurvNHBS.csv", header=TRUE, stringsAsFactors=FALSE)
# remove unwanted sites and bombus species
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
# subset BombSurv:
Bomb <- dplyr::select(BombSurv, site, Ct_mean, sample_name, species, apiary_near_far, Density, genome_copbee, norm_genome_copbeeHB, target_name, virusBINY_PreFilter)
names(Bomb)[3] <- "Sample"
# merge data:
#Dat <- merge(Melt, Cq, by = c("Sample", "Target"))
#str(Dat)
# Merge Dat and Bomb
Dat <- merge(Melt, Bomb, by = c("Sample","target_name"),  all.y=TRUE)
#Dat <- merge(Melt, Bomb, by = c("Sample"),  all.x=TRUE)
DatClean <- Dat
#DatClean <- DatClean[!(DatClean$Cq>33),]
#DatClean <- DatClean[!(DatClean$Melt<78),]
DatClean$BinaryNeg <- ifelse(DatClean$Melt > 0, 1, 0)
DatClean$BinaryNeg[is.na(DatClean$BinaryNeg)] <- 0
# Subset for the two viruses:
# For BQCV:
BQ <- DatClean[DatClean$target_name=="BQCV",]
# For DWV:
DW <- DatClean[DatClean$target_name=="DWV",]
# Fig and stats for BQCV:
BQ <- BQ[ which(BQ$virusBINY_PreFilter=="1"), ]
#ddply summarize:
plotdat <- ddply(BQ, c("target_name", "apiary_near_far"), summarise,
n = length(BinaryNeg),
mean = mean(BinaryNeg, na.rm=TRUE),
sd = sqrt(((mean(BinaryNeg))*(1-mean(BinaryNeg)))/n))
plotdat$apiary_near_far <- ifelse(plotdat$apiary_near_far==0, "No Apiary", "Apiary")
label.df <- data.frame(Group = c("S1", "S2"),
Value = c(6, 9))
plot1 <- ggplot(plotdat, aes(x=apiary_near_far, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
fill =   "white",
position=position_dodge()) + labs(y="BQCV Replication", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent) + guides(fill=FALSE)
DatCleanNeg <- DatClean[DatClean$target_name=="BQCV",]
chisq.test(DatCleanNeg$BinaryNeg, DatCleanNeg$apiary_near_far)
chisq.test(DatCleanNeg$BinaryNeg, DatCleanNeg$species)
#Calculate percentage of replicating infections:
mean(BQ$BinaryNeg)
#ddply summarize for species:
plotdat <- ddply(BQ, c("target_name", "species"), summarise,
n = length(BinaryNeg),
mean = mean(BinaryNeg, na.rm=TRUE),
sd = sqrt(((mean(BinaryNeg))*(1-mean(BinaryNeg)))/n))
plot1 <- ggplot(plotdat, aes(x=species, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",fill = "white",
position=position_dodge()) + labs(y="Prevalence", x="Species") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent) + guides(fill=FALSE)
#Percentage of replication by species:
plotdat
# subset for virus positive bees
DW <- DW[ which(DW$virusBINY_PreFilter=="1"), ]
plotdat2 <- ddply(DW, c("target_name", "apiary_near_far"), summarise,
n = length(BinaryNeg),
mean = mean(BinaryNeg, na.rm=TRUE),
sd = sqrt(((mean(BinaryNeg))*(1-mean(BinaryNeg)))/n))
plotdat2$apiary_near_far <- ifelse(plotdat2$apiary_near_far==0, "No Apiary", "Apiary")
label.df <- data.frame(Group = c("S1", "S2"),
Value = c(6, 9))
plot1 <- ggplot(plotdat2, aes(x=apiary_near_far, y=mean, fill=target_name)) +
geom_bar(stat="identity", color="black",
fill =   "white",
position=position_dodge()) + labs(y="DWV Replication", x="Site Type") + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 18) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent) + guides(fill=FALSE)
library(shiny); runApp('~/AlgerProjects/VTApiaries/Scripts/ApiaryDat.R')
runApp('~/AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('~/AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
