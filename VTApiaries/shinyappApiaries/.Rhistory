#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
################################################
#Merging the two dataframes for shiny app:
#select only columns we need:
histDat <- dplyr::select(histDat, LocationID, Beektype, AccountName, BeeKeeperStatus, n)
FullApiaryDat <- dplyr::select(FullApiaryDat, -AccountName, -BeeKeeperStatus)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
head(Shinydf)
colnames(Shinydf)
BeekTypeDF <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeDF
BeekTypeDF <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount, na.rm = TRUE),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeDF
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
library(ggplot2)
runApp('ShinyBeeks')
runApp('ShinyBeeks')
BeekTypeDF
BeekTypeStats <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount, na.rm = TRUE),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
runApp('ShinyBeeks')
BeekTypeStats <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount, na.rm = TRUE),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF
BeekTypeDF$Percent
BeekTypeStats <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount, na.rm = TRUE),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF$Percent
BeekTypeDF
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
BeekTypeStats
BeekTypeStats$perApiaries <- round(100*BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries), digits=2)
BeekTypeStats
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
###########################################################################################
# Vermont Apiary Inspeciton Data
# Samantha Alger
# June 10, 2018
###########################################################################################
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/VTApiaries/")
# source my packages
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(tidyr)
library(slam)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
###########################################################
# Read in Data
FullApiaryDat <- read.csv("CSV_files/VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
HistDat <- read.csv("CSV_files/histDat.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryDat <- read.csv("CSV_files/singles.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
states <- read.csv("CSV_files/USstates.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("CSV_files/RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryRegs2017 <- read.csv("CSV_files/2017ApiaryRegs.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
#Remove duplicate data so that there is only a single row for each beekeeper (to be used in all analyses except apiary-level analyses and vendor information)
Singles <- FullApiaryDat[!duplicated(FullApiaryDat$BeekeeperID), ]
#write.csv(Singles, file = "singles.csv")
##################################################
#########################################################
#########################################################
# Basic Statistics:
#########################################################
#########################################################
# Calculating state level losses:
AnnLoss<- RegData[! is.na(RegData$PerTotLoss), ]
mean(AnnLoss$PerTotLoss)
# 38.8%: Total Annual
WinterLoss<- RegData[! is.na(RegData$PerWinLoss), ]
mean(WinterLoss$PerWinLoss)
# 35.8% Winter Loss
# Summer loss??
#Calculating apiary and colony totals:
# Subset to only include status="Active" beekeepers (remove NAs too)
ActiveOnly<- RegData[! is.na(RegData$BeeKeeperStatus), ]
ActiveOnly<- ActiveOnly[ which(ActiveOnly$BeeKeeperStatus == "Active"), ]
nrow(ActiveOnly)
# 1091 Registered Apiaries
#How many apiaries are delinquent?
DelOnly<- RegData[ which(RegData$BeeKeeperStatus == "Delinquent"), ]
nrow(DelOnly)
# 465 delinquent apiaries
#How many registered Colonies?
ActiveOnly<- ActiveOnly[! is.na(ActiveOnly$ColonyCount), ]
sum(ActiveOnly$ColonyCount)
# 8,450 registered colonies
#Calculate the number of registered beekeepers:
ActiveBeeks <- ActiveOnly[!duplicated(ActiveOnly$BeekeeperID), ]
nrow(ActiveBeeks)
# 743 Active registered beekeepers
DelBeeks <- DelOnly[!duplicated(DelOnly$BeekeeperID), ]
nrow(DelBeeks)
#254 Delinquent beekeepers
#Determine the number of apiaries each beekeeper has registered and create a histogram....
#For registered beekeepers:
library(data.table)
histDat = data.table(ActiveOnly)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
###############################################
#Code apiaries as owned by either hobbists, sideliners, or commericial apiaries
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
# Write.csv hist dat for shiny app demo
#write.csv(histDat,"histDat.csv")
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeStats
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF
#Are there significant differences in hive losses among beekeeper types?
#Currenlty no significant differences! p = 0.09
BeekTypeLoss <- aov(histDat$PerTotLoss~histDat$Beektype)
summary(BeekTypeLoss)
# Check to see which beekeepers told us about hive losses... #MISSING LOTS OF COLONY LOSS DATA FROM COMMERICIAL BEEKEEPERS!!
NAcheck<-histDat[is.na(histDat$PerTotLoss),]
table(NAcheck$Beektype)
#Create figure showing number of colonies and number of apiaries as BeekType.
#Create labels.....
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner", "Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeStats
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = round(100*mean(PerTotLoss, na.rm = TRUE), digits=2)
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = round(100*mean(PerTotLoss, na.rm = TRUE), digits=2),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeStats
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = round(100*mean(PerTotLoss, na.rm = TRUE), digits=2),
sd = sd(100*PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekTypeStats <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount, na.rm = TRUE),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- round(100*BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries), digits=2)
BeekTypeStats$perColonies <- round(100*BeekTypeStats$colonies/sum(BeekTypeStats$colonies), digits=2)
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekLoss <- ggplot(BeekTypeDF, aes(y = loss, x = Beektype) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekLoss <- ggplot(BeekTypeDF, aes(y = loss, x = Beektype) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4))
BeekLoss <- ggplot(BeekTypeDF, aes(y = loss, x = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
guides(fill=guide_legend(title="Beekeeper Type")) +
geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeeLoss
BeekLoss
BeekLoss <- ggplot(BeekTypeDF, aes(y = loss, x = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
guides(fill=guide_legend(title="Beekeeper Type"))
BeekLoss
BeekLoss <- ggplot(BeekTypeDF, aes(y = loss, x = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
guides(fill=guide_legend(title="Beekeeper Type"))
BeekLoss
BeekTypeDF
BeekTypeStats
BeekLoss <- ggplot(BeekTypeStats, aes(y = loss, x = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
guides(fill=guide_legend(title="Beekeeper Type"))
BeekLoss
BeekTypeStats$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekTypeStats$Beektype <- factor(BeekTypeStats$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekLoss <- ggplot(BeekTypeStats, aes(y = loss, x = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
guides(fill=guide_legend(title="Beekeeper Type"))
BeekLoss
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
runApp('shinyappApiaries/ShinyBeeks')
sumtable<- function(data=data) {
data$PerTotLoss2 <- data$PerTotLoss*100
data = apply_labels(data,
ColonyCount = "Summary",
PerTotLoss2 = "Annual Colony Loss",
Beektype = "Beekeeper Type")
sumtable<- data %>%
tab_cells(ColonyCount) %>%
tab_cols(Beektype, total()) %>%
tab_stat_sum("Colonies") %>%
tab_stat_valid_n("Apiaries") %>%
tab_cells(PerTotLoss2) %>%
tab_stat_mean("% Average") %>%
tab_pivot()
return(sumtable)
}
sumtable(Shinydf)
# Shiny App for Beeks!
# July 26, 2018
# Samantha Alger
# Clear memory of characters:
rm(list=ls())
library(rgdal)
library(rgeos)
library(plyr)
library(data.table)
library(leaflet)
library(rgdal)
library(shiny)
library(shinythemes)
library(markdown)
library(knitr)
library(DT)
library(expss)
library(ggplot2)
#library(lemon)
#library(kableExtra)
#set working director
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries")
#upload data
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
##############################################################
# DATA PREP:
##############################################################
# Data cleaning to make final df:
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
################################################
#Merging the two dataframes for shiny app:
#select only columns we need:
histDat <- dplyr::select(histDat, LocationID, Beektype, AccountName, BeeKeeperStatus, n)
FullApiaryDat <- dplyr::select(FullApiaryDat, -AccountName, -BeeKeeperStatus)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
#Create Summary data for Chloropleth mapping
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = round(100* mean(PerTotLoss, na.rm=TRUE), digits = 2),
apiaries = length(n),
colonies = sum(ColonyCount),
beeks = length(unique(unlist(BeekeeperID[!is.na(BeekeeperID)]))),
n = length(n),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]),
MiteTrue = length(MiteCounts[MiteCounts==TRUE]),
MiteFalse = length(MiteCounts[MiteCounts==FALSE]),
PerMiteTrue = round(100*(MiteTrue/length(MiteCounts [!is.na(MiteCounts)])),digits = 2))
#rename countyname column
names(CountySummary)[1] <- "NAME"
# read in geojson data (county basemaps)
vtcounties <- rgdal::readOGR(dsn="cb_2017_us_county_5m.geojson")
#subset to only include vermont
vermont <- vtcounties[vtcounties@data$STATEFP == 50, ]
#merge the summary data with the base map data
vermont <- merge(vermont, CountySummary)
# Preparing df for map summary tables:
#rename the 'data' slot of the vermont spatial dataframe. Use the '@' symbol to refer to the slot name 'data', and drop unused levels to reduce the df to the VT counties only:
vermontdf <- droplevels(vermont@data)
#select only columns we will need for the summary tables
vermontdf<- dplyr::select(vermontdf, NAME, Loss, apiaries, colonies, nLoss, n, PerMiteTrue, beeks)
####################################################################
# Data prep for Analyses Tab
###################################################################
# Apiary and Colony number by beekeeper Type:
BeekTypeStats <- ddply(Shinydf, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount, na.rm = TRUE),
loss = round(100*mean(PerTotLoss, na.rm = TRUE),digits=2),
sd = sd(100*PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- round(100*BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries), digits=2)
BeekTypeStats$perColonies <- round(100*BeekTypeStats$colonies/sum(BeekTypeStats$colonies), digits=2)
# Code for stacked bar plot
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
#Reorder factors for stacked bar plot:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
# Reorder factors for colony loss bar plot:
BeekTypeStats$Beektype <- factor(BeekTypeStats$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
####################################################################
# END Data prep for Analyses Tab
###################################################################
####################################################################
# function name: sumtable
# description: creates summary table for subsetted df of apiaries
# parameters:
# data = subsetted dataframe to be used
# returns: a formatted table
####################################################################
sumtable<- function(data=data) {
data$PerTotLoss2 <- data$PerTotLoss*100
data = apply_labels(data,
ColonyCount = "Summary",
PerTotLoss2 = "Annual Colony Loss",
Beektype = "Beekeeper Type")
sumtable<- data %>%
tab_cells(ColonyCount) %>%
tab_cols(Beektype, total()) %>%
tab_stat_sum("Colonies") %>%
tab_stat_valid_n("Apiaries") %>%
tab_cells(PerTotLoss2) %>%
tab_stat_mean("% Average") %>%
tab_pivot()
return(sumtable)
}
sumtable(Shinydf)
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyMapApp')
runApp('ShinyBeeks')
colnames(shinydf)
colnames(Shinydf)
Singles <- Shinydf[!duplicated(Shinydf$BeekeeperID), ]
length(Singles)
length(Shinydf)
rm(list=ls())
library(rgdal)
library(rgeos)
library(plyr)
library(data.table)
library(leaflet)
library(rgdal)
library(shiny)
library(shinythemes)
library(markdown)
library(knitr)
library(DT)
library(expss)
library(ggplot2)
#library(lemon)
#library(kableExtra)
#set working director
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries")
#upload data
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
##############################################################
# DATA PREP:
##############################################################
# Data cleaning to make final df:
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
################################################
#Merging the two dataframes for shiny app:
#select only columns we need:
histDat <- dplyr::select(histDat, LocationID, Beektype, AccountName, BeeKeeperStatus, n)
FullApiaryDat <- dplyr::select(FullApiaryDat, -AccountName, -BeeKeeperStatus)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
length(Shinydf)
str(Shinydf)
Singles <- Shinydf[!duplicated(Shinydf$BeekeeperID), ]
str(Singles)
runApp('ShinyBeeks')
runApp('ShinyBeeks')
runApp('ShinyMapApp')
