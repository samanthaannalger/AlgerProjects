data[1,2]
help(which)
sample(x, 1000, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 1000, replace = FALSE)
x <- runif(1:10)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 4, replace = FALSE)
# if you sample with replacement, you can sample at a size larger than the original object
#in this case, there will be numbers repeated
sample(x, 11, replace = TRUE)
```
shiny::runApp('AlgerProjects/demo')
# Multi-space separator
cat(x, sep=" . ")
data <- rep("blue","green", each=3)
rep_len(c("finch","thrush","warbler"),20)
bird<- rep_len(c("finch","thrush","warbler"),20)
which=="finch"
which(bird =="finch")
help(which)
x <- c(1,NA,2,NA,3)
#which positions are the
which(!is.na(x))[3]
help(atan2)
help(atan2)
help(atan2)
atan2(3,4)
hep(assign)
help(assign)
help(signif)
sigif(7.462527,digits=4)
signif(7.462527,digits=4)
lst <- list('one','two','three')
a <- lst[1]
class(a)
## returns "list"
a <- lst[[1]]
class(a)
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
chr [1:3] "a" "b" "c"
str(alist[1])
List of 1
$ : chr [1:3] "a" "b" "c"
str(alist[[1]][1])
chr "a"
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7))
str(alist[[1]])
str(alist[1])
alist[[1]]
alist[1]
alist[[1]]
alist[1]
lst <- list('one','two','three')
a <- lst[1]
class(a)
a <- lst[[1]]
class(a)
lst[[2]]
lst[1]
lst[[1]]
A = matrix(c(2,4,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrows=2,ncol=3,byrow=TRUE)
A = matrix(c(2,4,3,1,5,7),nrow=2,ncol=3,byrow=TRUE)
print(A)
A[[1]]
A[1]
A[,1]
A[[,1]]
A[[1]]
print(A)
A[[4]]
A[[6]]
A[,1]
assign("z", 5)
z
assign("finch",2, envir=birds)
assign("finch",2, envir=bird)
help(which)
sum(3,2)
`+`(3,2)
y <- 3
print(yy)
`<-`(yy,3) # infix
print(yy)
print(read.table)
sum(3,2)
print(sum)
sum()
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg <- function(p=runif(1)) {
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
View(HardyWeinberg)
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
HardyWeinberg()
pp <- 0.7
HardyWeinberg(pp)
HardyWeinberg(1.2)
HardyWeinberg2 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
return("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
library(ggmap)
install.packages("ggmap")
install.packages("ggplot2")
library(ggmap)
library(ggplot2)
Vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google", TRUE, TRUE)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google")
ggmap(vtMap)
vtMap
ggmap(vtMap)
map(vtMap)
install.packages("maps")
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
vtMap
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
ggmap(vtMap)
install.packages("ggproto")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
.75*350
x <- c("ggmap", "rdgal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x)
lapply(x, library, character.only = TRUE)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',configure.args="--with-proj-include=/sw/proj/4.9.2/include --with-proj-lib=/sw/proj/4.9.2/lib")
libray(rdgal)
library(rdgal)
require(rdgal)
library(tmap) # load tmap package
tmap_mode="plot"
# load spatial data included in the tmap package
data("World", "metro")
# Try typing head(World$...) or head(metro@...) to see the type of data...
head(World@data)
quick plot example:
qtm(World, fill = "income_grp", text = "iso_a3", text.size = "AREA") # use "World$" to see the two attributes: income_grp and iso_a3, text.size= area: text is sized increasingly with coutry area size.
citation("vegan")
library("ggplot2")
library("dplyr")
library("plyr")
library("spdep")
library("lme4")
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Packages
library("RColorBrewer")
log(3640689.838+1)
log10(3640689.838+1)
shiny::runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
runApp('AlgerProjects/VTApiaries/shinyappApiaries/ShinyMapApp')
var map = L.map("map");
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss),
apiaries = length(n),
colonies = sum(ColonyCount))
# Clear memory of characters:
rm(list=ls())
library(dplyr)
library(data.table)
#set working director
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries")
#upload data
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Data cleaning to make final df:
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
#select only columns we need:
histDat <- dplyr::select(histDat, LocationID, Beektype, AccountName, BeeKeeperStatus, n)
FullApiaryDat <- dplyr::select(FullApiaryDat, -AccountName, -BeeKeeperStatus)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
table(Shinydf$CountyName)
length(Shinydf)
View(Shinydf)
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss),
apiaries = length(n),
colonies = sum(ColonyCount))
library(plyr)
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss),
apiaries = length(n),
colonies = sum(ColonyCount))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss, na.rm=TRUE))
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss, na.rm=TRUE)
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss, na.rm=TRUE))
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
PerTotLoss = mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss, na.rm=TRUE))
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = 100* mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = 100* mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]),
MiteCounts = length(MiteCounts[MiteCounts==TRUE]))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = 100* mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]),
MiteTrue = length(MiteCounts[MiteCounts==TRUE])
MiteFalse = length(MiteCounts[MiteCounts==FALSE]))
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = 100* mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]),
MiteTrue = length(MiteCounts[MiteCounts==TRUE]),
MiteFalse = length(MiteCounts[MiteCounts==FALSE]))
CountySummary
CountySummary <- ddply(Shinydf,c("CountyName"), summarise,
Loss = 100* mean(PerTotLoss, na.rm=TRUE),
apiaries = length(n),
colonies = sum(ColonyCount),
nLoss = length(PerTotLoss [!is.na(PerTotLoss)]),
MiteTrue = length(MiteCounts[MiteCounts==TRUE]),
MiteFalse = length(MiteCounts[MiteCounts==FALSE]),
PerMiteTrue = MiteTrue/length(MiteCounts [!is.na(MiteCounts)]))
CountySummary
library(leaflet)
map = L.map('map').setView([37.8, -96], 4);
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
library(geojsonio)
library(geojsonio)
install.packages(geojsonio)
install.packages("geojsonio")
install.packages("geojson")
library(geojson)
states <- geojson_read("json/us-states.geojson", what = "sp")
install.packages("rgdal")
library(rgdal)
library(rgdal)
nycounties <- geojsonio::geojson_read("json/nycounties.geojson",
what = "sp")
nycounties <- rgdal::geojson_read("json/nycounties.geojson",
what = "sp")
brew install gdal
brew.install(gdal)
install.packages(gdal)
install.packages(GDAL)
install.packages("geojsonio")
library(geojsonio)
library("geojsonio")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/geojsonio")
library("geojsonio")
library(geojsonio)
install.packages("geojsonio")
library("geojsonio")
install.packages("geojsonio")
library("geojsonio")
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
install.packages("rgeos", type = "source")
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
library("rgdal")
library("rgeos")
install.packages("geojsonio")
library(geojsonio)
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
install.packages("rgeos", type = "source")
install.packages("geojsonio")
library(geojsonio)
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/geojsonio")
