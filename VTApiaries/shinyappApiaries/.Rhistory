),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("LossPlot")
)
)
)
# Data Preprocessing:
LossDat <- Shinydf
#rename TRUE and FALSE as YEs and NO, ** need to fix so it's not 'hard coded' for future analyses.
LossDat$MiteCounts <- factor(LossDat$MiteCounts, labels = c("No", "Yes"))
# Remove all rows without vendor listed:
LossDat <- LossDat[! is.na(LossDat$Beektype), ]
LossDat <- LossDat[! is.na(LossDat$MiteCounts), ]
# Define server logic to plot various variables against colony loss ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$LossPlot functions
formulaText <- reactive({
paste("PerTotLoss ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against loss ----
# and only exclude outliers if requested
output$LossPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = LossDat,
#outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
runApp()
rsconnect::setAccountInfo(name='apiarydata',
token='1CF89B286C69A5E8AE240F51FDC03728',
secret='A0+aSwH0qKjhVJ9sUvnd3QJsjZwwRmCPRmXklIEI')
# Samantha Alger
# July 14,2018
# Shiny App for Apiary Data DEMO
###########################################################################################
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries/")
library(shiny)
library(data.table)
library(rsconnect)
# Read in Data
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
#######
#Merging the two dataframes for shiny app:
#select only columns we need:
histDat <- dplyr::select(histDat,LocationID, Beektype, AccountName, n)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
# Define UI for colonyloss app ----
ui <- fluidPage(
# App title ----
titlePanel("Colony Loss"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against loss ----
selectInput("variable", "Variable:",
c("Beekeeper Type" = "Beektype",
"Mite Counts" = "MiteCounts",
"Supplemental Feed" = "SupplementalFeed"
)),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("LossPlot")
)
)
)
# Data Preprocessing:
LossDat <- Shinydf
#rename TRUE and FALSE as YEs and NO, ** need to fix so it's not 'hard coded' for future analyses.
LossDat$MiteCounts <- factor(LossDat$MiteCounts, labels = c("No", "Yes"))
# Remove all rows without vendor listed:
LossDat <- LossDat[! is.na(LossDat$Beektype), ]
LossDat <- LossDat[! is.na(LossDat$MiteCounts), ]
# Define server logic to plot various variables against colony loss ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$LossPlot functions
formulaText <- reactive({
paste("PerTotLoss ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against loss ----
# and only exclude outliers if requested
output$LossPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = LossDat,
#outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
shinyApp(ui, server)
deployApp()
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries/")
library(shiny)
library(data.table)
library(rsconnect)
# Read in Data
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
#######
#Merging the two dataframes for shiny app:
#select only columns we need:
histDat <- dplyr::select(histDat,LocationID, Beektype, AccountName, n)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
# Define UI for colonyloss app ----
ui <- fluidPage(
# App title ----
titlePanel("Colony Loss"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against loss ----
selectInput("variable", "Variable:",
c("Beekeeper Type" = "Beektype",
"Mite Counts" = "MiteCounts",
"Supplemental Feed" = "SupplementalFeed"
)),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("LossPlot")
)
)
)
# Data Preprocessing:
LossDat <- Shinydf
#rename TRUE and FALSE as YEs and NO, ** need to fix so it's not 'hard coded' for future analyses.
LossDat$MiteCounts <- factor(LossDat$MiteCounts, labels = c("No", "Yes"))
# Remove all rows without vendor listed:
LossDat <- LossDat[! is.na(LossDat$Beektype), ]
LossDat <- LossDat[! is.na(LossDat$MiteCounts), ]
# Define server logic to plot various variables against colony loss ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$LossPlot functions
formulaText <- reactive({
paste("PerTotLoss ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against loss ----
# and only exclude outliers if requested
output$LossPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = LossDat,
#outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
shinyApp(ui, server)
deployApp()
shinyApp(ui, server)
# Samantha Alger
# July 14,2018
# Shiny App for Apiary Data DEMO
###########################################################################################
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries/")
library(shiny)
library(data.table)
library(rsconnect)
# Read in Data
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
#######
#Merging the two dataframes for shiny app:
#select only columns we need:
histDat <- dplyr::select(histDat,LocationID, Beektype, AccountName, n)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
# Define UI for colonyloss app ----
ui <- fluidPage(
# App title ----
titlePanel("Colony Loss"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against loss ----
selectInput("variable", "Variable:",
c("Beekeeper Type" = "Beektype",
"Mite Counts" = "MiteCounts",
"Supplemental Feed" = "SupplementalFeed"
)),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("LossPlot")
)
)
)
# Data Preprocessing:
LossDat <- Shinydf
#rename TRUE and FALSE as YEs and NO, ** need to fix so it's not 'hard coded' for future analyses.
LossDat$MiteCounts <- factor(LossDat$MiteCounts, labels = c("No", "Yes"))
# Remove all rows without vendor listed:
LossDat <- LossDat[! is.na(LossDat$Beektype), ]
LossDat <- LossDat[! is.na(LossDat$MiteCounts), ]
# Define server logic to plot various variables against colony loss ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$LossPlot functions
formulaText <- reactive({
paste("PerTotLoss ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against loss ----
# and only exclude outliers if requested
output$LossPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = LossDat,
#outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
shinyApp(ui, server)
deployApp()
runApp('~/AlgerProjects/VTApiaries/shinyapp')
runApp('~/AlgerProjects/VTApiaries/shinyapp')
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
setwd("~/AlgerProjects/VTApiaries/shinyappApiaries/")
library(shiny)
library(data.table)
library(rsconnect)
# Read in Data
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
#select only columns we need:
histDat <- dplyr::select(histDat,LocationID, Beektype, AccountName, n)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
# Define UI for colonyloss app ----
ui <- fluidPage(
# App title ----
titlePanel("Colony Loss"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against loss ----
selectInput("variable", "Variable:",
c("Beekeeper Type" = "Beektype",
"Mite Counts" = "MiteCounts",
"Supplemental Feed" = "SupplementalFeed"
)),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("LossPlot")
)
)
)
# Data Preprocessing:
LossDat <- Shinydf
#rename TRUE and FALSE as YEs and NO, ** need to fix so it's not 'hard coded' for future analyses.
LossDat$MiteCounts <- factor(LossDat$MiteCounts, labels = c("No", "Yes"))
# Remove all rows without vendor listed:
LossDat <- LossDat[! is.na(LossDat$Beektype), ]
LossDat <- LossDat[! is.na(LossDat$MiteCounts), ]
# Define server logic to plot various variables against colony loss ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$LossPlot functions
formulaText <- reactive({
paste("PerTotLoss ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against loss ----
# and only exclude outliers if requested
output$LossPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = LossDat,
#outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
shinyApp(ui, server)
shinyApp(ui, server)
rsconnect::showLogs()
runApp()
runApp()
runApp()
runApp()
runApp()
LossDat$SupplementalFeed <- factor(LossDat$SupplementalFeed, labels = c("No", "Yes"))
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
library(shiny)
library(data.table)
library(rsconnect)
# Read in Data
FullApiaryDat <- read.csv("VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
histDat = data.table(RegData)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
#select only columns we need:
histDat <- dplyr::select(histDat,LocationID, Beektype, AccountName, n)
Shinydf <- merge.data.frame(FullApiaryDat,histDat, by = "LocationID", all.y = TRUE)
# Define UI for colonyloss app ----
ui <- fluidPage(
# App title ----
titlePanel("Colony Loss"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against loss ----
selectInput("variable", "Variable:",
c("Beekeeper Type" = "Beektype",
"Mite Counts" = "MiteCounts",
"Supplemental Feed" = "SupplementalFeed"
)),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("LossPlot")
)
)
)
# Data Preprocessing:
LossDat <- Shinydf
table(LossDat$SupplementalFeed)
LossDat$SupplementalFeed <- factor(LossDat$SupplementalFeed, labels = c("No", "Yes"))
table(LossDat$SupplementalFeed)
runApp()
runApp('MapDemo')
runApp('MapDemo2')
# Load libraries
library(shiny)
library(leaflet)
# Make data with several positions
data_red=data.frame(LONG=42+rnorm(10), LAT=23+rnorm(10), PLACE=paste("Red_place_",seq(1,10)))
data_blue=data.frame(LONG=42+rnorm(10), LAT=23+rnorm(10), PLACE=paste("Blue_place_",seq(1,10)))
# Initialize the leaflet map:
leaflet() %>%
setView(lng=42, lat=23, zoom=8 ) %>%
# Add two tiles
addProviderTiles("Esri.WorldImagery", group="background 1") %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group="background 2") %>%
# Add 2 marker groups
addCircleMarkers(data=data_red, lng=~LONG , lat=~LAT, radius=8 , color="black",  fillColor="red", stroke = TRUE, fillOpacity = 0.8, group="Red") %>%
addCircleMarkers(data=data_blue, lng=~LONG , lat=~LAT, radius=8 , color="black",  fillColor="blue", stroke = TRUE, fillOpacity = 0.8, group="Blue") %>%
# Add the control widget
addLayersControl(overlayGroups = c("Red","Blue") , baseGroups = c("background 1","background 2"), options = layersControlOptions(collapsed = FALSE))
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp('MapDemo')
runApp()
library(shiny)
library(leaflet)
library(ggmap)
server <- function(input, output) {
output$map <- renderLeaflet({
# Get latitude and longitude
if(input$target_zone=="Ex: Burlington"){
ZOOM=2
LAT=0
LONG=0
}else{
target_pos=geocode(input$target_zone)
LAT=target_pos$lat
LONG=target_pos$lon
ZOOM=12
}
# Plot it!
leaflet() %>%
setView(lng=LONG, lat=LAT, zoom=ZOOM ) %>%
addProviderTiles("Esri.WorldImagery")
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
absolutePanel(top=20, left=70, textInput("target_zone", "" , "Ex: Burlington, Vermont")),
br()
)
shinyApp(ui = ui, server = server)
