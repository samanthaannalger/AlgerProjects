Singles <- Shinydf[!duplicated(Shinydf$BeekeeperID), ]
mitedf <- data.frame(group = c("Did not count mites", "Counted mites"), value = c(table(Singles$MiteCounts)))
#Import data:
MiteMon<- Singles
#Create  separate dfs for analysis with specified columns:
MonMethods <- dplyr::select(MiteMon, BeekeeperID,SugarShakeYN, AlcoholWashYN, BottomBoardYN, DroneSurveyYN, OtherMiteCountYN)
#Switch df format to 'long' format:
MonMethods <- gather(MonMethods, question, response, SugarShakeYN:OtherMiteCountYN, factor_key=TRUE)
#Convert all True and False to '0' and '1' in the 'ReasonLoss' dataframe
MonMethods$response<-as.integer(as.logical(MonMethods$response))
# Preparing Data for Bar Plot
MiteMon <- ddply(MonMethods, c("question"), summarise,
n = length(response),
mean =round(100*mean(response, na.rm=TRUE), digits=2),
sd = round(100*sd(response, na.rm=TRUE), digits=2),
se = sd / sqrt(n))
#Import data:
LossDat<- Singles
#Create two separate dfs for analysis with specified columns:
ReasonLoss <- dplyr::select(LossDat, BeekeeperID, ColonyLossVarroaMiteYN, ColonyLossStarvationYN, ColonyLossBearsYN, ColonyLossAmericanFoulbroodYN, ColonyLossSwarmingYN, ColonyLossPesticidesYN, ColonyLossMitacidesYN, OtherColonyLossYN)
#Convert to long format
ReasonLoss <- gather(ReasonLoss, question, response, ColonyLossVarroaMiteYN:OtherColonyLossYN, factor_key=TRUE)
#Convert all True and False to '0' and '1' in the 'ReasonLoss' dataframe
ReasonLoss$response<-as.integer(as.logical(ReasonLoss$response))
# Preparing Data for Bar Plot
LossCause <- ddply(ReasonLoss, c("question"), summarise,
n = length(response),
mean = round(100*mean(response, na.rm=TRUE),digits=2),
sd = round(100*sd(response, na.rm=TRUE),digits=2),
se = sd / sqrt(n))
sumtable<- function(data=data) {
data$PerTotLoss2 <- data$PerTotLoss*100
data = apply_labels(data,
ColonyCount = "Sum",
PerTotLoss2 = "Colony Loss",
Beektype = "Beekeeper Type")
sumtable<- data %>%
tab_cells(ColonyCount) %>%
tab_cols(Beektype, total()) %>%
tab_stat_sum("Colonies") %>%
tab_stat_valid_n("Apiaries") %>%
tab_cells(PerTotLoss2) %>%
tab_stat_mean("% Ave") %>%
tab_pivot()
return(sumtable)
}
####################################################################
# BEGIN SHINY CODE
###################################################################
# Set default color for maps:
pal <- colorNumeric("Blues",NULL)
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage("VT BeekApp",
tabPanel("Home",
h4("Welcome to BeekApp"),
p("Home of Vermont's Registered Apiary Data"),
h5("Under Consruction")),
navbarMenu("Maps",
tabPanel("Apiary Density",
mainPanel(
h3("Apiary Density"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap")),
tabPanel("Table",
DT::dataTableOutput("sum")),
tabPanel("Description",
h5("Apiary Density"),
p("Map and table display the total number of registered apiaries in Vermont by county"))))),
tabPanel("Beekeeper Density",
mainPanel(
h3("Beekeeper Density"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap2")),
tabPanel("Table",
DT::dataTableOutput("sum2")),
tabPanel("Description",
h5("Beekeeper Density"),
p("Map and table display the total number of registered beekeepers in Vermont by county"))))),
tabPanel("Colony Loss",
mainPanel(
h3("% Annual Colony Loss (2017)"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap3")),
tabPanel("Table",
DT::dataTableOutput("sum3")),
tabPanel("Description",
h5("% Annual Colony Loss (2017)"),
p("Map and table display county averages for % colony loss during the 2016-2017 season"))))),
tabPanel("Mite Monitoring",
mainPanel(
h3("% Mite Monitoring"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Map", leafletOutput("mymap4")),
tabPanel("Table",
DT::dataTableOutput("sum4")),
tabPanel("Description",
h5("% Mite Monitoring"),
p("Map and table display county level data for the % of apiaries managed by beekeepers who reported using mite monitoring practices")))))),
# creating an ouput for the table
navbarMenu("Data",
tabPanel("Registrations",
mainPanel(
h3("Registrations by beekeeper type"),
br(),
plotlyOutput('BeekPlot', height = "350px"),
DT::dataTableOutput("BeekTable"))),
tabPanel("Colony Loss",
mainPanel(
h3("Colony losses"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Loss Summary (2017)",
plotlyOutput("BeekLoss", height = "350px"),
DT::dataTableOutput("BeekTable2")),
tabPanel("Losses Explained",
plotlyOutput("LossExp", height = "500px"),
plotlyOutput("Other")))
)),
tabPanel("Pest Management",
mainPanel(
h3("Pest Management"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Mite Monitoring",
plotlyOutput("pie", height = "350px")),
tabPanel("Monitoring Methods",
plotlyOutput("MiteMethods", height = "500px")),
tabPanel("Treatments ",
br(),
br(),
p("under construction"),
plotlyOutput("TreatPlot", height = "500px"))))),
tabPanel("Challenges",
mainPanel(
h3("Challenges"),
p("We asked VT beekeepers to tell us about the biggest challenges they face as beekeepers and here are the results"),
br(),
br(),
p("under construction")
)))))
server <- function(input,output, session){
output$mymap <- renderLeaflet({
m <- leaflet(vermont) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.90,
fillColor = ~pal(apiaries),
label = ~paste0(NAME, ": ", formatC(apiaries, big.mark = ","))) %>%
addLegend(pal = pal, values = ~apiaries, opacity = 1, title = "# Apiaries")
m })
apiaryTab = dplyr::select(vermontdf, NAME, apiaries)
output$sum <- DT::renderDataTable ({
DT::datatable(apiaryTab,
rownames = FALSE,
colnames = c("County", "# Apiaries"),
options = list(pageLength=17, dom = 'ft'))
})
output$mymap2 <- renderLeaflet({
m <- leaflet(vermont) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(beeks),
label = ~paste0(NAME, ": ", formatC(beeks, big.mark=","))) %>%
addLegend(pal = pal, values = ~beeks, opacity = 1, title = "# Beekeepers")
m })
beekTab = dplyr::select(vermontdf, NAME, beeks)
output$sum2 <- DT::renderDataTable ({
DT::datatable(beekTab,
rownames = FALSE,
colnames = c("County", "# Beekeepers"),
options = list(pageLength=17, dom = 'ft'))
})
output$mymap3 <- renderLeaflet({
pal <- colorNumeric("YlOrRd", NULL)
m <- leaflet(vermont) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(Loss),
label = ~paste0(NAME, ": ", formatC(Loss, big.mark = ","),"%, n=",nLoss)) %>%
addLegend(pal = pal, values = ~Loss, opacity = 1, title = "% Annual Loss")
m })
lossTab = dplyr::select(vermontdf, NAME, Loss, nLoss)
output$sum3 <- DT::renderDataTable ({
DT::datatable(lossTab,
rownames = FALSE,
colnames = c("County", "% Annual Colony Loss", "N"),
options = list(pageLength=17, dom = 'ft'))
})
output$mymap4 <- renderLeaflet({
m <- leaflet(vermont) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(PerMiteTrue),
label = ~paste0(NAME, ": ", formatC(PerMiteTrue, big.mark = ","),"%, n=",n)) %>%
addLegend(pal = pal, values = ~PerMiteTrue, opacity = 1.0, title = "% mite monitoring")
m })
MiteTab = dplyr::select(vermontdf, NAME, PerMiteTrue, n)
output$sum4 <- DT::renderDataTable ({
DT::datatable(MiteTab,
rownames = FALSE,
colnames = c("County", "% Mite Monitoring", "N"),
options = list(pageLength=17, dom = 'ft'))
})
# Plot for Beekeeper type and apiary/colonies:
# Use ggplot sntax and then use ggplotly to make the figure "interactive"
output$BeekPlot <- renderPlotly({
BeekTypeFig <- ggplot(BeekTypeDF,
aes(y = Percent,
x = MeasureType ,
fill = Beektype)) +
geom_bar(stat="identity") + theme_classic() +
labs(x=NULL, y = "% Registered in VT") +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
guides(fill=guide_legend(title="Beekeeper Type"))
#Use ggplotly to make the figure:
ggplotly(BeekTypeFig)  %>%
layout(height = input$plotHeight, autosize=TRUE) %>% # set the size, specified in the ui
config(displayModeBar = F) %>% # Removes the hover bar
layout(xaxis=list(fixedrange=TRUE)) %>%  # disables the zoom option
layout(yaxis=list(fixedrange=TRUE)) #disables the zoom option
})
# Plot for Beekeeper type and apiary/colonies:
# Use ggplot sntax and then use ggplotly to make the figure "interactive"
output$BeekLoss <- renderPlotly({
BeekPlot <- ggplot(BeekTypeStats,
aes(y = loss, x = Beektype, fill = Beektype)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x=NULL, y = "% of total in Vermont") +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) +
geom_errorbar(aes(ymin = loss - se, ymax = loss + se, width = 0.2)) +
guides(fill=guide_legend(title="Beekeeper Type"))
#Use ggplotly to make the figure:
ggplotly(BeekPlot)  %>%
layout(height = input$plotHeight, autosize=TRUE) %>% # set the size, specified in the ui
config(displayModeBar = F) %>% # Removes the hover bar
layout(xaxis=list(fixedrange=TRUE)) %>%  # disables the zoom option
layout(yaxis=list(fixedrange=TRUE)) #disables the zoom option
})
#create summary tables below figures
output$BeekTable <- DT::renderDataTable({
as.datatable_widget(sumtable(Shinydf))
})
output$BeekTable2 <- DT::renderDataTable({
as.datatable_widget(sumtable(Shinydf))
})
output$pie <- renderPlotly({
pie<-plot_ly(mitedf, labels = ~group,
values = ~value,
type = 'pie') %>%
layout( xaxis = list(showgrid = FALSE,
zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
ggplotly(pie) %>%
layout(height = input$plotHeight, autosize=TRUE) %>% # set the size, specified in the ui
config(displayModeBar = F) %>% # Removes the hover bar
layout(xaxis=list(fixedrange=TRUE)) %>%  # disables the zoom option
layout(yaxis=list(fixedrange=TRUE)) #disables the zoom option
})
output$MiteMethods <- renderPlotly ({
MitePlot <- ggplot(MiteMon,
aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
labs(x="Mite Monitoring Method", y = "% Reported Use") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5),
legend.position="none", axis.text=element_text(size=15),
axis.title=element_text(size=18,face="bold")) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) +                       scale_fill_brewer() +
scale_x_discrete(labels=c("SugarShakeYN" = "Sugar Shake", "AlcoholWashYN" = "Alcohol Wash", "BottomBoardYN" = "Bottom Board", "DroneSurveyYN"= "Drone Survey", "OtherMiteCountYN"= "Other"))
ggplotly(MitePlot)  %>%
layout(height = input$plotHeight, autosize=TRUE) %>% # set the size, specified in the ui
config(displayModeBar = F) %>% # Removes the hover bar
layout(xaxis=list(fixedrange=TRUE)) %>%  # disables the zoom option
layout(yaxis=list(fixedrange=TRUE)) #disables the zoom option
})
output$LossExp <- renderPlotly ({
LossExpPlot <- ggplot(LossCause, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Causes", y = "% Reported Causes") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5),
legend.position="none", axis.text=element_text(size=9),
axis.title=element_text(size=18,face="bold")) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2)) +
scale_fill_brewer() +
scale_x_discrete(labels=c("ColonyLossVarroaMiteYN" = "Varroa", "ColonyLossStarvationYN"= "Starvation", "ColonyLossBearsYN" = "Bears", "ColonyLossAmericanFoulbroodYN" = "AFB", "ColonyLossSwarmingYN" = "Swarming", "ColonyLossPesticidesYN" = "Pesticides", "ColonyLossMitacidesYN" = "Mitacides", "OtherColonyLossYN"= "Other"))
ggplotly(LossExpPlot)  %>%
layout(height = input$plotHeight, autosize=TRUE) %>% # set the size, specified in the ui
config(displayModeBar = F) %>% # Removes the hover bar
layout(xaxis=list(fixedrange=TRUE)) %>%  # disables the zoom option
layout(yaxis=list(fixedrange=TRUE)) #disables the zoom option
})
}
mymap3
m <- leaflet(vermont) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(Loss),
label = ~paste0(NAME, ": ", formatC(Loss, big.mark = ","),"%, n=",nLoss)) %>%
addLegend(pal = pal, values = ~Loss, opacity = 1, title = "% Annual Loss")
m
pal <- colorNumeric("YlOrRd", NULL)
m <- leaflet(vermont) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(Loss),
label = ~paste0(NAME, ": ", formatC(Loss, big.mark = ","),"%, n=",nLoss)) %>%
addLegend(pal = pal, values = ~Loss, opacity = 1, title = "% Annual Loss")
m
runApp('~/AlgerProjects/VTApiaries/Scripts/ApiaryDat.R')
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/VTApiaries/")
# source my packages
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(tidyr)
library(slam)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
###########################################################
# Read in Data
FullApiaryDat <- read.csv("CSV_files/VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
HistDat <- read.csv("CSV_files/histDat.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryDat <- read.csv("CSV_files/singles.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
states <- read.csv("CSV_files/USstates.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("CSV_files/RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryRegs2017 <- read.csv("CSV_files/2017ApiaryRegs.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
Singles <- FullApiaryDat[!duplicated(FullApiaryDat$BeekeeperID), ]
# Calculating state level losses:
AnnLoss<- RegData[! is.na(RegData$PerTotLoss), ]
mean(AnnLoss$PerTotLoss)
WinterLoss<- RegData[! is.na(RegData$PerWinLoss), ]
mean(WinterLoss$PerWinLoss)
# Subset to only include status="Active" beekeepers (remove NAs too)
ActiveOnly<- RegData[! is.na(RegData$BeeKeeperStatus), ]
ActiveOnly<- ActiveOnly[ which(ActiveOnly$BeeKeeperStatus == "Active"), ]
nrow(ActiveOnly)
#How many apiaries are delinquent?
DelOnly<- RegData[ which(RegData$BeeKeeperStatus == "Delinquent"), ]
nrow(DelOnly)
#How many registered Colonies?
ActiveOnly<- ActiveOnly[! is.na(ActiveOnly$ColonyCount), ]
sum(ActiveOnly$ColonyCount)
#Calculate the number of registered beekeepers:
ActiveBeeks <- ActiveOnly[!duplicated(ActiveOnly$BeekeeperID), ]
nrow(ActiveBeeks)
# 743 Active registered beekeepers
DelBeeks <- DelOnly[!duplicated(DelOnly$BeekeeperID), ]
nrow(DelBeeks)
#For registered beekeepers:
library(data.table)
histDat = data.table(ActiveOnly)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeStats
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF
#Are there significant differences in hive losses among beekeeper types?
#Currenlty no significant differences! p = 0.09
BeekTypeLoss <- aov(histDat$PerTotLoss~histDat$Beektype)
summary(BeekTypeLoss)
# Check to see which beekeepers told us about hive losses... #MISSING LOTS OF COLONY LOSS DATA FROM COMMERICIAL BEEKEEPERS!!
NAcheck<-histDat[is.na(histDat$PerTotLoss),]
table(NAcheck$Beektype)
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner", "Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Combine all Text:
OpinionText <- paste(unlist(ApiaryDat$Opinion), collapse =" ")
docs <- Corpus(VectorSource(OpinionText))
text <- readLines("CSV_files/WordCloud.txt")
#docs <- Corpus(VectorSource(text))
#docs <- tm_map(docs, content_transformer(tolower))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("bees", "year", "keeping","will", "use", "enough", "getting", "one", "many", "just", "last", "keep", "good", "one", "also", "sure", "bee", "lost","hives","hive","left", "hard", "proper", "long", "someone", "need", "every", "make", "low", "late", "right", "finding", "two", "area", "best", "put", "well", "using", "trying", "due", "lot", "start", "find", "may", "going", "even", "get", "past", "biggest","check", "another", "much", "purchased","now", "can"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
#Generating word cloud
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 10,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
###########################################################
# Read in Data
InspectSurvey <- read.csv("InspectSurvey.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Data Analysis for Apiary Inspection Programs
# Samantha Alger, Faith Novella
#
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/VTApiaries/CSV_files/")
# source my packages
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(tidyr)
library(slam)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
###########################################################
# Read in Data
InspectSurvey <- read.csv("InspectSurvey.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
###########################################################
# Read in Data
InspectSurvey <- read.csv("InspectorSurvey.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
table(InspectSurvey$Registration)
Reg <- ddply(InspectSurvey, c("Registration"), summarise,
n = length(Registration, na.rm=TRUE),
mean = mean(Registration, na.rm=TRUE))
Reg <- ddply(InspectSurvey, c("Registration"), summarise,
n = length(State, na.rm=TRUE),
mean = mean(Registration, na.rm=TRUE))
Reg <- ddply(InspectSurvey, c("Registration"), summarise,
n = length(State),
mean = mean(Registration, na.rm=TRUE))
Reg <- ddply(InspectSurvey, c("Registration"), summarise,
mean = mean(Registration, na.rm=TRUE))
table(InspectSurvey$Registration)
6/14
4/14
summary(InspectSurvey$Registration)
6/14
0.42+0.42+0.28
6/16
4/16
3/16
