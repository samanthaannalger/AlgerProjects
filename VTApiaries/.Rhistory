geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=45,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=70,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=85,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent)
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=12))
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20))
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20), axis.title=element_text(size=25,face="bold")))
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20), axis.title=element_text(size=25,face="bold"))
plot2
plot2 <- ggplot(MedUse, aes(x=Treatments, y=TreatPercents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("None","Fluvalinate"="Fluvalinate (Apistan)","Coumaphos","Amitraz"="Amitraz(Apivar)","Apiguard","Api-life VAR","Sucrocide","Powdered sugar","Oxalic acid","Formic acid (Mite Away Quick Strips)"="Formic acid (MAQS)","Menthol","Hopguard","Honey B Healthy","Fumagillin-B","Tylosin (Tylan, Tylosin, Tylovet)"= "Tylosin","Lincomycin (Lincomix)"= "Lincomycin","Oxytetracycline (TM, OXTC, Pennox, Terramycin)"="Oxytetracycline","Herbal antibiotics")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20), axis.title=element_text(size=18,face="bold"))
plot2
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/VTApiaries/")
# source my packages
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(tidyr)
library(slam)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
###########################################################
# Read in Data
FullApiaryDat <- read.csv("CSV_files/VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryDat <- read.csv("CSV_files/singles.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
states <- read.csv("CSV_files/USstates.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("CSV_files/RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryRegs2017 <- read.csv("CSV_files/2017ApiaryRegs.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
Singles <- FullApiaryDat[!duplicated(FullApiaryDat$BeekeeperID), ]
# Calculating state level losses:
AnnLoss<- RegData[! is.na(RegData$PerTotLoss), ]
mean(AnnLoss$PerTotLoss)
WinterLoss<- RegData[! is.na(RegData$PerWinLoss), ]
mean(WinterLoss$PerWinLoss)
# Subset to only include status="Active" beekeepers (remove NAs too)
ActiveOnly<- RegData[! is.na(RegData$BeeKeeperStatus), ]
ActiveOnly<- ActiveOnly[ which(ActiveOnly$BeeKeeperStatus == "Active"), ]
nrow(ActiveOnly)
#How many apiaries are delinquent?
DelOnly<- RegData[ which(RegData$BeeKeeperStatus == "Delinquent"), ]
nrow(DelOnly)
#How many registered Colonies?
ActiveOnly<- ActiveOnly[! is.na(ActiveOnly$ColonyCount), ]
sum(ActiveOnly$ColonyCount)
#Calculate the number of registered beekeepers:
ActiveBeeks <- ActiveOnly[!duplicated(ActiveOnly$BeekeeperID), ]
nrow(ActiveBeeks)
# 743 Active registered beekeepers
DelBeeks <- DelOnly[!duplicated(DelOnly$BeekeeperID), ]
nrow(DelBeeks)
#For registered beekeepers:
library(data.table)
histDat = data.table(ActiveOnly)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeStats
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeStats
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF
#Are there significant differences in hive losses among beekeeper types?
#Currenlty no significant differences! p = 0.09
BeekTypeLoss <- aov(histDat$PerTotLoss~histDat$Beektype)
summary(BeekTypeLoss)
# Check to see which beekeepers told us about hive losses... #MISSING LOTS OF COLONY LOSS DATA FROM COMMERICIAL BEEKEEPERS!!
NAcheck<-histDat[is.na(histDat$PerTotLoss),]
table(NAcheck$Beektype)
# Check to see which beekeepers told us about hive losses... #MISSING LOTS OF COLONY LOSS DATA FROM COMMERICIAL BEEKEEPERS!!
NAcheck<-histDat[is.na(histDat$PerTotLoss),]
table(NAcheck$Beektype)
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Commercial", "Sideliner", "Hobbyist"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner", "Hobbyist", "Commercial"))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
###########################################################################################
# Vermont Apiary Inspeciton Data
# Samantha Alger
# June 10, 2018
###########################################################################################
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/VTApiaries/")
# source my packages
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(tidyr)
library(slam)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
###########################################################
# Read in Data
FullApiaryDat <- read.csv("CSV_files/VTApiaries.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryDat <- read.csv("CSV_files/singles.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
states <- read.csv("CSV_files/USstates.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
RegData <- read.csv("CSV_files/RegActiveAndDelinquent.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
ApiaryRegs2017 <- read.csv("CSV_files/2017ApiaryRegs.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
#Remove duplicate data so that there is only a single row for each beekeeper (to be used in all analyses except apiary-level analyses and vendor information)
Singles <- FullApiaryDat[!duplicated(FullApiaryDat$BeekeeperID), ]
#write.csv(Singles, file = "singles.csv")
##################################################
#########################################################
#########################################################
# Basic Statistics:
#########################################################
#########################################################
# Calculating state level losses:
AnnLoss<- RegData[! is.na(RegData$PerTotLoss), ]
mean(AnnLoss$PerTotLoss)
# 38.8%: Total Annual
WinterLoss<- RegData[! is.na(RegData$PerWinLoss), ]
mean(WinterLoss$PerWinLoss)
# 35.8% Winter Loss
# Summer loss??
#Calculating apiary and colony totals:
# Subset to only include status="Active" beekeepers (remove NAs too)
ActiveOnly<- RegData[! is.na(RegData$BeeKeeperStatus), ]
ActiveOnly<- ActiveOnly[ which(ActiveOnly$BeeKeeperStatus == "Active"), ]
nrow(ActiveOnly)
# 1091 Registered Apiaries
#How many apiaries are delinquent?
DelOnly<- RegData[ which(RegData$BeeKeeperStatus == "Delinquent"), ]
nrow(DelOnly)
# 465 delinquent apiaries
#How many registered Colonies?
ActiveOnly<- ActiveOnly[! is.na(ActiveOnly$ColonyCount), ]
sum(ActiveOnly$ColonyCount)
# 8,450 registered colonies
#Calculate the number of registered beekeepers:
ActiveBeeks <- ActiveOnly[!duplicated(ActiveOnly$BeekeeperID), ]
nrow(ActiveBeeks)
# 743 Active registered beekeepers
DelBeeks <- DelOnly[!duplicated(DelOnly$BeekeeperID), ]
nrow(DelBeeks)
#254 Delinquent beekeepers
#Determine the number of apiaries each beekeeper has registered and create a histogram....
#For registered beekeepers:
library(data.table)
histDat = data.table(ActiveOnly)
histDat[, `n` := .N, by = BeekeeperID]
#histDat <-  histDat[!duplicated(histDat$BeekeeperID),]
# Histogram showing the number of apiaries belonging to beekeepers with 1 yard, two yards...etc...
hist(histDat$n, freq=TRUE, breaks=25)
###############################################
#Code apiaries as owned by either hobbists, sideliners, or commericial apiaries
histDat$Beektype <- ifelse(histDat$n == 1,"Hobbyist", ifelse(histDat$n <=5, "Sideliner", "Commercial"))
BeekTypeStats <- ddply(histDat, c("Beektype"), summarise,
apiaries = length(n),
colonies = sum(ColonyCount),
loss = mean(PerTotLoss, na.rm = TRUE),
sd = sd(PerTotLoss, na.rm=TRUE),
se = sd / sqrt(apiaries))
BeekTypeStats$perApiaries <- BeekTypeStats$apiaries/sum(BeekTypeStats$apiaries)
BeekTypeStats$perColonies <- BeekTypeStats$colonies/sum(BeekTypeStats$colonies)
BeekTypeStats
BeekTypeDF <- rbind(BeekTypeStats, BeekTypeStats)
MeasureType <- c(rep("Apiary", 3), rep("Colony", 3))
BeekTypeDF <- cbind(BeekTypeDF, MeasureType)
BeekTypeDF$Percent <- c(BeekTypeDF$perApiaries[1:3], BeekTypeDF$perColonies[4:6])
BeekTypeDF
#Are there significant differences in hive losses among beekeeper types?
#Currenlty no significant differences! p = 0.09
BeekTypeLoss <- aov(histDat$PerTotLoss~histDat$Beektype)
summary(BeekTypeLoss)
# Check to see which beekeepers told us about hive losses... #MISSING LOTS OF COLONY LOSS DATA FROM COMMERICIAL BEEKEEPERS!!
NAcheck<-histDat[is.na(histDat$PerTotLoss),]
table(NAcheck$Beektype)
#Create figure showing number of colonies and number of apiaries as BeekType.
#Create labels.....
#BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner","Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner","Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Hobbyist","Sideliner", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner", "Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner", "Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of Total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
#Reorder factors:
BeekTypeDF$Beektype <- factor(BeekTypeDF$Beektype, levels = c("Sideliner", "Hobbyist", "Commercial"))
BeekTypeDF <- ddply(BeekTypeDF, .(MeasureType), transform, pos = cumsum(Percent) - (0.5 * Percent))
BeekTypeFig <- ggplot(BeekTypeDF, aes(y = Percent, x = MeasureType , fill = Beektype)) + geom_bar(stat="identity") + theme_classic() + labs(x=NULL, y = "Percent of total in Vermont")+ scale_y_continuous(labels = scales::percent) +
scale_fill_brewer() +
scale_x_discrete(labels=c("Apiary" = "Apiaries", "Colony" = "Colonies")) + guides(fill=guide_legend(title="Beekeeper Type")) + geom_text(data=BeekTypeDF, aes(x = MeasureType, y = pos ,label = paste0(round(Percent*100, digits = 1),"%")), size=4)
BeekTypeFig
mitedf <- data.frame(
group = c("Did not count mites", "Counted mites"),
value = c(table(ApiaryDat$MiteCounts))
)
head(mitedf)
library(ggplot2)
library(scales)
# Barplot
bp<- ggplot(mitedf, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
#Create a blank theme
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
#Piechart
pie <- bp + coord_polar("y", start=0) +
theme_minimal() +  blank_theme +
theme(axis.text.x=element_blank()) + guides(fill=guide_legend(title="Percentage of beekeepers"))
pie
#Import data:
MiteMon<- Singles
#Create two separate dfs for analysis with specified columns:
MonMethods <- dplyr::select(MiteMon, BeekeeperID,SugarShakeYN, AlcoholWashYN, BottomBoardYN, DroneSurveyYN, OtherMiteCountYN)
MonFreq <- dplyr::select(MiteMon, BeekeeperID, SugarShake, AlcoholWash,BottomBoard,DroneSurvey, OtherMiteCount)
OtherMiteCountSpecify <- dplyr::select(CensusDat,OtherMiteCountSpecify)
MonMethods <- gather(MonMethods, question, response, SugarShakeYN:OtherMiteCountYN, factor_key=TRUE)
MonFreq <- gather(MonFreq, question, response, SugarShake:OtherMiteCount, factor_key=TRUE)
#Convert all True and False to '0' and '1' in the 'ReasonLoss' dataframe
MonMethods$response<-as.integer(as.logical(MonMethods$response))
# Preparing Data for Bar Plot
MiteMon <- ddply(MonMethods, c("question"), summarise,
n = length(response),
mean = mean(response, na.rm=TRUE),
sd = sd(response, na.rm=TRUE),
se = sd / sqrt(n))
plot1 <- ggplot(MiteMon, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Mite Monitoring Method", y = "Frequency") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none") +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("SugarShakeYN" = "Sugar Shake", "AlcoholWashYN" = "Alcohol Wash", "BottomBoardYN" = "Bottom Board", "DroneSurveyYN"= "Drone Survey", "OtherMiteCountYN"= "Other"))
plot1
plot1 <- ggplot(MiteMon, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Mite Monitoring Method", y = "Frequency") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none", axis.text=element_text(size=20), axis.title=element_text(size=18,face="bold")) +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("SugarShakeYN" = "Sugar Shake", "AlcoholWashYN" = "Alcohol Wash", "BottomBoardYN" = "Bottom Board", "DroneSurveyYN"= "Drone Survey", "OtherMiteCountYN"= "Other"))
plot1
plot1 <- ggplot(MiteMon, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Mite Monitoring Method", y = "Frequency") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none", axis.text=element_text(size=15), axis.title=element_text(size=18,face="bold")) +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("SugarShakeYN" = "Sugar Shake", "AlcoholWashYN" = "Alcohol Wash", "BottomBoardYN" = "Bottom Board", "DroneSurveyYN"= "Drone Survey", "OtherMiteCountYN"= "Other"))
plot1
plot1 <- ggplot(MiteMon, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Mite Monitoring Method", y = "% Reported Use") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none", axis.text=element_text(size=15), axis.title=element_text(size=18,face="bold")) +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("SugarShakeYN" = "Sugar Shake", "AlcoholWashYN" = "Alcohol Wash", "BottomBoardYN" = "Bottom Board", "DroneSurveyYN"= "Drone Survey", "OtherMiteCountYN"= "Other"))
plot1
#Import data:
CensusDat<- Singles
#Create two separate dfs for analysis with specified columns:
ReasonLoss <- dplyr::select(CensusDat, BeekeeperID, ColonyLossVarroaMiteYN, ColonyLossStarvationYN, ColonyLossBearsYN, ColonyLossAmericanFoulbroodYN, ColonyLossSwarmingYN, ColonyLossPesticidesYN, ColonyLossMitacidesYN, OtherColonyLossYN)
NumLoss <- dplyr::select(CensusDat, BeekeeperID, ColonyLossVarroaMite, ColonyLossStarvation, ColonyLossBears, ColonyLossAmericanFoulbrood, ColonyLossSwarming, ColonyLossPesticides, ColonyLossMitacides, OtherColonyLoss)
OtherLoss <- dplyr::select(CensusDat,OtherColonyLossCausesSpecify)
ReasonLoss <- gather(ReasonLoss, question, response, ColonyLossVarroaMiteYN:OtherColonyLossYN, factor_key=TRUE)
NumLoss <- gather(NumLoss, question, response, ColonyLossVarroaMite:OtherColonyLoss, factor_key=TRUE)
#Convert all True and False to '0' and '1' in the 'ReasonLoss' dataframe
ReasonLoss$response<-as.integer(as.logical(ReasonLoss$response))
# Preparing Data for Bar Plot
LossCause <- ddply(ReasonLoss, c("question"), summarise,
n = length(response),
mean = mean(response, na.rm=TRUE),
sd = sd(response, na.rm=TRUE),
se = sd / sqrt(n))
plot1 <- ggplot(LossCause, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Causes", y = "Colony Loss") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none") +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("ColonyLossVarroaMiteYN" = "Varroa", "ColonyLossStarvationYN"= "Starvation", "ColonyLossBearsYN" = "Bears", "ColonyLossAmericanFoulbroodYN" = "AFB", "ColonyLossSwarmingYN" = "Swarming", "ColonyLossPesticidesYN" = "Pesticides", "ColonyLossMitacidesYN" = "Mitacides", "OtherColonyLossYN"= "Other"))
#Import data:
CensusDat<- Singles
#Create two separate dfs for analysis with specified columns:
ReasonLoss <- dplyr::select(CensusDat, BeekeeperID, ColonyLossVarroaMiteYN, ColonyLossStarvationYN, ColonyLossBearsYN, ColonyLossAmericanFoulbroodYN, ColonyLossSwarmingYN, ColonyLossPesticidesYN, ColonyLossMitacidesYN, OtherColonyLossYN)
NumLoss <- dplyr::select(CensusDat, BeekeeperID, ColonyLossVarroaMite, ColonyLossStarvation, ColonyLossBears, ColonyLossAmericanFoulbrood, ColonyLossSwarming, ColonyLossPesticides, ColonyLossMitacides, OtherColonyLoss)
OtherLoss <- dplyr::select(CensusDat,OtherColonyLossCausesSpecify)
ReasonLoss <- gather(ReasonLoss, question, response, ColonyLossVarroaMiteYN:OtherColonyLossYN, factor_key=TRUE)
NumLoss <- gather(NumLoss, question, response, ColonyLossVarroaMite:OtherColonyLoss, factor_key=TRUE)
#Convert all True and False to '0' and '1' in the 'ReasonLoss' dataframe
ReasonLoss$response<-as.integer(as.logical(ReasonLoss$response))
# Preparing Data for Bar Plot
LossCause <- ddply(ReasonLoss, c("question"), summarise,
n = length(response),
mean = mean(response, na.rm=TRUE),
sd = sd(response, na.rm=TRUE),
se = sd / sqrt(n))
plot1 <- ggplot(LossCause, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Causes", y = "Colony Loss") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none", axis.text=element_text(size=15), axis.title=element_text(size=18,face="bold")) +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("ColonyLossVarroaMiteYN" = "Varroa", "ColonyLossStarvationYN"= "Starvation", "ColonyLossBearsYN" = "Bears", "ColonyLossAmericanFoulbroodYN" = "AFB", "ColonyLossSwarmingYN" = "Swarming", "ColonyLossPesticidesYN" = "Pesticides", "ColonyLossMitacidesYN" = "Mitacides", "OtherColonyLossYN"= "Other"))
plot1
plot1 <- ggplot(LossCause, aes(x=question, y=mean, fill=question)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
labs(x="Causes", y = "% Reported Causes") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none", axis.text=element_text(size=15), axis.title=element_text(size=18,face="bold")) +
scale_y_continuous(labels = scales::percent) +
geom_errorbar(aes(ymin = mean - se, ymax = mean +
se, width = 0.2)) + scale_fill_brewer() +
scale_x_discrete(labels=c("ColonyLossVarroaMiteYN" = "Varroa", "ColonyLossStarvationYN"= "Starvation", "ColonyLossBearsYN" = "Bears", "ColonyLossAmericanFoulbroodYN" = "AFB", "ColonyLossSwarmingYN" = "Swarming", "ColonyLossPesticidesYN" = "Pesticides", "ColonyLossMitacidesYN" = "Mitacides", "OtherColonyLossYN"= "Other"))
plot1
table(Singles$ColonyLossMakeup)
ColLoss <- Singles[! is.na(Singles$ColonyLossMakeup), ]
vec <- c("Make Splits or Divides","Purchase Colonies in Hives","Purchase Packages","Purchase Nucleus Colonies")
mat <- matrix(nrow = length(ColLoss$ColonyLossMakeup), ncol = length(vec))
for (i in 1:length(vec)){
mat[,i] <- grepl(vec[i], ColLoss$ColonyLossMakeup, fixed = TRUE)
}
# turn mat into a data frame, give it column names and merge with MedUse
mat <- data.frame(mat)
mat
names(mat) <- vec
ColLoss <- cbind(ColLoss, mat)
Percents <- colMeans(mat, na.rm=TRUE)
Treatments <- vec
ColLoss <- data.frame(Treatments, Percents)
#Reorder for plotting:
ColLoss$Treatments <- factor(ColLoss$Treatments, levels = c("Make Splits or Divides","Purchase Colonies in Hives","Purchase Packages","Purchase Nucleus Colonies"))
plot3 <- ggplot(ColLoss, aes(x=Treatments, y=Percents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none") + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20), axis.title=element_text(size=18,face="bold"))
plot3
plot3 <- ggplot(ColLoss, aes(x=Treatments, y=Percents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Reported Use") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("Splits/Divides","Purchase Full Hives","Purchase Packages","Purchase Nucs")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=15), axis.title=element_text(size=12,face="bold"))
plot3
plot3 <- ggplot(ColLoss, aes(x=Treatments, y=Percents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Responses") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("Splits/Divides","Purchase Full Hives","Purchase Packages","Purchase Nucs")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=10), axis.title=element_text(size=12,face="bold"))
plot3
plot3 <- ggplot(ColLoss, aes(x=Treatments, y=Percents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Responses") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("Splits/Divides","Purchase Full Hives","Purchase Packages","Purchase Nucs")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20), axis.title=element_text(size=12,face="bold"))
plot3 <- ggplot(ColLoss, aes(x=Treatments, y=Percents)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x=NULL, y = "% Responses") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5), legend.position="none")  + scale_x_discrete(labels=c("Splits/Divides","Purchase Full Hives","Purchase Packages","Purchase Nucs")) + scale_fill_brewer() + scale_y_continuous(labels = scales::percent) + theme(axis.text=element_text(size=20), axis.title=element_text(size=18,face="bold"))
plot3
