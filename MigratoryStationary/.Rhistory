<<<<<<< HEAD
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=4) + scale_colour_manual(values = c("black", "darkgrey", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Brood Pattern") + coord_cartesian(ylim = c(3, 5), xlim = c(2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=1.5) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85), legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(breaks=c(2,3))
MigStat
# repeated measures anova for FOB
aov.FOB2 <- aov(FOB~Treatment * SamplingEvent + Error(ID), data=MigStatExp_2_analysis)
summary(aov.FOB2)
=======
ggplot(data = FOB2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=4) + scale_colour_manual(values = c("black", "darkgrey", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(10, 30), xlim = c(2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=1.5) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85), legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(breaks=c(2,3))
fit <- lm(DWVload~FOB, data=MigStat)
summary(fit)
plot(fit)
mean(MigStat$NosemaLoadRecount, na.rm=TRUE)
MigStatT1<-MigStat[(MigStat$SamplingEvent=="1"),]
MigStatT1 <- MigStatT1[!(MigStatT1$Treatment=="Exposed"),]
T1anonva <- aov(NosemaLoadRecount~Treatment, data=MigStatT1)
summary(T1anonva)
# repeated measures anova for DWV
aov.Nos <- aov(NosemaLoadRecount~Treatment * SamplingEvent + Error(ID), data=MigStat)
summary(aov.Nos)
# Summary of DWV prev. for experiment 1
NosSum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(NosemaLoadRecount),
mean = mean(NosemaLoadRecount, na.rm=TRUE),
sd = sd(NosemaLoadRecount, na.rm = TRUE),
se = sd / sqrt(n))
ggplot(data = NosSum,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=4) + scale_colour_manual(values = c("black", "darkgrey", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Nosema Load") + coord_cartesian(ylim = c(0, 20), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=1.5) + theme_classic(base_size = 17) + theme(legend.position=c(.8, .85), legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(breaks=c(1,2,3))
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/MigratoryStationary/")
# Read in Nosema/Varroa/Eco Data:
MigStat <- read.table("Data/MigStatClean.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat$Treatment <- ifelse(MigStat$Treatment=="Stationary","Stationary\n(Isolated)", ifelse(MigStat$Treatment=="Migratory", "Migratory", "Exposed"))
MigStat$NosemaLoadRecount1 <- ((MigStat$NosemaLoadRecount*4000000)/80)/100000
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(cowplot)
# Setting up dataframe without Exposed for Experiment 1 data (Mig vs Stationary)
MigStatExp_1<-MigStat[!(MigStat$Treatment=="Exposed"),]
# Summary of DWV prev. for experiment 1
VirusSum2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
DWVload1 <- ggplot(data = VirusSum2,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = NULL, y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 15), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position = "none") + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
DWVload1
# Summary of BQCV load. for experiment 1
VirusSum1 <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV prev. for experiment 1
BQCVload1 <- ggplot(data = VirusSum1,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = NULL, y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.3, .85),legend.key.width=unit(5,"line")) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
BQCVload1
# Summary of Varroa prev. for experiment 1
VarSum <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting Varroa prev. for experiment 1
VARload1 <- ggplot(data = VarSum,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Varroa (mites/100 bees)") + coord_cartesian(ylim = c(0, 3), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position="none") + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
VARload1
nbVAR <- lmer(data=MigStatExp_1, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(nbVAR)
hist(log(MigStatExp_1$Varroa+1))
# Summary of FOB for experiment 1
FOB <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm=TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
# plotting FOB for experiment 1
FOB1 <- ggplot(data = FOB,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(5, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position = "none") + scale_x_continuous(breaks=c(1,2,3))
FOB1
# Summary of DWV VL for experiment 2
VirusSum6 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV VL for experiment 2
DWVload2 <- ggplot(data = VirusSum6,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = NULL, y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 17), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none")+ scale_x_continuous(breaks=c(1,2,3))
DWVload2
# Summary of BQCV VL for experiment 2
VirusSum8 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV VL for experiment 2
BQCVload2 <- ggplot(data = VirusSum8,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = NULL, y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position=c(.2, .85), legend.key.width=unit(10,"line"), legend.key.height = unit(3, "line")) + scale_x_continuous(breaks=c(1,2,3))
BQCVload2
# Summary of varroa load for experiment 2
VarSum2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting varroa load for experiment 2
VARload2 <- ggplot(data = VarSum2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Varroa (mites/100 bees)") + coord_cartesian(ylim = c(0, 5), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none") + scale_x_continuous(breaks=c(1,2,3))
VARload2
>>>>>>> origin/master
# Summary of FOB for experiment 2
FOB2 <- ddply(MigStatExp_2_plot, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm=TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
# plotting FOB for experiment 2
<<<<<<< HEAD
ggplot(data = FOB2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=4) + scale_colour_manual(values = c("black", "darkgrey", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(10, 30), xlim = c(2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=1.5) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85), legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(breaks=c(2,3))
fit <- lm(DWVload~FOB, data=MigStat)
summary(fit)
plot(fit)
mean(MigStat$NosemaLoadRecount, na.rm=TRUE)
MigStatT1<-MigStat[(MigStat$SamplingEvent=="1"),]
MigStatT1 <- MigStatT1[!(MigStatT1$Treatment=="Exposed"),]
T1anonva <- aov(NosemaLoadRecount~Treatment, data=MigStatT1)
summary(T1anonva)
# repeated measures anova for DWV
aov.Nos <- aov(NosemaLoadRecount~Treatment * SamplingEvent + Error(ID), data=MigStat)
summary(aov.Nos)
# Summary of DWV prev. for experiment 1
NosSum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(NosemaLoadRecount),
mean = mean(NosemaLoadRecount, na.rm=TRUE),
sd = sd(NosemaLoadRecount, na.rm = TRUE),
se = sd / sqrt(n))
ggplot(data = NosSum,
=======
FOB3 <- ggplot(data = FOB2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(6, 30), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none") + scale_x_continuous(breaks=c(1,2,3))
FOB3
# create seperate data frames for each time point:
MigStatSplit <- split(MigStat, MigStat$SamplingEvent)
Mig1 <- MigStatSplit$`1`
Mig2 <- MigStatSplit$`2`
Mig3 <- MigStatSplit$`3`
# run LDA
time2 <- lda(Treatment~Varroa + NosemaLoadRecount + logBQCV + logDWV + DWVbinary + FOB + BroodPattern + NosemaBinary + VarroaBinary, data=Mig2, na.action="na.omit")
# LDA prep function
ggplotLDAPrep <- function(x){
if (!is.null(Terms <- x$terms)) {
data <- model.frame(x)
X <- model.matrix(delete.response(Terms), data)
g <- model.response(data)
xint <- match("(Intercept)", colnames(X), nomatch = 0L)
if (xint > 0L)
X <- X[, -xint, drop = FALSE]
}
means <- colMeans(x$means)
X <- scale(X, center = means, scale = FALSE) %*% x$scaling
rtrn <- as.data.frame(cbind(X,labels=as.character(g)))
rtrn <- data.frame(X,labels=as.character(g))
return(rtrn)
}
# fit graph for LDA
fitGraph <- ggplotLDAPrep(time2)
# graph for LDA
LDAone <- ggplot(fitGraph, aes(LD1,LD2, color=labels))+geom_point(size=6) + theme_minimal(base_size = 30) + theme(legend.key.width = unit(3, "line"), legend.key.height = unit(3, "line"), legend.position = c(x=.82, y=.85), legend.background = element_rect(fill="white", size=.5), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7) + labs(x="LD1 (88.36%)", y="LD2 (11.64%)") + scale_color_manual(values=c("black", "red", "blue"), name="Treatment",breaks=c("Exposed", "Migratory", "Stationary"), labels=c("Exposed", "Migratory", "Stationary\n(Isolated)"))
LDAone
# run LDA
time3 <- lda(Treatment~Varroa + NosemaLoadRecount + logBQCV + logDWV + DWVbinary + FOB + BroodPattern + NosemaBinary + VarroaBinary, data=Mig3, na.action="na.omit")
# graph for LDA
fitGraph1 <- ggplotLDAPrep(time3)
# graph for LDA
LDAtwo <- ggplot(fitGraph1, aes(LD1,LD2, color=labels))+geom_point(size=6) + theme_minimal(base_size = 30) + scale_colour_manual(values = c("black", "red","blue" )) + theme(legend.position= "none", axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7) + labs(color="Treatment:", x="LD1 (68.73%)", y="LD2 (31.27%)")
LDAtwo
# experiment 1:
plot_grid(BQCVload1, DWVload1, VARload1, FOB1, labels = c("A", "B", "C", "D"), ncol = 2,align="hv")
# experiment 2:
plot_grid(BQCVload2, DWVload2, VARload2, FOB3, labels = c("A", "B", "C", "D"), ncol = 2,  align="hv", label_size = 30)
# LDA 1 and 2:
plot_grid(LDAone, LDAtwo, labels = c("A", "B"), align="hv",  label_size = 30)
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/MigratoryStationary/")
# Read in Nosema/Varroa/Eco Data:
MigStat <- read.table("Data/MigStatClean.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat$Treatment <- ifelse(MigStat$Treatment=="Stationary","Stationary\n(Isolated)", ifelse(MigStat$Treatment=="Migratory", "Migratory", "Exposed"))
MigStat$NosemaLoadRecount1 <- ((MigStat$NosemaLoadRecount*4000000)/80)/100000
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(cowplot)
# Setting up dataframe without Exposed for Experiment 1 data (Mig vs Stationary)
MigStatExp_1<-MigStat[!(MigStat$Treatment=="Exposed"),]
# Summary of DWV prev. for experiment 1
VirusSum2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
DWVload1 <- ggplot(data = VirusSum2,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = NULL, y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 15), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position = "none") + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
DWVload1
# Summary of BQCV load. for experiment 1
VirusSum1 <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV prev. for experiment 1
BQCVload1 <- ggplot(data = VirusSum1,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = NULL, y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.3, .85),legend.key.width=unit(5,"line")) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
BQCVload1
# Summary of Varroa prev. for experiment 1
VarSum <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting Varroa prev. for experiment 1
VARload1 <- ggplot(data = VarSum,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Varroa (mites/100 bees)") + coord_cartesian(ylim = c(0, 3), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position="none") + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
VARload1
nbVAR <- lmer(data=MigStatExp_1, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(nbVAR)
hist(log(MigStatExp_1$Varroa+1))
# Summary of FOB for experiment 1
FOB <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm=TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
# plotting FOB for experiment 1
FOB1 <- ggplot(data = FOB,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(5, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position = "none") + scale_x_continuous(breaks=c(1,2,3))
FOB1
# Summary of DWV VL for experiment 2
VirusSum6 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV VL for experiment 2
DWVload2 <- ggplot(data = VirusSum6,
>>>>>>> origin/master
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
<<<<<<< HEAD
) + geom_point(size=4) + scale_colour_manual(values = c("black", "darkgrey", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Nosema Load") + coord_cartesian(ylim = c(0, 20), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=1.5) + theme_classic(base_size = 17) + theme(legend.position=c(.8, .85), legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(breaks=c(1,2,3))
MigStat
str(MigStat)
MigStat$FOB
MigStat$VarroaLoad
MigStat$Varroa
MiteFob <- MigStat[!MigStat$SamplingEvent==1, ]
MiteFob
MiteFob$SamplingEvent
MiteFob$Treatment
MiteFob <- MiteFob[!MigStat$SamplingEvent=="Exposed", ]
MiteFob$Treatment
MiteFob <- MiteFob[!MiteFob$SamplingEvent=="Exposed", ]
MiteFob$Treatment
MiteFob <- as.factor(MiteFob$SamplingEvent)
MiteFob$Treatmetn
MiteFob <- MigStat[!MigStat$SamplingEvent==1, ]
MiteFob <- MiteFob[!MiteFob$Treatment=="Exposed", ]
MiteFob$treatmetn
MiteFob$treatment
MiteFob$Treatment
MiteFob <- split(MiteFob, MiteFob$SamplingEvent)
MiteFob2 <- MiteFob$`2`
MiteFob3 <- MiteFob$`3`
MiteFob2$ID
MiteFob3$ID
MiteFob2$Varroa3 <- MiteFob3$Varroa
MiteFob2$Varroa3
MiteFob2$SamplingEvent
MiteFob2$Treatment
# main plot parameters
p <- ggplot(MiteFob2, aes(Varroa3, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=SamplingEventFact), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(MiteFob2, aes(Varroa3, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(10,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(MiteFob2, aes(Varroa3, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,25), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
# main plot parameters
p <- ggplot(MiteFob2, aes(Varroa3, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,10), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
p <- ggplot(MiteFob2, aes(Varroa3, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,10), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = TRUE)
# main plot parameters
p <- ggplot(MiteFob2, aes(Varroa3, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,10), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
x <- split(MiteFob2, MiteFob2$Treatment)
Mig <- x$Migratory
Stat<- x$Stationary
modMig <- lm(data=Mig, Varroa3~FOB)
summary(modMig)
modStat <- lm(data=Stat, Varroa3~FOB)
summary(modStat)
# main plot parameters
p <- ggplot(MiteFob2, aes(Varroa, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,10), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
modMig <- lm(data=Mig, Varroa~FOB)
summary(modMig)
modStat <- lm(data=Stat, Varroa~FOB)
summary(modStat)
MiteFob3$VarroaLoad
MiteFob3$Varroa
# main plot parameters
p <- ggplot(MiteFob3, aes(Varroa, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,10), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
x <- split(MiteFob3, MiteFob3$Treatment)
Mig <- x$Migratory
Stat<- x$Stationary
modMig <- lm(data=Mig, Varroa~FOB)
summary(modMig)
modStat <- lm(data=Stat, Varroa~FOB)
summary(modStat)
MiteFobFull <- MigStat[!MigStat$Treatment=="Exposed", ]
MiteFobFull
MiteFobFull$Treatment
MiteFobFull$SamplingEvent
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
Anova(mod)
mod
summary(mod)
coef(mod)
MiteFobFull
Anova(mod)
summary(mod)
Anova(mod)
summary(mod)
coef(summary(mod))
summary(mod)
coef(summary(mod))
install.packages("lmerTest")
library(lmerTest)
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
mod
Anova(mod)
summary(mod)
coef(summary(mod))
str(MiteFobFull)
MiteFobFull$SamplingEvent <- as.factor(MiteFobFull$SamplingEvent)
MiteFobFull$SamplingEvent
MiteFobFull$Treatment
MiteFobFull$Treatment <- as.factor(MiteFobFull$Treatment)
MiteFobFull$Treatment
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
MiteFobFull <- MigStat[!MigStat$Treatment=="Exposed", ]
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
Anova(mod)
summary(mod)
coef(summary(mod))
Anova(mod)
summary(mod)
coef(summary(mod))
mod <- lmer(data = MiteFobFull, formula = FOB ~ Varroa  * SamplingEvent + Treatment + (SamplingEvent|labID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
Anova(mod)
summary(mod)
coef(summary(mod))
library(lsmeans)
install.packages("lsmeans)
install.packages("lsmeans")
install.packages("lsmeans")
library(lsmeans)
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
lsmeans(mod, list(pairwise ~ SamplingEvent), adjust = "tukey")
lsmeans(mod, list(pairwise ~ SamplingEvent + Treatment), adjust = "tukey")
lsmeans(mod, list(pairwise ~ (Varroa + Treatment) * SamplingEvent), adjust = "tukey")
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|labID))
Anova(mod)
summary(mod)
coef(summary(mod))
lsmeans(mod, list(pairwise ~ Varroa+Treatment:SamplingEvent, adjust = "tukey"))
lsmeans(mod, list(pairwise ~ Varroa+Treatment:SamplingEvent), adjust = "tukey")
lsmeans(mod, list(pairwise ~ Treatment:SamplingEvent), adjust = "tukey")
lsmeans(mod, list(pairwise ~ Treatment, adjust = "tukey")
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
lsmeans(mod, list(pairwise ~ SamplingEvent), adjust = "tukey")
MiteFobFull$ID
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|ID))
Anova(mod)
summary(mod)
coef(summary(mod))
lsmeans(mod, list(pairwise ~ SamplingEvent), adjust = "tukey")
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (1|ID))
Anova(mod)
summary(mod)
coef(summary(mod))
lsmeans(mod, list(pairwise ~ SamplingEvent), adjust = "tukey")
mod <- lmer(data = MiteFobFull, formula = FOB ~ (Varroa + Treatment) * SamplingEvent + (SamplingEvent|ID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ (FOB + Treatment) * SamplingEvent + (SamplingEvent|ID))
Anova(mod)
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (SamplingEvent|ID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (SamplingEvent|ID))
Anova(mod)
summary(mod)
coef(summary(mod))
plot(MiteFobFull$Varroa, MiteFobFull$FOB)
plot(MiteFobFull$FOB, MiteFobFull$Varroa)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1|ID))
Anova(mod)
summary(mod)
coef(summary(mod))
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (SamplingEvent|ID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1+SamplingEvent|ID))
Anova(mod)
# DWV prevalence using glmer
Fullmod <- glmer(data=MigStatExp_1, formula = DWVbinary~Treatment * SamplingEvent + (1|ID), family = binomial(link = "logit"))
Anova(Fullmod)
# DWV prevalence using glmer
Fullmod <- glmer(data=MigStatExp_1, formula = DWVbinary~Treatment * SamplingEvent + (1+SamplingEvent|ID), family = binomial(link = "logit"))
Anova(Fullmod)
#BQCV prevalence using glmer
Fullmod2 <- glmer(data=MigStatExp_1, formula = BQCVbinary~Treatment * SamplingEvent + (1|ID), family = binomial(link = "logit"))
Anova(Fullmod2)
#BQCV prevalence using glmer
Fullmod2 <- glmer(data=MigStatExp_1, formula = BQCVbinary~Treatment * SamplingEvent + (1+SamplingEvent|ID), family = binomial(link = "logit"))
Anova(Fullmod2)
#Varroa prevalence using glmer
Fullmod2 <- glmer(data=MigStatExp_1, formula = VarroaBinary~Treatment * SamplingEvent + (1|ID), family = binomial(link = "logit"))
Anova(Fullmod2)
#DWV prevalence using glmer
Fullmod3 <- glmer(data=MigStatExp_2_analysis, formula = DWVbinary~Treatment * SamplingEvent + (1|ID), family = binomial(link = "logit"))
Anova(Fullmod3)
#DWV prevalence using glmer
Fullmod3 <- glmer(data=MigStatExp_2_analysis, formula = DWVbinary~Treatment * SamplingEvent + (1+SamplingEvent|ID), family = binomial(link = "logit"))
Anova(Fullmod3)
# Summary of DWV prev. for experiment 2
VirusSum5 <- ddply(MigStatExp_2_plot, c("Treatment", "SamplingEvent"), summarise,
n = length(DWVbinary),
mean = mean(DWVbinary, na.rm=TRUE),
sd = sd(DWVbinary, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 2
ggplot(data = VirusSum5,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=4) + scale_colour_manual(values = c("black", "darkgrey", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Prevalance of DWV") + coord_cartesian(ylim = c(0, 1), xlim = c(2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=1.5) + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85), legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_continuous(breaks=c(2,3))
# repeated measures anova for DWV
aov.DWV2 <- aov(logDWV~Treatment * SamplingEvent + Error(ID), data=MigStatExp_2_analysis)
summary(aov.DWV2)
DWV2full <- lmer(logDWV~Treatment * SamplingEvent + (1|ID), data=MigStatExp_2_analysis)
DWVnull <- lmer(logDWV~SamplingEvent + (1|ID), data=MigStatExp_2_analysis)
anova(DWV2full, DWVnull)
Anova(DWV2full)
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/MigratoryStationary/")
# Read in Nosema/Varroa/Eco Data:
MigStat <- read.table("Data/MigStatClean.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
#MigStat$NosemaLoadRecount <- log(MigStat$NosemaLoadRecount+1)
MigStat$Varroa <- log(MigStat$Varroa+1)
#MigStat$Varroa[MigStat$Varroa=="Inf"] <- 0
MigStat$NosemaLoadRecount <- log(MigStat$NosemaLoadRecount+1)
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(vegan)
library(factoextra)
# Setting up dataframe without Exposed for Experiment 1 data (Mig vs Stationary)
MigStatExp_1<-MigStat[!(MigStat$Treatment=="Exposed"),]
# create data frame for running preliminary T1 tests
MigStatExp_1_T1<-MigStatExp_1[(MigStatExp_1$SamplingEvent=="1"),]
# Summary of DWV prev. for experiment 1
VirusSum <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(DWVbinary),
mean = mean(DWVbinary, na.rm=TRUE),
sd = sd(DWVbinary, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
DWVprev1 <- ggplot(data = VirusSum,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Prevalance of DWV") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
DWVprev1
VirusSum
# Initial T1 test:
x <- table(MigStatExp_1_T1$Treatment, MigStatExp_1_T1$DWVbinary)
chisq.test(x)
# DWV prevalence using glmer
Fullmod <- glmer(data=MigStatExp_1, formula = DWVbinary~Treatment * SamplingEvent + (1|ID), family = binomial(link = "logit"))
Anova(Fullmod)
# DWV prevalence using glmer
Fullmod <- glmer(data=MigStatExp_1, formula = DWVbinary~Treatment * SamplingEvent + (1+SamplingEvent|ID), family = binomial(link = "logit"))
Anova(Fullmod)
# Summary of DWV prev. for experiment 1
VirusSum2 <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
DWVload1 <- ggplot(data = VirusSum2,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 15), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
DWVload1
VirusSum2
# Initial T1 test:
x <- aov(MigStatExp_1_T1$logDWV~MigStatExp_1_T1$Treatment)
summary(x)
nbDWV <- lmer(data=MigStatExp_1, formula = logDWV~Treatment * SamplingEvent + (1|ID))
Anova(nbDWV)
nbDWV <- lmer(data=MigStatExp_1, formula = logDWV~Treatment * SamplingEvent + (1+SamplingEvent|ID))
Anova(nbDWV)
# Summary of BQCV prev. for experiment 1
VirusSum3 <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(BQCVbinary),
mean = mean(BQCVbinary, na.rm=TRUE),
sd = sd(BQCVbinary, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV prev. for experiment 1
BQCVprev1 <- ggplot(data = VirusSum3,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Prevalance of BQCV") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .2),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
BQCVprev1
VirusSum3
# Summary of BQCV prev. for experiment 1
VirusSum1 <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
=======
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = NULL, y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 17), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none")+ scale_x_continuous(breaks=c(1,2,3))
DWVload2
# Summary of BQCV VL for experiment 2
VirusSum8 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV VL for experiment 2
BQCVload2 <- ggplot(data = VirusSum8,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = NULL, y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position=c(.2, .85), legend.key.width=unit(10,"line"), legend.key.height = unit(3, "line")) + scale_x_continuous(breaks=c(1,2,3))
BQCVload2
# Summary of varroa load for experiment 2
VarSum2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting varroa load for experiment 2
VARload2 <- ggplot(data = VarSum2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Varroa (mites/100 bees)") + coord_cartesian(ylim = c(0, 5), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none") + scale_x_continuous(breaks=c(1,2,3))
VARload2
# Summary of FOB for experiment 2
FOB2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm=TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
# plotting FOB for experiment 2
FOB3 <- ggplot(data = FOB2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(6, 30), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none") + scale_x_continuous(breaks=c(1,2,3))
FOB3
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/MigratoryStationary/")
# Read in Nosema/Varroa/Eco Data:
MigStat <- read.table("Data/MigStatClean.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat$Treatment <- ifelse(MigStat$Treatment=="Stationary","Stationary\n(Isolated)", ifelse(MigStat$Treatment=="Migratory", "Migratory", "Exposed"))
MigStat$NosemaLoadRecount1 <- ((MigStat$NosemaLoadRecount*4000000)/80)/100000
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(cowplot)
install.packages("cowplot")
library(cowplot)
# Setting up dataframe without Exposed for Experiment 1 data (Mig vs Stationary)
MigStatExp_1<-MigStat[!(MigStat$Treatment=="Exposed"),]
# Summary of DWV prev. for experiment 1
VirusSum2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV prev. for experiment 1
DWVload1 <- ggplot(data = VirusSum2,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = NULL, y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 15), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position = "none") + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
DWVload1
# Summary of BQCV load. for experiment 1
VirusSum1 <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV prev. for experiment 1
BQCVload1 <- ggplot(data = VirusSum1,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = NULL, y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.3, .85),legend.key.width=unit(5,"line")) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
BQCVload1
# Summary of Varroa prev. for experiment 1
VarSum <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting Varroa prev. for experiment 1
VARload1 <- ggplot(data = VarSum,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Varroa (mites/100 bees)") + coord_cartesian(ylim = c(0, 3), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position="none") + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
VARload1
nbVAR <- lmer(data=MigStatExp_1, formula = Varroa~Treatment * SamplingEvent + (1|ID))
Anova(nbVAR)
hist(log(MigStatExp_1$Varroa+1))
# Summary of FOB for experiment 1
FOB <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm=TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
# plotting FOB for experiment 1
FOB1 <- ggplot(data = FOB,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(5, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position = "none") + scale_x_continuous(breaks=c(1,2,3))
FOB1
# Summary of DWV VL for experiment 2
VirusSum6 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(logDWV),
mean = mean(logDWV, na.rm=TRUE),
sd = sd(logDWV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting DWV VL for experiment 2
DWVload2 <- ggplot(data = VirusSum6,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = NULL, y = "DWV log(genome copies/bee)") + coord_cartesian(ylim = c(0, 17), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none")+ scale_x_continuous(breaks=c(1,2,3))
DWVload2
# Summary of BQCV VL for experiment 2
VirusSum8 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
>>>>>>> origin/master
n = length(logBQCV),
mean = mean(logBQCV, na.rm=TRUE),
sd = sd(logBQCV, na.rm = TRUE),
se = sd / sqrt(n))
# plotting BQCV prev. for experiment 1
BQCVload1 <- ggplot(data = VirusSum1,
aes(x = SamplingEvent,
y = mean,
<<<<<<< HEAD
group = Treatment)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1.5) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85),legend.key.width=unit(5,"line"), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Operation Type:") + scale_x_continuous(breaks=c(1,2,3))
BQCVload1
VirusSum1
nbBQCV <- lmer(data=MigStatExp_1, formula = logBQCV~Treatment * SamplingEvent + (1|ID))
Anova(nbBQCV)
nbBQCV <- lmer(data=MigStatExp_1, formula = logBQCV~Treatment * SamplingEvent + (1+SamplingEvent|ID))
Anova(nbBQCV)
#Varroa prevalence using glmer
Fullmod2 <- glmer(data=MigStatExp_1, formula = VarroaBinary~Treatment * SamplingEvent + (1|ID), family = binomial(link = "logit"))
Anova(Fullmod2)
#Varroa prevalence using glmer
Fullmod2 <- glmer(data=MigStatExp_1, formula = VarroaBinary~Treatment * SamplingEvent + (1 + SamplingEvent|ID), family = binomial(link = "logit"))
Anova(Fullmod2)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1+SamplingEvent|ID))
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/MigratoryStationary/")
###########################################################################################
# Read in Virus Data:
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Read in Nosema/Varroa/Eco Data:
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# source my functions
source("Scripts/BurnhamFunctions.R")
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(lmerTest)
library(lsmeans)
# preliminary data cleaning
MigVirus <- PrelimClean(data=MigVirus)
# take only columns that we want:
data <- select(MigStat, sample_name, Treatment, dil.factor)
# merge with dilution factors
MigVirus <- merge(MigVirus, data, by=c("sample_name"), all.x =TRUE)
# use dilution factors to calcualte normalized virus load
MigVirus <- VirusNorm(data=MigVirus, number_bees = 50)
# use actin to normalize normalized viral load
MigVirus <- actinNormal(data=MigVirus)
# remove actin from data frame
MigVirus <- MigVirus[!(MigVirus$target_name=="ACTIN"),]
# adds virus binary data and makes norm genome copy 0 if above threashold CT
MigVirus <- CT_Threash(data=MigVirus)
# create full ID to check for inccorrect duplicates
MigVirus$fullID <- with(MigVirus, paste0(sample_name, target_name))
# remove duplicates for examples with Cts above threashold (i.e. both coerced to 0s)
MigVirus <- MigVirus[!duplicated(MigVirus$fullID), ]
# merge the virus data to the main dataset
MigStat <- VirusMerger2000(data1 = MigVirus, data2 = MigStat)
# create average Nosema Load between chambers
MigStat$NosemaLoad <- (MigStat$NosemaChamber1 + MigStat$NosemaChamber2)/2
# create average Nosema Load between chambers for recounted
MigStat$NosemaLoadRecount <- (MigStat$NosemaChamber1Recount + MigStat$NosemaChamber2Recount)/2
# normalize varroa load by number of bees sampled
MigStat$Varroa <- (MigStat$VarroaLoad / MigStat$TotBees) * 100
# log transform virus data:
MigStat$logDWV <- log(MigStat$DWVload + 1)
MigStat$logBQCV <- log(MigStat$BQCVload + 1)
# create binary variable for Nosema:
MigStat$NosemaBinary <- ifelse(MigStat$NosemaLoadRecount == 0, 0, 1)
# create binary variable for Varroa:
MigStat$VarroaBinary <- ifelse(MigStat$VarroaLoad == 0, 0, 1)
# Setting up dataframe without Exposed for Experiment 1 data (Mig vs Stationary)
MigStatExp_1<-MigStat[!(MigStat$Treatment=="Exposed"),]
# create data frame for running preliminary T1 tests
MigStatExp_1_T1<-MigStatExp_1[(MigStatExp_1$SamplingEvent=="1"),]
# Initial T1 test:
x <- table(MigStatExp_1_T1$Treatment, MigStatExp_1_T1$DWVbinary)
chisq.test(x)
# DWV prevalence using glmer
Fullmod <- glmer(data=MigStatExp_1, formula = DWVbinary~Treatment * SamplingEvent + (1+SamplingEvent|ID), family = binomial(link = "logit"))
Anova(Fullmod)
# Summary of DWV prev. for experiment 1
VirusSum <- ddply(MigStatExp_1, c("Treatment", "SamplingEvent"), summarise,
n = length(DWVbinary),
mean = mean(DWVbinary, na.rm=TRUE),
sd = sd(DWVbinary, na.rm = TRUE),
se = sd / sqrt(n))
# clean data set for analysis, take varroa from time point three and merge with data set from
# time step 2 for only migratory and stationary:
MiteFob <- MigStat[!MigStat$SamplingEvent==1, ]
MiteFob <- MiteFob[!MiteFob$Treatment=="Exposed", ]
MiteFob <- split(MiteFob, MiteFob$SamplingEvent)
MiteFob2 <- MiteFob$`2`
MiteFob3 <- MiteFob$`3`
MiteFob2$Varroa3 <- MiteFob3$Varroa
# main plot parameters
p <- ggplot(MiteFob3, aes(Varroa, FOB)) + geom_point(aes(color=Treatment), size = 3.5) + coord_cartesian(xlim = c(0,10), ylim=c(0,25))
# aestetic parameters
p + theme_classic(base_size = 17) + theme(legend.position=c(.85, .8), legend.background = element_rect(color = "black", size = .5)) + labs(color="Treatment", y="Varroa at Time Point 3", x="Frames of Bees at Time Point 2") + scale_color_manual(values = c("slategrey", "black")) + geom_smooth(aes(color=Treatment), method  = lm, se = FALSE)
x <- split(MiteFob3, MiteFob3$Treatment)
Mig <- x$Migratory
Stat<- x$Stationary
modMig <- lm(data=Mig, Varroa~FOB)
summary(modMig)
modStat <- lm(data=Stat, Varroa~FOB)
summary(modStat)
MiteFobFull <- MigStat[!MigStat$Treatment=="Exposed", ]
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1+SamplingEvent|ID))
Anova(mod)
summary(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1|ID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment + SamplingEvent + (1|ID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1|ID))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment + SamplingEvent + (1|ID))
MiteFobFull
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1|ID) + 1|Yard))
mod <- lmer(data = MiteFobFull, formula = Varroa ~ FOB * Treatment * SamplingEvent + (1|ID) + (1|Yard))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * FOB * Treatment + (1|ID) + (1|Yard))
Anova(mod)
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * FOB * Treatment + (1|ID) + (1|Yard))
Anova(mod)
summary(mod)
coef(summary(mod))
lsmeans(mod, list(pairwise ~ Treatment), adjust = "tukey")
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * FOB * Treatment + (1|ID/Yard))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * FOB * Treatment + (1|ID) + (1|Yard))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
Anova(mod)
#BQCV prevalence using glmer
Fullmod2 <- glmer(data=MigStatExp_1, formula = BQCVbinary~Treatment * SamplingEvent + (1+SamplingEvent|ID), family = binomial(link = "logit"))
mod <- lmer(data = MiteFobFull, formula = NosemaLoad ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = logBQCV ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
mod <- lmer(data = MiteFobFull, formula = NosemaLoad ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
MiteFobFull
mod <- lmer(data = MiteFobFull, formula = BQCV ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
Anova(mod)
mod <- lmer(data = MiteFobFull, formula = Varroa ~  SamplingEvent * (FOB * Treatment) + (1|ID) + (1|Yard))
Anova(mod)
=======
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = NULL, y = "BQCV log(genome copies/bee)") + coord_cartesian(ylim = c(10, 25), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position=c(.2, .85), legend.key.width=unit(10,"line"), legend.key.height = unit(3, "line")) + scale_x_continuous(breaks=c(1,2,3))
BQCVload2
# Summary of varroa load for experiment 2
VarSum2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(Varroa),
mean = mean(Varroa, na.rm=TRUE),
sd = sd(Varroa, na.rm = TRUE),
se = sd / sqrt(n))
# plotting varroa load for experiment 2
VARload2 <- ggplot(data = VarSum2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Varroa (mites/100 bees)") + coord_cartesian(ylim = c(0, 5), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none") + scale_x_continuous(breaks=c(1,2,3))
VARload2
# Summary of FOB for experiment 2
FOB2 <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm=TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
# plotting FOB for experiment 2
FOB3 <- ggplot(data = FOB2,
aes(x = SamplingEvent,
y = mean,
col = Treatment,
linetype= Treatment)
) + geom_point(size=8) + scale_colour_manual(values = c("darkgrey","black", "black")) + scale_linetype_manual(values = c(1, 1, 2)) + labs(x = "Sampling Event", y = "Frames of Bees") + coord_cartesian(ylim = c(6, 30), xlim = c(1,2,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05), linetype=1, show.legend=FALSE) + geom_line(size=3) + theme_classic(base_size = 30) + theme(legend.position="none") + scale_x_continuous(breaks=c(1,2,3))
FOB3
# create seperate data frames for each time point:
MigStatSplit <- split(MigStat, MigStat$SamplingEvent)
Mig1 <- MigStatSplit$`1`
Mig2 <- MigStatSplit$`2`
Mig3 <- MigStatSplit$`3`
# run LDA
time2 <- lda(Treatment~Varroa + NosemaLoadRecount + logBQCV + logDWV + DWVbinary + FOB + BroodPattern + NosemaBinary + VarroaBinary, data=Mig2, na.action="na.omit")
# LDA prep function
ggplotLDAPrep <- function(x){
if (!is.null(Terms <- x$terms)) {
data <- model.frame(x)
X <- model.matrix(delete.response(Terms), data)
g <- model.response(data)
xint <- match("(Intercept)", colnames(X), nomatch = 0L)
if (xint > 0L)
X <- X[, -xint, drop = FALSE]
}
means <- colMeans(x$means)
X <- scale(X, center = means, scale = FALSE) %*% x$scaling
rtrn <- as.data.frame(cbind(X,labels=as.character(g)))
rtrn <- data.frame(X,labels=as.character(g))
return(rtrn)
}
# fit graph for LDA
fitGraph <- ggplotLDAPrep(time2)
# graph for LDA
LDAone <- ggplot(fitGraph, aes(LD1,LD2, color=labels))+geom_point(size=6) + theme_minimal(base_size = 30) + theme(legend.key.width = unit(3, "line"), legend.key.height = unit(3, "line"), legend.position = c(x=.82, y=.85), legend.background = element_rect(fill="white", size=.5), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7) + labs(x="LD1 (88.36%)", y="LD2 (11.64%)") + scale_color_manual(values=c("black", "red", "blue"), name="Treatment",breaks=c("Exposed", "Migratory", "Stationary"), labels=c("Exposed", "Migratory", "Stationary\n(Isolated)"))
LDAone
# run LDA
time3 <- lda(Treatment~Varroa + NosemaLoadRecount + logBQCV + logDWV + DWVbinary + FOB + BroodPattern + NosemaBinary + VarroaBinary, data=Mig3, na.action="na.omit")
# graph for LDA
fitGraph1 <- ggplotLDAPrep(time3)
# graph for LDA
LDAtwo <- ggplot(fitGraph1, aes(LD1,LD2, color=labels))+geom_point(size=6) + theme_minimal(base_size = 30) + scale_colour_manual(values = c("black", "red","blue" )) + theme(legend.position= "none", axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7) + labs(color="Treatment:", x="LD1 (68.73%)", y="LD2 (31.27%)")
LDAtwo
# experiment 1:
plot_grid(BQCVload1, DWVload1, VARload1, FOB1, labels = c("A", "B", "C", "D"), ncol = 2,align="hv")
# experiment 2:
plot_grid(BQCVload2, DWVload2, VARload2, FOB3, labels = c("A", "B", "C", "D"), ncol = 2,  align="hv", label_size = 30)
# LDA 1 and 2:
plot_grid(LDAone, LDAtwo, labels = c("A", "B"), align="hv",  label_size = 30)
>>>>>>> origin/master
