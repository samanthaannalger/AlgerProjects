Stationary <- sumsplit$`Statonary `$mean
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
mat
sum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm = TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
sumsplit <- split(sum, sum$Treatment)
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$Stationary$mean
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
mat
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat$NosemaLoad <- (MigStat$NosemaChamber1 + MigStat$NosemaChamber2)/2
RepANOVA <- function(data, column){
data$x <- data[,column]
# repeated measures on continuous variable
aov.out <- aov(x~Treatment * SamplingEvent + Error(ID), data=data)
#PLOT:
library(plyr)
sum <- ddply(data, c("Treatment", "SamplingEvent"), summarise,
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
# split data frame by origin
sumsplit <- split(sum, sum$Treatment)
# create matrix of values and vector of time
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$Stationary$mean
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
# plot matrix
matplot(x=SamplingEvent, y=mat,
type="l",
xlab="Sampling Event",
ylab=as.character(column),
lwd=2,
lty=1,
font.lab=2,
bty="l",
col=2:6)
grid(col="gray")
# create legend for plot
legend(x=1,y=max(Migratory),
c("Migratory",
"Stationary",
"Exposed"),
pch=19,
col=2:6,
bty="n",
bg="white")
# return matrix and stats for ANOVA
return(list(mat, aov.out, summary(aov.out)))
}
RepANOVA(data=MigStat, column="FOB")
aov.out <- aov(FOB ~ Treatment * SamplingEvent + Error(ID), data=MigStat)
summary(aov.out)
sum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm = TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
sumsplit <- split(sum, sum$Treatment)
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
aov.out <- aov(NosemaLoad ~ Treatment * SamplingEvent + Error(ID), data=MigStat)
summary(aov.out)
library(plyr)
library(ggplot2)
Summary <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(NosemaLoad),
mean = mean(NosemaLoad, na.rm = TRUE),
sd = sd(NosemaLoad, na.rm = TRUE),
se = sd / sqrt(n))
Summary <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(VarroaLoad),
mean = mean(VarroaLoad, na.rm = TRUE),
sd = sd(VarroaLoad, na.rm = TRUE),
se = sd / sqrt(n))
Summary <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm = TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
Summary <- Summary[-c(1,2,3,6,9),]
ggplot(data = Summary,
aes(x = SamplingEvent,
y = mean,
group = Treatment)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "blue")) + labs(x = "Sampling Event", y = "Nosema Load") + coord_cartesian(ylim = c(0, 30), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(aes(linetype=Treatment), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.1, .85), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Queen Origin")
sum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm = TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
sumsplit <- split(sum, sum$Treatment)
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
sum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm = TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
sumsplit <- split(sum, sum$Treatment)
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
mat
Exposed
Stationary <- sumsplit$
Exposed <- sumsplit$Exposed$mean
sumsplit
sum <- ddply(MigStat, c("Treatment", "SamplingEvent"), summarise,
n = length(FOB),
mean = mean(FOB, na.rm = TRUE),
sd = sd(FOB, na.rm = TRUE),
se = sd / sqrt(n))
sumsplit <- split(sum, sum$Treatment)
sum
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$Stationary$mean
Exposed <- sumsplit$Exposed
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$Stationary$mean
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
mat
RepANOVA <- function(data, column){
data$x <- data[,column]
# repeated measures on continuous variable
aov.out <- aov(x~Treatment * SamplingEvent + Error(ID), data=data)
#PLOT:
library(plyr)
sum <- ddply(data, c("Treatment", "SamplingEvent"), summarise,
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
# split data frame by origin
sumsplit <- split(sum, sum$Treatment)
# create matrix of values and vector of time
SamplingEvent <- c(1:3)
Migratory <- sumsplit$Migratory$mean
Stationary <- sumsplit$Stationary$mean
Exposed <- sumsplit$Exposed$mean
mat <- as.matrix(cbind(Migratory, Stationary, Exposed))
# plot matrix
matplot(x=SamplingEvent, y=mat,
type="l",
xlab="Sampling Event",
ylab=as.character(column),
lwd=2,
lty=1,
font.lab=2,
bty="l",
col=2:6)
grid(col="gray")
# create legend for plot
legend(x=1,y=max(Migratory),
c("Migratory",
"Stationary",
"Exposed"),
pch=19,
col=2:6,
bty="n",
bg="white")
# return matrix and stats for ANOVA
return(list(mat, aov.out, summary(aov.out)))
}
RepANOVA(data=MigStat, column="FOB")
RepANOVA(data=MigStat, column="NosemaLoad")
RepANOVA(data=MigStat, column="NosemaLoad")
RepANOVA(data=MigStat, column="FOB")
RepANOVA(data=MigStat, column="BroodPattern")
RepANOVA(data=MigStat, column="Varroa")
RepANOVA(data=MigStat, column="VarroaLoad")
MigStat$Varroa <- MigStat$VarroaLoad / MigStat$TotBees
RepANOVA(data=MigStat, column="Varroa")
func <- function(x, factors){
library(plyr)
sum <- ddply(data, factors, summarise,
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
return(sum)
}
func(x=Varroa, factors = c("Treatment", "SamplingEvent"))
func <- function(x, factors){
factors = x
library(plyr)
sum <- ddply(data, x, summarise,
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
return(sum)
}
func(x=Varroa, factors = c("Treatment", "SamplingEvent"))
func <- function(data = MigStat,x, factors){
factors = x
library(plyr)
sum <- ddply(data, x, summarise,
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
return(sum)
}
func(x=Varroa, factors = c("Treatment", "SamplingEvent"))
func(x=VarroaLoad, factors = c("Treatment", "SamplingEvent"))
func <- function(data = MigStat, x, y){
factors = y
library(plyr)
sum <- ddply(data, y, summarise,
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
se = sd / sqrt(n))
return(sum)
}
func(x=VarroaLoad, y = c("Treatment", "SamplingEvent"))
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigVirus
MigVirus1<-MigVirus[!MigVirus(data), ]
MigVirus1<-MigVirus[!duplicated(MigVirus), ]
MigVirus1
PrelimClean <- function(data=MigVirus){
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
PrelimClean(data=MigVirus)
MigVirus$sample_name
PrelimClean <- function(data=MigVirus){
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
data
PrelimClean(data=MigVirus)
MigVirus$sample_name
View(MigVirus)
PrelimClean(data=MigVirus)
PrelimClean <- function(data=MigVirus){
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data$sample_name)
}
PrelimClean(data=MigVirus)
PrelimClean <- function(data=MigVirus){
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
m <- data
return(m)
}
PrelimClean(data=MigVirus)
PrelimClean <- function(data=MigVirus){
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
data <<- data
return(data)
}
PrelimClean(data=MigVirus)
MigVirus <- PrelimClean(data=MigVirus)
PrelimClean <- function(data=MigVirus){
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- PrelimClean(data=MigVirus)
MigVirus$sample_name
View(MigVirus)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, sample_name, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- PrelimClean(data=MigVirus)
View(MigVirus)
View(MigVirus)
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigVirus
MigVirus$labID
View(MigVirus)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, sample_name, ID, LabID, SamplingEvent, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows
#data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- PrelimClean(data=MigVirus)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, sample_name, ID, labID, SamplingEvent, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows
#data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- PrelimClean(data=MigVirus)
MigVirus
View(MigVirus)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, sample_name, ID, labID, SamplingEvent, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, sample_name, ID, labID, SamplingEvent, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- PrelimClean(data=MigVirus)
MigVirus
View(MigVirus)
View(MigVirus)
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat$NosemaLoad <- (MigStat$NosemaChamber1 + MigStat$NosemaChamber2)/2
MigStat$Varroa <- MigStat$VarroaLoad / MigStat$TotBees
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, sample_name, ID, labID, SamplingEvent, target_name, Ct_mean, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$sample_name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$sample_name=="G-Block"),]
return(data)
}
MigVirus <- PrelimClean(data=MigVirus)
MigVirus
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat$NosemaLoad <- (MigStat$NosemaChamber1 + MigStat$NosemaChamber2)/2
MigStat$Varroa <- MigStat$VarroaLoad / MigStat$TotBees
source("Scripts/BurnhamFunctions.R")
source("Scripts/BurnhamFunctions.R")
MigVirus <- PrelimClean(data=MigVirus)
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
source("Scripts/BurnhamFunctions.R")
MigVirus <- PrelimClean(data=MigVirus)
rm(list=ls())
setwd("~/AlgerProjects/MigratoryStationary/")
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
MigStat <- read.table("Data/MigratoryStationaryData.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
source("Scripts/BurnhamFunctions.R")
MigVirus <- PrelimClean(data=MigVirus)
MigVirus
MigVirus <- PrelimClean(data=MigVirus)
MigVirus
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
View(MigVirus)
MigVirus <- read.table("Data/MigVirus.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
