n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
ls()
rm(list=ls())
setwd("~/AlgerProjects/NearFar")
NFdata <- read.table("NearFar_qPCR_results.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
DilDF <- read.table("DilutionFactors.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
MeltTemp <- read.table("MeltTemp.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
NFdata <- merge(NFdata, DilDF, by="ID")
crude_extr <- 100
eluteRNA <- 50
total_extr_vol <- 600
number_bees <- 1
cDNA_eff <- 0.1
rxn_vol <- 3
NFdata$genome_copbee <- ((((((NFdata$QuantityMean / cDNA_eff) / rxn_vol) * NFdata$dilFactor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
ActinOnly <- NFdata[which(NFdata$Virus=="ACTIN"),]
ActinDF <- data.frame(ActinOnly$ID, ActinOnly$genome_copbee)
colnames(ActinDF) <- c("ID", "ACT_genome_copbee")
NFdata <- merge(NFdata, ActinDF, by="ID")
ActinMean <- mean(ActinOnly$genome_copbee, na.rm = TRUE)
NFdata$norm_genome_copbee <- (NFdata$genome_copbee/NFdata$ACT_genome_copbee)*ActinMean
NFdata <- NFdata[-which(NFdata$Virus=="ACTIN"),]
NFdata <- merge(NFdata, MeltTemp, by=c("ID","Virus"), all.x=TRUE, all.y=FALSE)
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=NFdata, variable=NFdata$Virus){
splitDF <- split(NFdata, NFdata$Virus)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$CqMean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$CqMean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$CqMean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
# make NA values 0
x$virusBINY[is.na(x$virusBINY)] <- 0
return(x)}
NFdata <- Burnhams_Fabulous_Data_Cleanser(NFdata)
viralLoad <- NFdata$norm_genome_copbee
NFdata <- cbind(viralLoad, NFdata)
NFdata$viralLoad[NFdata$virusBINY == 0] <-0
NFdata$LOGviralLoad <- log10(NFdata$viralLoad)
NFdata$LOGviralLoad[NFdata$LOGviralLoad == -Inf] <-0
head(NFdata)
x <- NFdata[which(NFdata$LOGviralLoad>0),]
hist(NFdata$LOGviralLoad)
VirusSummary <- ddply(x, c("Virus", "treatment"), summarise,
n = length(LOGviralLoad),
mean = mean(LOGviralLoad, na.rm = TRUE),
sd = sd(LOGviralLoad, na.rm = TRUE),
se = sd / sqrt(n))
VirusSummary <- VirusSummary[-c(3,6),]
print(VirusSummary)
colors <- c("slategray3", "dodgerblue4")
plot2 <- ggplot(VirusSummary, aes(x=Virus, y=mean, fill=treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Virus",
y = "Viral Load log(genome copies)")
plot2 + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 8)) + scale_fill_manual(values=colors)
xsplit <- split(x, x$Virus)
t.test(xsplit$BQCV$LOGviralLoad~xsplit$BQCV$treatment)
t.test(xsplit$DWV$LOGviralLoad~xsplit$DWV$treatment)
PrevSummary <- ddply(NFdata, c("Virus", "treatment"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm = TRUE),
sd = sd(virusBINY, na.rm = TRUE),
se = sd / sqrt(n))
PrevSummary <- PrevSummary[-c(3,6,7,8,9),]
print(PrevSummary)
colors <- c("slategray3", "dodgerblue4")
plot2 <- ggplot(PrevSummary, aes(x=Virus, y=mean, fill=treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Virus",
y = "Viral Load log(genome copies)")
plot2 + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .9)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors)
ls()
rm(list=ls())
setwd("~/EcologicalGenomics")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('RawData/countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("RawData/cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health + location:health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))  #sets that "healthy is the reference
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, name="locationsub.healthS")
res <- res[order(res$padj),]
head(res)
summary(res)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, contrast=list( c("groupint.H.0","groupsub.H.0"), c("groupint.S.1","groupsub.S.1")), listValues=c(1/2, -1/2))
res <- res[order(res$padj),]
head(res)
summary(res)
ddsTS <- DESeqDataSetFromMatrix(countData = countData, colData = colData, ~ health + day + health:day)
ddsTS <- ddsTS[ rowSums(counts(ddsTS)) > 100, ]
ddsTS <- ddsTS[sample(nrow(ddsTS), 1200), ]
dim(ddsTS)
ddsTS <- DESeq(ddsTS, parallel=T, test="LRT", reduced = ~ health + day)
resTS <- results(ddsTS)
resTS$symbol <- mcols(ddsTS)$symbol
head(resTS[order(resTS$padj),],4)
summary(resTS)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ score)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","score","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= score, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x=score, y=count, color=health, group=health))
p <- p +  geom_point() + stat_smooth(se=FALSE,method="loess") +  scale_y_log10()
p
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","score","location")), returnData=TRUE)
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
p <- ggplot(d, aes(x= score, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","score","location")), returnData=TRUE)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
res
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health + location:health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))  #sets that "healthy is the reference
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, name="locationsub.healthS")
res <- res[order(res$padj),]
head(res)
res$padj
summary(res)
res
str(res)
cbind(res$padj)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
ps
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
ps
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, contrast=list( c("groupint.H.0","groupsub.H.0"), c("groupint.S.1","groupsub.S.1")), listValues=c(1/2, -1/2))
res <- res[order(res$padj),]
head(res)
summary(res)
##################################################################################-
# Preliminaries:
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/NearFar")
# read in data:
NFdata <- read.table("NearFar_qPCR_results.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
DilDF <- read.table("DilutionFactors.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
MeltTemp <- read.table("MeltTemp.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
##################################################################################-
# load packages:
# remove uneeded columns from DF:
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
##################################################################################-
# Calculate genome copies per bee and remove actin from data set:
# merge dil factors with main DF
NFdata <- merge(NFdata, DilDF, by="ID")
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
total_extr_vol <- 600
number_bees <- 1
cDNA_eff <- 0.1
rxn_vol <- 3
# create column for genome copies per bee:
NFdata$genome_copbee <- ((((((NFdata$QuantityMean / cDNA_eff) / rxn_vol) * NFdata$dilFactor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# pull only actin values out of dataframe
ActinOnly <- NFdata[which(NFdata$Virus=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$ID, ActinOnly$genome_copbee)
colnames(ActinDF) <- c("ID", "ACT_genome_copbee")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
NFdata <- merge(NFdata, ActinDF, by="ID")
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genome_copbee, na.rm = TRUE)
# create column for normalized genome copies per bee:
NFdata$norm_genome_copbee <- (NFdata$genome_copbee/NFdata$ACT_genome_copbee)*ActinMean
# Remove actin from main dataframe (NFdata)
NFdata <- NFdata[-which(NFdata$Virus=="ACTIN"),]
# merge Melt Temps with main data frame by ID and Virus
NFdata <- merge(NFdata, MeltTemp, by=c("ID","Virus"), all.x=TRUE, all.y=FALSE)
##################################################################################-
# this function puts NAs in vectors where values parameters are not met then removes those columns, cleaning the data frame:
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=NFdata, variable=NFdata$Virus){
splitDF <- split(NFdata, NFdata$Virus)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$CqMean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$CqMean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$CqMean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
# make NA values 0
x$virusBINY[is.na(x$virusBINY)] <- 0
return(x)}
# END OF FUNCTION
# calling Burnhams_Fabulous_Data_Cleanser created above and using it on NFdata data frame:
NFdata <- Burnhams_Fabulous_Data_Cleanser(NFdata)
##################################################################################-
# create new variable called viralLoad that makes values 0 when they fail the virusBINY logical (0 or 1)
viralLoad <- NFdata$norm_genome_copbee
NFdata <- cbind(viralLoad, NFdata)
NFdata$viralLoad[NFdata$virusBINY == 0] <-0
# create log base 10 viral load column:
NFdata$LOGviralLoad <- log10(NFdata$viralLoad)
NFdata$LOGviralLoad[NFdata$LOGviralLoad == -Inf] <-0
head(NFdata)
x <- NFdata[which(NFdata$LOGviralLoad>0),]
##################################################################################-
###########_____DATA___ANALYSIS______############
hist(NFdata$LOGviralLoad)
#----------------------------------------------------------------
# summary stats for plotting purposes:
VirusSummary <- ddply(x, c("Virus", "treatment"), summarise,
n = length(LOGviralLoad),
mean = mean(LOGviralLoad, na.rm = TRUE),
sd = sd(LOGviralLoad, na.rm = TRUE),
se = sd / sqrt(n))
#subsetting the data to remove NA and IAPV (no viral loads)
VirusSummary <- VirusSummary[-c(3,6),]
print(VirusSummary)
#----------------------------------------------------------------
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
plot2 <- ggplot(VirusSummary, aes(x=Virus, y=mean, fill=treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Virus",
y = "Viral Load log(genome copies)")
plot2 + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .85)) + coord_cartesian(ylim = c(0, 8)) + scale_fill_manual(values=colors)
xsplit <- split(x, x$Virus)
t.test(xsplit$BQCV$LOGviralLoad~xsplit$BQCV$treatment)
t.test(xsplit$DWV$LOGviralLoad~xsplit$DWV$treatment)
#-----------------------------------------------------------------------------------
# looking at prevalence:
#----------------------------------------------------------------
# summary stats for plotting purposes:
PrevSummary <- ddply(NFdata, c("Virus", "treatment"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm = TRUE),
sd = sd(virusBINY, na.rm = TRUE),
se = sd / sqrt(n))
#subsetting the data to remove NA and IAPV (no viral loads)
PrevSummary <- PrevSummary[-c(3,6,7,8,9),]
print(PrevSummary)
#----------------------------------------------------------------
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
plot2 <- ggplot(PrevSummary, aes(x=Virus, y=mean, fill=treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x="Virus",
y = "Viral Load log(genome copies)")
plot2 + theme_minimal(base_size = 17) + theme(legend.position=c(.85, .9)) + coord_cartesian(ylim = c(0, 1)) + scale_fill_manual(values=colors)
x <- NFdata[which(NFdata$LOGviralLoad>0),]
x
x$LOGviralLoad
print(VirusSummary)
MyVec <- dnbinom(x=seq(0,40), size=1,prob=0.1)
MyVec <- dnbinom(x=seq(0,40), size=5, prob=0.5)
MyVec
names(MyVec) <- seq(0,40)
barplot(height=MyVec)
MyVec <- dnbinom(x=seq(0,40), size=1, prob=0.1) # until you get five heads (how many tails or failures)
names(MyVec) <- seq(0,40)
barplot(height=MyVec) # distribution of failure times
MyVec <- dnbinom(x=seq(0,40), size=1, mu=5) # until you get five heads (how many tails or failures)
names(MyVec) <- seq(0,40)
barplot(height=MyVec)
MyVec <- dnbinom(x=seq(0,40), size=5, mu=5) # until you get five heads (how many tails or failures)
names(MyVec) <- seq(0,40)
barplot(height=MyVec)
pnbinom(q=3, size=1, mu=5)
qbinom(p=0.05, size=10, mu=5)
qnbinom(p=0.05, size=10, mu=5)
qnbinom(p=c(0.025, 0.975), prob=0.5, size=10)
MyVec <- rnbinom(n=1000, size=1, mu=20)
quantile(MyVec)
quantile(MyVec, prob=c(0.025, 0.975))
qnbinom(p=c(0.025, 0.975, size=1, mu=20))
qnbinom(p=c(0.025, 0.975), size=1, mu=20)
MyVec <- rnbinom(n=100, size=1, mu=20)
quantile(MyVec, prob=c(0.025, 0.975))
qnbinom(p=c(0.025, 0.975), size=1, mu=20)
MyVec <- rnbinom(n=1000, size=1, mu=20)
quantile(MyVec, prob=c(0.025, 0.975))
qnbinom(p=c(0.025, 0.975), size=1, mu=20)
limits <- seq(0,10, by=0.01)
z <- dunif(x=limits, min=0, max=5)
names(z) <- limits
limits <- seq(0,10, by=0.01)
z <- dunif(x=limits, min=0, max=5)
names(z) <- limits
plot(x=limits, y=z, type="l", xlim=c(0,10))
limits <- seq(0,10, by=0.1)
z <- punif(q=limits, min=0, max=5)
names(z) <- limits
plot(x=limits, y=z, type="l", xlim=c(0,10))
qunif(p=c(0.025, 0.975), min=0, max=5)
hist(runif(n=1000, min=0, max=5))
hist(rnorm(n=100, mean=100, sd=2))
hist(rnorm(n=100, mean=2, sd=2))
MyVec <- rnorm(n=100,mean=2,sd=2)
summary(MyVec)
TossZeroes <- MyVec[MyVec>0]
hist(TossZeroes)
summary(TossZeroes)
hist(rgamma(n=100, shape=1, scale=10))
hist(rgamma(n=100, shape=0.1, scale=10))
hist(rgamma(n=1000, shape=0.1, scale=10))
hist(rgamma(n=1000, shape=5, scale=10))
hist(rgamma(n=1000, shape=10, scale=10))
hist(rgamma(n=1000, shape=10, scale=1))
hist(rgamma(n=1000, shape=20, scale=1))
hist(rgamma(shape1=1, shape2=1))
hist(rbeta(shape1=1, shape2=1))
hist(rbeta(shape1=1, shape2=1, n=1000))
hist(rbeta(shape1=1, shape2=1, n=1000), breaks=seq(0,1,length=100))
hist(rbeta(shape1=2, shape2=1, n=1000), breaks=seq(0,1,length=100))
hist(rbeta(shape1=2, shape2=2, n=1000), breaks=seq(0,1,length=100))
hist(rbeta(shape1=3, shape2=1, n=1000), breaks=seq(0,1,length=100))
hist(rbeta(n=1000, shape1=20, shape2=20))
hist(rbeta(n=1000, shape1=20, shape2=20),breaks=seq(0,1,length=100))
hist(rbeta(n=1000, shape1=20, shape2=10),breaks=seq(0,1,length=100))
hist(rbeta(n=1000, shape1=200, shape2=100),breaks=seq(0,1,length=100))
hist(rbeta(n=1000, shape1=0.2, shape2=0.4),breaks=seq(0,1,length=100))
hist(rbeta(n=1000, shape1=0.4, shape2=0.4),breaks=seq(0,1,length=100))
library(MASS)
x <-rnorm(1000, mean=92.5, sd=2.5)
hist(x)
fitdistr(x, "normal")
mean(x)
sd(x)
fitdistr(x, "gamma")
z <- fitdistr(x, "gamma")
str(z)
z[1]/z$estimate(2)
z$estimate[1]/z$estimate(2)
z$estimate[1]/z$estimate[2]
z$estimate[1]/z$estimate[2]^2
