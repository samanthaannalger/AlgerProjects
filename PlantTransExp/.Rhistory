rm(list=ls(all=TRUE)
chipmunk =matrix (nrow=5,ncol=4, data=0)
chipmunk = matrix (nrow=5,ncol=4, data=0)
chipmunk[1,]=c(13,15,14,18)
chipmunk[2,]=c(10,9,10,11)
chipmunk[3,]=c(15,17,9,3)
chipmunk[4,]=c(12,11,10,12)
chipmunk[5,]=c(17,4,10,22)
rownames(chipmunk)=c("population 1","population 2","population 3","population 4","population 5")
colnames(chipmunk) = c("time 1", "time 2", "time 3" , "time 4")
# data check
chipmunk
# say you want to add a column of means for chipmunk populations across time
chipmunk = cbind(chipmunk,colMeans(chipmunk))
# data check
chipmunk
sd.vector=NULL
for (x in 1:length(chipmunk[,1])) {
sd.vector[x]=sd(chipmunk[x,1:4])
}
# data check
sd.vector
chipmunk=cbind(chipmunk,sd.vector)
colnames(chipmunk) = c("time 1", "time 2", "time 3" , "time 4","mean","sd")
# data check
Chipmunk
chipmunk
head(chipmunk,4)
tail(chipmunk,2)
which(chipmunk[,1] == min(chipmunk[,1]))
# That is, which row in the 1st column of chipmunk is equal to the
#  minimum of the 1st column of chipmunk
# or imbedded to give the values in a row (e.g., in this case all of the values in population 2)
chipmunk[which(chipmunk[,1] == min(chipmunk[,1])),]
# but there are a lot of other things you can do with the which family of functionsâ€¦
which.min(chipmunk)  # provides a value of 32 what does that mean?
# Read/compile on for more information!
# The 32nd value of the matrix (remember elements count vertically first)
#	holds the lowest value
chipmunk[which.min(chipmunk)]
# elements can be tough
which(chipmunk[,2:4]>10) # element numbers
# but these are the elements of the selected portion of chipmunk not the whole matrix
# that is, 1 is listed but element # 1 of chipmunk isn't even looked at by the query
# 	So, element 1 is the first element in chipmunk[,2:4]
# data check
chipmunk[,2:4]
chipmunk[,2:4]>10
# instead we can use the arr.ind=TRUE or arr.ind=T
# or you could ask for the location in the matrix using the arr.ind=TRUE argument
which(chipmunk[,2:4]>10,arr.ind=T)
?arr.ind+T
chipmunk[which(chipmunk[,1:4]>10)]
# of by querying the specific location
chipmunk[which(chipmunk[,1:4]>10,arr.ind=T)]
new.matrix = matrix(data=1:24, nrow=4,ncol= 6)
which(new.matrix %% 5 == 0) # the element numbers associated with new.matrix values divisible by 5
which(new.matrix %% 3 == 0, arr.ind = TRUE) # the location of numbers divisible by 3
?dbeta
beta<-dbeta(x, 20,10,ncp=0, log=FALSE)
beta
beta<-dbeta(10000, 20,10,ncp=0, log=FALSE)
beta
hist(beta)
beta<-dbeta(10000, shape1=20,shape2=10,ncp=0, log=FALSE)
hist(beta)
?dbeta
beta<-dbeta(n=10000, shape1=20,shape2=10)
beta<-rbeta(n=10000, shape1=20,shape2=10)
hist(beta)
?subset
points<-subset(20, beta)
points<-subset(beta, 20)
points<-sample(beta, 20)
points<-sample(beta, 20, replace=FALSE)
points2<-sample(beta,20, replace=FALSE)
mod1=lm(points~points2)
plot(mod1)
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
find.lm.p.value(mod1)
find.lm.p.value <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
find.lm.p.value(mod1)
?beta
beta1<-rbeta(n=10000, shape1=20,shape2=1)
beta2<-rbeta(n=10000, shape1=20,shape2=10)
beta3<-rbeta(n=10000, shape1=20,shape2=100)
beta4<-rbeta(n=10000, shape1=20,shape2=1000)
hist(beta1)
hist(beta2,add=TRUE)
hist(beta3,add=TRUE)
beta1<-rbeta(n=10000, shape1=1,shape2=1)
beta2<-rbeta(n=10000, shape1=100,shape2=100)
hist(beta1)
hist(beta2,add=TRUE)
hist(beta1)
hist(beta2,add=TRUE)
beta1<-rbeta(n=10000, shape1=1,shape2=1)
beta2<-rbeta(n=10000, shape1=100,shape2=100)
hist(beta1)
hist(beta2,add=TRUE)
hist(beta2)
hist(beta1,add=TRUE)
hist(beta2)
hist(beta1,add=TRUE)
hist(beta2)
beta2<-rbeta(n=10000, shape1=1,shape2=9)
beta1<-rbeta(n=10000, shape1=1,shape2=1)
beta2<-rbeta(n=10000, shape1=100,shape2=100)
beta3<-rbeta(n=10000, shape1=1,shape2=9)
hist(beta2)
hist(beta1,add=TRUE)
hist(beta3,add=TRUE)
hist(beta3)
beta3<-rbeta(n=10000, shape1=100,shape2=900)
hist(beta3)
beta4<-rbeta(n=10000, shape1=100,shape2=900)
hist(beta4)
hist(beta3)
beta3<-rbeta(n=10000, shape1=1,shape2=9)
beta4<-rbeta(n=10000, shape1=100,shape2=900)
hist(beta3)
hist(beta4,add=TRUE)
rm(list=ls(all=TRUE)
chipmunk = matrix (nrow=5,ncol=4, data=0)
chipmunk[1,]=c(13,15,14,18)
chipmunk[2,]=c(10,9,10,11)
chipmunk[3,]=c(15,17,9,3)
chipmunk[4,]=c(12,11,10,12)
rm(list=ls(all=TRUE)
chipmunk = matrix (nrow=5,ncol=4, data=0)
chipmunk[1,]=c(13,15,14,18)
rm(list=ls(all=TRUE)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
chipmunk = matrix (nrow=5,ncol=4, data=0)
chipmunk[1,]=c(13,15,14,18)
chipmunk[2,]=c(10,9,10,11)
chipmunk[3,]=c(15,17,9,3)
chipmunk[4,]=c(12,11,10,12)
chipmunk[5,]=c(17,4,10,22)
rownames(chipmunk)=c("population 1","population 2","population 3","population 4","population 5")
colnames(chipmunk) = c("time 1", "time 2", "time 3" , "time 4")
# data check
chipmunk
# say you want to add a column of means for chipmunk populations across time
chipmunk = cbind(chipmunk,colMeans(chipmunk))
chipmunk = cbind(chipmunk,colMeans(chipmunk))
# data check
chipmunk
# adding a second column with sd is a little tougher
beta5<-rbeta(n=10000, shape1=20, shape2=10)
hist(beta5)
points1<-sample(beta5, 20, replace=FALSE)
points2<-sample(beta5,20, replace=FALSE)
print(points1)
print(points2)
mod1<-lm(points1~points2)
find.lm.p.value <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
p<-NULL
for (it in 1:1000){
pnt1<-sample(beta5,20)
pnt2<-sample(beta5,20)
mod1= lm(pnt1~pnt2)
p<-rbind(p,find.lm.p.value(mod1))
}
p
x1=seq(0,8)
y1=seq(0,16,1)
y1=1*exp(.15*x1)
plot(x1,y1)
y1=1*exp(.15*x1) + 16
plot(x1,y1)
x1=seq(0,8)
y1=seq(0,16)
y1=1*exp(.15*x1)
plot(x1,y1)
x1=seq(0,8)
y1=seq(0:16,1)
y1=1*exp(.15*x1)
plot(x1,y1)
y1=numeric(0,16,1)
y1=1*exp(.15*x1)
plot(x1,y1)
y1=numeric(0:16)
y1=seq(0,16)
y1=1*exp(.15*x1)
plot(x1,y1)
x1=seq(0,16)
y1=seq(0,16)
y1=1*exp(.15*x1)
plot(x1,y1)
# Samantha Alger
# November 13th 2014
##honeybee abundance
honeybee.abun<-rpois(n=10000,lambda = 3)
hist(honeybee.abun, main="Honeybee Abundance",xlab= expression(paste("honeybees/m"^"2")))
#Subsample the distribution for honeybee abundance surveys at 15 sites.
honeybee.abun<-sample(honeybee.abun, 300, replace=FALSE, prob=NULL)
hist(sub.sample, main = "Honey bee abundance n=15",breaks=8, col="goldenrod", xlab=expression(paste("honeybees/m"^"2")))
#honeybee viral load:
honeybee.viral.load = rbeta(n=10000, shape1 =3, shape2 =2) *12+0
hist(honeybee.viral.load,main="Honeybee viral load", xlab= "# copies of viral genome/bee",breaks=50,col="goldenrod")
#Subsample honeybee viral load for 300 bees:
hbViralLoad<-sample(honeybee.viral.load, 300, replace=FALSE, prob=NULL)
hist(sub.sample, main= "Honey bee virus load n=300", breaks=20, col="goldenrod",xlab= "# copies of viral genome/bee")
#Bumble bee viral load:
library(truncnorm)
mu1 <- 9.7 #0
mu2 <- 0 #1600
sig1 <- 2.6 #190
sig2 <- 2.5 #300
cpct <- 0.6
bimodalDistFunc <- function (n,cpct, mu1, mu2, sig1, sig2) {
y0 <- rtruncnorm(n, a=0, mean = mu1, sd = sig1)
y1 <- rtruncnorm(n, a=0, b=4000, mean = mu2, sd = sig2)
flag <- rbinom(n, size=1, prob=cpct)
y <- y0*(1 - flag) + y1*flag
}
bimodalData <- bimodalDistFunc(n=100000, cpct, mu1, mu2, sig1, sig2)
hist(bimodalData, main="Bumblebee viral load", xlab="# copies of virus genome/bee",breaks=50, col="goldenrod")
#Create a sub sample of the distribution to show
BViralLoad<- sample(bimodalData,300,replace=FALSE, prob=NULL)
#view the subsample
hist(sub.sample, main="Bumble bee virus load n=300", breaks=20,col="goldenrod", xlab="# copies of virus genome/bee")
summary(BViralLoad)
#What is the error for bumble bee viral load?
sd(BViralLoad) #4.43
#create a distribution of error
error<-rnorm(n=300,mean=0,sd=1)
#create a matrix
data<-matrix(data=NA, nrow=300, ncol=6)
#assign column names
colnames(data)<-c("BVirus", "HBVirus", "HBabun", "Error", "HBVirus_Y", "HBabun_Y")
#populate column two with honeybee viral load data
data[,2]=hbViralLoad
#populate error column
data[,4]=error
#population honeybee abundance data
data[,3]=honeybee.abun
#View the data thus far
View(data)
##########################################################################
#Fitting data model:
x=data[,2] #honeybee viral load
y=NULL #bumble bee viral load
a=15 #6
b=.25
e=exp(1)
#for (x in 1:300) {
data[,5]=a*(1-(e^(-b*(data[,2])))) #to find y given HB viral load (natural growth model
data[,6] =1*exp(.15*(data[,3])) #to find y given honeybee abundance
abundance<-plot((data[,5]),(data[,3])) #plotting the honeybee abundance data and bViral loads
data[,1]=(data[,5])+(data[,4]) #calculating Y with error, only taking hb viral load into account.
data[,5]=a*(1-(e^(-b*(data[,2])))) #to find y given HB viral load (natural growth model
data[,6] =1*exp(.15*(data[,3])) #to find y given honeybee abundance
abundance<-plot((data[,5]),(data[,3])) #plotting the honeybee abundance data and bViral loads
data[,1]=(data[,4]) + ((data[,5]/2)+(data[,6]/2))
View(data)
mydata<-plot((data[,1]),(data[,2]), xlab="honeybee viral load", ylab="bumblebee viral load")
BV<-data[,1]
HB<-data[,2]
#non-linear model testing:
mod1<-nls(BV~(a*(1-(e^(-b*(HB))))), start=c(b = .25,a = 15))
summary(mod1)
mod1<-nls(BV~(a*(1-(e^(-b*(HB))))), start=list(b = .25,a = 15))
summary(mod1)
require(isectpolyrst)
??isectpolyrst
install.packages("isectpolyrst")
rm(list= ls(all=TRUE))
rnorm(mean=1, sd=.5, data=1000)
rnorm(mean=1, sd=.5, n=1000)
lambda<-rnorm(mean=1, sd=.5, n=1000)
hist(lambda)
#Create a matrix
PVA<-matrix(data=NA, nrow=100, ncol=3)
#assign column names
colnames(PVA)<-c("PopSize", "Lambda")
PVA<-matrix(data=NA, nrow=100, ncol=2)
#assign column names
colnames(PVA)<-c("PopSize", "Lambda")
attach(PVA)
head(PVA)
Lambda_Sub_Sample<-sample(lambda, 100, replace=FALSE, prob=NULL)
head(Lambda_Sub_Sample)
PVA[,2]=Lambda_Sub_Sample
head(PVA)
lambda<-rnorm(mean=1, sd=.5, n=1000, lbound=0)
lambda<-rnorm(mean=1, sd=.5, n=1000, min=0)
Lambda_Sub_Sample<-sample(lambda, 100, replace=FALSE, prob=NULL, min=0)
Lambda_Sub_Sample<-sample(lambda, 100, replace=FALSE, prob=NULL, lbound=0)
hist(lambda)=3
hist(lambda)+3
honeybee.viral.load = rbeta(n=10000, shape1 =3, shape2 =2) *12+0
hist(honeybee.viral.load)
lambda<-rbeta(n=10000, shape1 =3, shape2 =2) *2+0
hist(lambda)
PVA<-matrix(data=NA, nrow=100, ncol=2)
#assign column names
colnames(PVA)<-c("PopSize", "Lambda")
head(PVA)
#Subsample the distribution and input into the matrix
Lambda_Sub_Sample<-sample(lambda, 100, replace=FALSE, prob=NULL)
head(Lambda_Sub_Sample)
#add values to column
PVA[,2]=Lambda_Sub_Sample
head(PVA)
#set starting population
PVA[1,1]=1000
head(PVA_)
head(PVA)
34.21-13.79
71.50-25
67.00-.09-2-2-5.29-5.72
52.90+19.48+22.10+11.98+11.40+20.42+46.50+139.55+9.50
206+440+333.83
979.83+15.77
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(PlantsFig1, aes(x=Virus, y=mean, fill=Spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1))
# Samantha A. Alger
# 21, January 2017
# Plant Transmission Experiment
#------------------------------------------------------------------------
# Preliminaries:
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerCollaborations/PlantTransExp")
# read in data:
PlantVirus <- read.table("PlantTransPlantVirus.csv", header=TRUE, sep = ",")
#------------------------------------------------------------------------
# data cleaning whip dataframe into shape and merge with eco data:
# remove uneeded columns from DF:
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
# group presence-absence by treatment and Virus:
DWV <- ddply(PlantVirus, c("C.T"), summarise,
n = length(DWV),
mean = mean(DWV, na.rm=TRUE),
sd = sd(DWV, na.rm=TRUE),
se = sd / sqrt(n))
DWV <- DWV[-2,]
BQCV <- ddply(PlantVirus, c("C.T"), summarise,
n = length(BQCV),
mean = mean(BQCV, na.rm=TRUE),
sd = sd(BQCV, na.rm=TRUE),
se = sd / sqrt(n))
BQCV <- BQCV[-2,]
Virus <- c(rep("DWV", 2), rep("BQCV", 2))
PlantsFig <- rbind(DWV, BQCV)
PlantsFig <- cbind(PlantsFig, Virus)
PlantsFig$C.T <- ordered(PlantsFig$C.T, levels = c("Treatment", "Control", "Pre"))
#------------------------------------------------------------------------
#choosing color pallet
colors <- c("slategray3", "dodgerblue4")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(PlantsFig, aes(x=C.T, y=mean, fill=Virus)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus:", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_x_discrete(labels=c("Honey Bees + Bumble Bees", "Bumble Bees Only"))
##scale_x_discrete() is awesome for changing axis labels
#------------------------------------------------------------------------
# Dividing up by flower Spp. now:
DWV <- ddply(PlantVirus, c("C.T", "Spp"), summarise,
n = length(DWV),
mean = mean(DWV, na.rm=TRUE),
sd = sd(DWV, na.rm=TRUE),
se = sd / sqrt(n))
DWV <- DWV[-c(1:6),]
BQCV <- ddply(PlantVirus, c("C.T", "Spp"), summarise,
n = length(BQCV),
mean = mean(BQCV, na.rm=TRUE),
sd = sd(BQCV, na.rm=TRUE),
se = sd / sqrt(n))
BQCV <- BQCV[-c(1:6),]
Virus <- c(rep("DWV", 3), rep("BQCV", 3))
PlantsFig1 <- rbind(DWV, BQCV)
PlantsFig1 <- cbind(PlantsFig1, Virus)
#------------------------------------------------------------------------
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(PlantsFig1, aes(x=Virus, y=mean, fill=Spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1))
