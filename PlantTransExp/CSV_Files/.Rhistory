}
for (t in 1:TimeSteps){
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
if(beeMatStatic[i,j] == 3 || beeMatStatic[i,j] == 4 || beeMatStatic[i,j] == 5 ){
beeMat[i,j] <- beeMatStatic[i,j]
}
if(t %% flowerDuration == 0){
if(beeMatStatic[i,j]==5){
beeMatStatic[i,j] <- 0
beeMatStatic[round(runif(1, min=2, max=yDim)), round(runif(1, min=2, max=yDim))] <- 5
}
}
}
}
name <- rename(t)
png(name)
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Paramters:
xDim <- 50
yDim <- 50
TimeSteps <- 50
flowerDuration <- 10
cols <- c(
'0' = "white", # empty space
'1' = "yellow", # honeybees
'2' = "orange", # bumblebees
'3' = "black", # honeybee colonies
'4' = "grey", # bumblebee colonies
'5' = "red" # flowers
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
beeMatStatic <- beeMat
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
if(beeMatStatic[i,j] == 3 || beeMatStatic[i,j] == 4 || beeMatStatic[i,j] == 5 ){
beeMat[i,j] <- beeMatStatic[i,j]
}
if(t %% flowerDuration == 0){
if(beeMat[i,j]==5){
beeMat[i,j] <- 0
beeMatStatic[round(runif(1, min=2, max=yDim)), round(runif(1, min=2, max=yDim))] <- 5
}
}
}
}
name <- rename(t)
png(name)
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
setwd("~/Documents/GitHub/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="T"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
# Clear memory of characters:
ls()
rm(list=ls())
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="T"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="diversity"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="comingle"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
# What's the percent detection for each plant species for each virus?
plantAcuteDWV <- plantTreat[ which(plantTreat$target_name=="DWV"), ]
plantAcuteBQCV <- plantTreat[ which(plantTreat$target_name=="BQCV"), ]
tapply(plantAcuteDWV$BINYprefilter, plantAcuteDWV$spp, mean)
#BFT        RC        WC
#0.0000000 0.3333333 0.2307692
tapply(plantAcuteBQCV$BINYprefilter, plantAcuteBQCV$spp, mean)
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
#removing all WC and RC
plantTreat <- plantTreat[ which(plantTreat$spp=="BFT"), ]
fisher.test(plantTreat$BINYprefilter, plantTreat$target_name)
plantTreat$spp <- as.factor(plantTreat$spp)
plantTreat$target_name <- as.factor(plantTreat$target_name)
library(lme4)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name*spp + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
plantTreat
plantTreat$X
# Clear memory of characters:
ls()
rm(list=ls())
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="T"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="diversity"), ]
plantTreat <- plantTreat[ -which(plantTreat$exp=="comingle"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
# What's the percent detection for each plant species for each virus?
plantAcuteDWV <- plantTreat[ which(plantTreat$target_name=="DWV"), ]
plantAcuteBQCV <- plantTreat[ which(plantTreat$target_name=="BQCV"), ]
tapply(plantAcuteDWV$BINYprefilter, plantAcuteDWV$spp, mean)
# Clear memory of characters:
ls()
rm(list=ls())
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
expID <- as.vector(names(Visits))
visits <- as.vector(Visits)
VidDat <- data.frame(expID, visits)
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Full Model:
#remove NAs:
ModDat <- plantTreat[complete.cases(plantTreat), ]
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
ModDat
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits, family = binomial(link="logit"))
summary(Fullmod3)
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
ModDatSplit <- split(ModDat, ModDat$target_name)
Fullmod3 <- glmer(data=ModDatSplit$BQCV, BINYprefilter~ spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDatSplit$DWV, BINYprefilter~ spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * visits + target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits + exp, family = binomial(link="logit"))
summary(Fullmod3)
Anova(Fullmod3)
#Full Model:
#remove NAs:
#ModDat <- plantTreat[complete.cases(plantTreat), ]
ModDat <- plantTreat
ModDat
ModDatSplit <- split(ModDat, ModDat$target_name)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits + exp, family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
Fullmod3 <- glm(data=ModDatSplit$BQCV, BINYprefilter ~spp * visits + exp, family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glm(data=ModDatSplit$DWV, BINYprefilter ~spp * visits + exp, family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name + (1|exp), family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~taget_name * spp * visits + exp, family = binomial(link="logit"))
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits + exp, family = binomial(link="logit"))
Anova(Fullmod3, type=3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits + exp, family = binomial(link="logit"))
Anova(Fullmod3, type=3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits + exp, family = binomial(link="logit"))
Anova(Fullmod3, type=2)
Anova(Fullmod3, type=1)
Anova(Fullmod3, type=III)
Anova(Fullmod3, type="III")
anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name + (1|exp), family = binomial(link="logit"))
anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name * visits + (1|exp), family = binomial(link="logit"))
anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name * visits + (1|exp), family = binomial(link="logit"))
summary(Fullmod3)
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name * visits + (1|exp), REML = FALSE, family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp * target_name * visits + (1|exp), REML = TRUE, family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits + exp, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits + exp, family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~target_name * spp * visits, family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
summary(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
summary(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
Nullmod3 <- glm(data=ModDat, BINYprefilter ~ 1, family = binomial(link="logit"))
anova(Fullmod3, Nullmod3)
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
