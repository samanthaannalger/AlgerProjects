# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
#Checking out by plant species, ACUTE
plantSpp <- ddply(plantAcute, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Checking out by plant species, ACUTE
plantSpp <- ddply(plantAcute, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# Stats for each experiment:
#stats for % prevalence, species differences
statsplit <- split(plantAcute, plantAcute$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
statsplit
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
statsplit$DWV
# Stats for each experiment:
#stats for % prevalence, species differences
statsplit <- split(plantAcute, plantAcute$target_name)
statsplit
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
statsplit$DWV$BINYprefilter
statsplit$DWV$spp
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
statsplit$DWV$BINYprefilter
str(statsplit$DWV$BINYprefilter)
fisher.test(as.factor(statsplit$DWV$BINYprefilter),
as.factor(statsplit$DWV$spp))
plantTrans
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
library(plyr)
library(dplyr)
library(ggplot2)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantTreat
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantComingle <- plantTreat[which(plantTreat$exp=="comingle"),]
plantDiversity <- plantTreat[which(plantTreat$exp=="diversity"),]
plantAcute <- plantTreat[ which(plantTreat$exp=="chronic-1" | plantTreat$exp =="acute" | plantTreat$exp=="chronic-2"| plantTreat$exp=="chronic-3"), ]
#Checking out by plant species, ACUTE
plantSpp <- ddply(plantAcute, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
# Stats for each experiment:
#stats for % prevalence, species differences
statsplit <- split(plantAcute, plantAcute$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
#Full Model:
mod3 <- glmer(data=plantTreat, BINYprefilter~plantSpp * VirusType + (1|ID/Experiment), family = binomial(link="logit"))
#Full Model:
mod3 <- glmer(data=plantTreat, BINYprefilter~plantSpp * target_name + (1|ID/Experiment), family = binomial(link="logit"))
colnames(plantTreat)
#Full Model:
mod3 <- glmer(data=plantTreat, BINYprefilter~plantSpp * target_name + (1|ID/exp), family = binomial(link="logit"))
#Full Model:
mod3 <- glmer(data=plantTreat, BINYprefilter~spp * target_name + (1|ID/exp), family = binomial(link="logit"))
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~spp * target_name + (1|ID/exp), family = binomial(link="logit"))
summary(Fullmod3)
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~spp * target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
plantTreat
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~spp + target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~spp * target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + exp + (1|ID), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ exp + (1|ID), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + (1|ID/exp), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + (1|ID), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
plantTreat
---
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
library(ggplot2)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
#Check out visitation data
visitations <- table(VideoData$expID)
tapply(VideoData$Forage, VideoData$expID, mean)
head(VideoDataMerge)
VideoSum <- ddply(VideoDataMerge, c("PlantSpp", "detect", "virus"), summarise,
n = length(PlantSpp),
mean = mean(detect, na.rm=TRUE))
VideoSum
head(VideoDataMerge)
table(VideoDataMerge$expID)
table(VideoDataMerge$expID)
plantTreat
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
head(plantTrans)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
---
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
library(ggplot2)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
#Check out visitation data
visitations <- table(VideoData$expID)
tapply(VideoData$Forage, VideoData$expID, mean)
tapply(PlantDF$BINYprefilter, PlantDF$expID, mean)
VideoDataMerge$expID
table(VideoDataMerge$expID)
# Create a table for visitation data
Vists <- table(VideoDataMerge$expID)
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
Visits
Visits[,1]
Visits[1]
str(Visits)
as.vector(Visits)
names(Visits)
expID <- names(Visits)
expID
str(expID)
vis <- as.vector(Visits)
as.data.frame(expID, vis)
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
expID <- names(Visits)
vis <- as.vector(Visits)
as.data.frame(expID, vis)
expID
vis
expID <- as.vector(names(Visits))
expID
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
expID <- as.vector(names(Visits))
vis <- as.vector(Visits)
as.data.frame(expID, vis)
as.vector(names(Visits))
str(as.vector(names(Visits)))
data.frame(expID, vis)
DF <- data.frame(expID, vis)
DF
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
expID <- as.vector(names(Visits))
visits <- as.vector(Visits)
DF <- data.frame(expID, vis)
VidDat <- data.frame(expID, vis)
VidDat <- data.frame(expID, visits)
VidDat
# Plant Transmission Experiment
# Samantha Alger
# April 24, 2018
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
expID <- as.vector(names(Visits))
visits <- as.vector(Visits)
VidDat <- data.frame(expID, visits)
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
head(plantTrans)
View(plantTrans)
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
head(plantTreat)
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + (1|exp), family = binomial(link="logit"))
Fullmod3
#Full Model:
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
#Full Model:
#split dataframe to analyize each virus separately:
statsplit <- split(plantTreat, plantTreat$target_name)
FullmodBQ <- glmer(data=statsplit$BQCV, BINYprefilter~ spp * visits + (1|exp), family = binomial(link="logit"))
Anova(FullmodBQ)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp + (1|visits) + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3
Anova(Fullmod3)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
null <- glmer(data=plantTreat, BINYprefilter ~ 1 + (1|exp), family = binomial(link="logit"))
anova(Fullmod3, null)
Fullmod3 <- glmer(data=plantTreat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
null <- glmer(data=plantTreat, BINYprefilter ~ 1 + (1|exp), family = binomial(link="logit"))
anova(Fullmod3, null)
#Full Model:
#remove NAs:
ModDat <- plantTreat[complete.cases(plantTreat), ]
View(ModDat)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
#Full Model:
#remove NAs:
ModDat <- plantTreat[complete.cases(plantTreat), ]
View(plantTreat)
#Full Model:
#remove NAs:
ModDat <- plantTreat[complete.cases(plantTreat), ]
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Null <- glmer(data=ModDat, BINYprefilter~ 1 + (1|exp), family = binomial(link="logit"))
anova(Fullmod3, Null, test = "LRT")
Anova(Fullmod3)
summary(Fullmod3)
head(ModDat)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|ID)+ (1|exp), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|ID), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp/ID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|ID/exp), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|ID/expID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|expID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (ID|expID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1+ID|expID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (expID|ID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|expID), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|expID), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|expID), family = binomial(link="logit"))
Anova(Fullmod3)
colnames(ModDat)
head(ModDat)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|ID), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|exp), family = binomial(link="logit"))
Fullmod3 <- glm(data=ModDat, BINYprefilter~ target_name * spp * visits, family = binomial(link="logit"))
summary(Fullmod3)
Anova(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits, family = binomial(link="logit"))
summary(Fullmod3)
names(plantTreat$exp)
names(plantTreat)
names(plantTreat) [names(plantTreat) =="exp"] <- "experiment"
head(plantTreat)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
#Full Model:
#remove NAs:
names(plantTreat) [names(plantTreat) =="exp"] <- "experiment"
ModDat <- plantTreat[complete.cases(plantTreat), ]
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
#Full Model:
#remove NAs:
ModDat <- plantTreat[complete.cases(plantTreat), ]
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp * visits, family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits, family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp + (1|experiment), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ spp + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter ~ spp * target_name + (1|experiment), family = binomial(link="logit"))
Fullmod3 <- glmer(data=ModDat, BINYprefilter ~ target_name + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
summary(Fullmod3)
Fullmod3 <- glmer(data=ModDat, BINYprefilter~ target_name * spp * visits + (1|experiment), family = binomial(link="logit"))
Anova(Fullmod3)
summary(Fullmod3)
?convergence
