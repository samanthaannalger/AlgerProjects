###### SET UP DATA SET AND VARS FOR CALCULATIONS: #######
MWm2 <- 24.25 # density of plants per 1 meter squared
plotArea <- 137088 # area of plot in meters squared
plantsSE <- 300 # number of plants sampled at each time step
eggCounts <- c(0,0,0,1,1,3,0,0,0,0,0,0,0,0) # vector of counts of eggs at each of 14 time steps
# calculate total number of plants at BV:
plantsInPlot <- MWm2 * plotArea
plantsInPlot
# calculate the number of estimated eggs in plot for each time step:
totalEggsVec <- (eggCounts/plantsSE) * plantsInPlot
# sum them up for total eggs at BV so far:
sum(totalEggsVec)
totalEggsVec*.10
# sum them up for total eggs at BV so far:
sumeggs<-sum(totalEggsVec)
sumeggs*.10
# sum them up for total eggs at BV so far:
sumeggs<-sum(totalEggsVec)
sumeggs
# with 10% survivorship to adulthood:
sumeggs*.10
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/Milkweed/")
# read in data:
Monarch <- read.csv("MilkweedData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/AlgerProjects/csvFiles/")
# Set Working Directory:
setwd("~/AlgerProjects/Milkweed/Data")
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
Table(Monarch$Block$Date)
table(Monarch$Block$Date)
head(Monarch)
table(Monarch$Block$Date$Total_Eggs)
table(Monarch$Site$Total_Eggs)
table(Monarch$Site)
head(Monarch)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs), na.rm = TRUE)
# source my packages
library(plyr)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs), na.rm = TRUE)
# Clear memory of characters:
ls()
rm(list=ls())
# source my packages
library(plyr)
# Set Working Directory:
setwd("~/AlgerProjects/Milkweed/Data")
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
head(Monarch)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs), na.rm = TRUE)
egg
MonarchStats
# Clear memory of characters:
ls()
rm(list=ls())
# source my packages
library(plyr)
# Set Working Directory:
setwd("~/AlgerProjects/Milkweed/Data")
# read in data:
Monarch <- read.csv("MonarchData.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
head(Monarch)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs, na.rm = TRUE),
larvae = sum(Total_Larvae, na.rm = TRUE),
adults = sum(Total_Adulta, na.rm = TRUE))
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs, na.rm = TRUE),
larvae = sum(Total_Larvae, na.rm = TRUE),
adults = sum(Total_Adults, na.rm = TRUE))
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs, na.rm = TRUE),
larvae = sum(Total_Larvae, na.rm = TRUE),
adults = sum(TotalAdult, na.rm = TRUE))
MonarchStats
library(ggplot2)
str(MonarchStats)
install.packages("reshape2")
library(reshape2)
Monarchlong <- melt(MonarchStats, id.vars = c("egg", "larvae", "adults"))
head(Monarchlong)
MonarchStats <- ddply(Monarch, c("Site", "Date"), summarise,
egg = sum(Total_Eggs, na.rm = TRUE),
larvae = sum(Total_Larvae, na.rm = TRUE),
adults = sum(TotalAdult, na.rm = TRUE))
Monarchlong <- melt(MonarchStats, id.vars = c("Site", "Date"))
head(Monarchlong)
Monarchlong
MonarchLong <- melt(MonarchStats, id.vars = c("Site", "Date"))
# Plant Transmission Experiment
# Samantha Alger
# April 24, 2018
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
#setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
setwd("~/Documents/GitHub/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantVL <- read.csv ("CleanPlantVirus.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
# recode DF groups as control, treatment, pre-experiment
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# P12 is negative for DWV- bad meltcurve--- I manually deleted that row from the dataframe***
# Create table for forage time data
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
#setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
setwd("~/Documents/GitHub/AlgerProjects/PlantTransExp/CSV_Files")
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantVL <- read.csv ("CleanPlantVirus.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# Create table for forage time data
VidDat <- ddply(VideoDataMerge, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
# select columns from virus load DF and Merge with plantTrans DF:
virusLoad <- dplyr::select(virusLoad, labID, target_name, genomeCopy)
plantTrans <-merge(plantTrans, virusLoad, by=c("labID","target_name"), all.x=TRUE)
# Make all genome copyies 0 if Binyprefilter is 0, This is because the virus load data clean up did not take into account the duplicate/triplicate discrepancies...
plantTrans$genomeCopy <- ifelse(plantTrans$BINYprefilter == 0,0, plantTrans$genomeCopy)
plantTrans$experiment <- ifelse(plantTrans$exp == "chronic-1"|plantTrans$exp =="chronic-2"| plantTrans$exp == "chronic-3", "chronic", plantTrans$exp)
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% flowers with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .9)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# Clear memory of characters:
ls()
rm(list=ls())
#Set Working Directory:
setwd("~/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
virusLoad <- read.csv("datTransPos.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
PlantVL <- read.csv ("CleanPlantVirus.csv", header= TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# Create table for forage time data
VidDat <- ddply(VideoDataMerge, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
# select columns from virus load DF and Merge with plantTrans DF:
virusLoad <- dplyr::select(virusLoad, labID, target_name, genomeCopy)
plantTrans <-merge(plantTrans, virusLoad, by=c("labID","target_name"), all.x=TRUE)
# Make all genome copyies 0 if Binyprefilter is 0, This is because the virus load data clean up did not take into account the duplicate/triplicate discrepancies...
plantTrans$genomeCopy <- ifelse(plantTrans$BINYprefilter == 0,0, plantTrans$genomeCopy)
plantTrans$experiment <- ifelse(plantTrans$exp == "chronic-1"|plantTrans$exp =="chronic-2"| plantTrans$exp == "chronic-3", "chronic", plantTrans$exp)
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% flowers with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .9)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c(expression(italic("L. corniculatus"),italic("T. pretense"), italic("T. repens")))) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
############################################
#Full Model:
ModDat <- plantTreat
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ spp * (target_name + experiment), family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
Fullmod3
visitation <- ModDat[c("spp", "visits", "foragetime", "experiment")]
visitation <- visitation[!duplicated(visitation),]
hist(visitation$visits)
hist(visitation$foragetime)
# # visits by plant species:
kruskal.test(visitation$visits, as.factor(visitation$spp))
# total forage time by plant species:
kruskal.test(visitation$foragetime, as.factor(visitation$spp))
wilcox.test(ModDat$foragetime,ModDat$BINYprefilter)
wilcox.test(ModDat$visits, ModDat$BINYprefilter)
head(ModDat)
summary(Fullmod4)
barplot(ModDat$foragetime, ModDat$BINYprefilter)
fig1 <- ddply(ModDat, c("BINYprefilter"), summarise,
n = length(BINYprefilter),
mean = mean(foragetime, na.rm=TRUE),
sd = sd(foragetime, na.rm=TRUE),
se = sd / sqrt(n))
fig1 <- ggplot(fig1, aes(x=BINYprefilter, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="virus (yes no)", y = "sum Forage time")
fig1
# VIRUS LOAD
# Remove zeros
Loadno0 <- ModDat[!ModDat$BINYprefilter==0,]
#Checking distribution:
hist(Loadno0$genomeCopy, breaks = 12)
Loadno0$loggenomeCopy <- log(Loadno0$genomeCopy)
hist(Loadno0$loggenomeCopy,breaks=12)
noBFT<- Loadno0 [! (Loadno0$spp =="BFT"), ]
# We used an ANOVAs:
#Loadno0$visits <- as.factor(Loadno0$visits)
#Loadno0$foragetime <- as.factor(Loadno0$foragetime)
Loadno0$spp <- as.factor(Loadno0$spp)
# VL of the two viruses:
Fullmod4 <- lm(data=Loadno0, loggenomeCopy ~ spp * target_name)
anova(Fullmod4)
TukeyHSD(Fullmod4)
library("multcomp")
summary(glht(Fullmod4, mcp(spp="Tukey")))
str(Loadno0)
max(Loadno0$genomeCopy)
min(Loadno0$genomeCopy)
plot(Loadno0$spp~Loadno0$loggenomeCopy)
###############################################
# VIRUS LOAD FIGURE
VirusLoadFig <- ddply(Loadno0, c("target_name", "spp"), summarise,
n = length(spp),
mean = mean(loggenomeCopy, na.rm=TRUE),
sd = sd(loggenomeCopy, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(VirusLoadFig, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 15)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.5))
plot(Loadno0$genomeCopy~Loadno0$foragetime)
# Figure of the log virus genome copies
LoadPlot <- ggplot(Loadno0, aes(x=target_name, y=loggenomeCopy, fill=spp)) +
labs(x=NULL, y = "Log(virus load)")+
theme_classic(base_size = 20) +
geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2, notch=FALSE) + geom_dotplot(binaxis='y', stackdir = 'center', dotsize = 0.5, position = position_dodge()) + scale_fill_manual(values=colors, name="Plant Species:", labels=c(expression(italic("L. corniculatus"),italic("T. pretense"), italic("T. repens"))))
LoadPlot
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
plantComingle <- plantTreat[which(plantTreat$exp=="comingle"),]
plantDiversity <- plantTreat[which(plantTreat$exp=="diversity"),]
plantAcute <- plantTreat[ which(plantTreat$exp=="chronic-1" | plantTreat$exp =="acute" | plantTreat$exp=="chronic-2"| plantTreat$exp=="chronic-3"), ]
#Checking out by plant species, ACUTE
plantSpp <- ddply(plantAcute, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
# Stats for each experiment:
#stats for % prevalence, species differences
statsplit <- split(plantAcute, plantAcute$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
# What's the percent detection for each plant species for each virus?
plantAcuteDWV <- plantAcute[ which(plantAcute$target_name=="DWV"), ]
plantAcuteBQCV <- plantAcute[ which(plantAcute$target_name=="BQCV"), ]
tapply(plantAcuteDWV$BINYprefilter, plantAcuteDWV$spp, mean)
#BFT        RC        WC
#0.0000000 0.3333333 0.2307692
tapply(plantAcuteBQCV$BINYprefilter, plantAcuteBQCV$spp, mean)
# For Diversity:
plantSpp <- ddply(plantDiversity, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
# What's the percent detection for each plant species for each virus?
plantDiversityDWV <- plantDiversity[ which(plantDiversity$target_name=="DWV"), ]
plantDiversityBQCV <- plantDiversity[ which(plantDiversity$target_name=="BQCV"), ]
tapply(plantDiversityDWV$BINYprefilter, plantDiversityDWV$spp, mean)
#BFT        RC        WC
#0            1       0
tapply(plantDiversityBQCV$BINYprefilter, plantDiversityBQCV$spp, mean)
# For Comingle:
plantSpp <- ddply(plantComingle, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
# What's the percent detection for each plant species for each virus?
plantComingleDWV <- plantComingle[ which(plantComingle$target_name=="DWV"), ]
plantComingleBQCV <- plantComingle[ which(plantComingle$target_name=="BQCV"), ]
tapply(plantComingleDWV$BINYprefilter, plantComingleDWV$spp, mean)
# WC
# 0.2
tapply(plantComingleBQCV$BINYprefilter, plantComingleBQCV$spp, mean)
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by bombus species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#stats for % prevalence, species differences
statsplit <- split(plantTreat, plantTreat$target_name)
# chi.sq test for BQCV detected on flowers by plant spp.
chisq.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
fisher.test(statsplit$BQCV$BINYprefilter, statsplit$BQCV$spp)
# chi.sq test for DWV detected on flowers by plant spp.
chisq.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
fisher.test(statsplit$DWV$BINYprefilter, statsplit$DWV$spp)
#removing all WC and RC
plantTreat <- plantTreat[ which(plantTreat$spp=="BFT"), ]
fisher.test(plantTreat$BINYprefilter, plantTreat$target_name)
plantTreat$spp <- as.factor(plantTreat$spp)
plantTreat$target_name <- as.factor(plantTreat$target_name)
library(lme4)
plantMod <- glmer(data=plantTreat, formula = BINYprefilter ~ target_name*spp + (1|labID), family=binomial(link = "logit"))
summary(plantMod)
mod3 <- glm(data=plantTreat, BINYprefilter~target_name, family = binomial)
summary(mod3)
#Subsetting the diversity experiment:
plantDiv <- plantTrans[ which(plantTreat$exp=="diversity"), ]
plantAcute <- plantTrans[ which(plantTrans$exp=="acute"), ]
plantComingle <- plantTrans[ which(plantTrans$exp=="comingle"), ]
plantChronic <- plantTrans[ which(plantTrans$exp=="chronic"), ]
#Checking out by plant species
plantTransDiv <- ddply(plantDiv, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$spp[plantTransDiv$spp == "RC"] <- "Red Clover"
plantTransDiv$spp[plantTransDiv$spp == "BFT"] <- "BirdsFoot Trefoil"
plantTransDiv$spp[plantTransDiv$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses for diversity
plot1 <- ggplot(plantTransDiv, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
plantTransDiv <- ddply(plantAcute, c("target_name", "spp", "exp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantTransDiv$mean
# only include virus positive plant samples
PlantVL <- PlantVL[ which(PlantVL$virusBINY==1), ]
# Create table for forage time data
VidDat <- ddply(VideoDataMerge, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
VidDat
head(VideoDataMerge)
# Create table for forage time data
VidDat <- ddply(VideoDataMerge, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
head(plantTrans)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
head(VideoData)
VidDat
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
# Create table for forage time data
VidDat <- ddply(VideoData, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
VidDat
head(VideoData)
# Create table for forage time data
VidDat <- ddply(VideoData, c("expID"), summarise,
visits = length(expID),
foragetime = sum(Forage, na.rm=TRUE))
VidDat
